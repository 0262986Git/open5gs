/******************************************************************************
 *
 * This file has been generated by scripts automatically. Don't modify this.
 *
 ******************************************************************************/
#include "asn_tlv_user.h"

/*
    Type Name :  Accept/Reject Indicator
    Type: 1
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = accept
0x01 = reject
    Description: Indicates Accept/Reject of the corresponding request.
    Parent TLV(s): None
*/
#define ASNT_ACCEPT_REJECT_INDICATOR 1
#define ASNL_ACCEPT_REJECT_INDICATOR 1
typedef asnv_uint8_t asnv_accept_reject_indicator_t;
extern asnt_desc_t asnt_accept_reject_indicator;


/*
    Type Name :  Accounting Extension
    Type: 2
    Length in octets: Variable
    Value: String
    Description: This parameter indicates information relevant for accounting. The operation and the application content provider determine the format and value of the Accounting Extension.
    Parent TLV: SF Info
*/
#define ASNT_ACCOUNTING_EXTENSION 2
#define ASNL_ACCOUNTING_EXTENSION ASNL_VARIABLE
typedef asnv_octets_t asnv_accounting_extension_t;
extern asnt_desc_t asnt_accounting_extension;


/*
    Type Name :  Action Code
    Type: 3
    Length in octets: 2
    Value: Enumerator. The values are: 
0x0000 = Deregister MS. MS SHALL immediately terminate service with the BS and should attempt network entry at another BS;
0x0001 = Suspend all MS traffic including control traffic.  MS SHALL listen to the current BS but SHALL not transmit until an RES-CMD message or DREG-CMD with Action Code 02 or 03 is received;
0x0002 = Suspend user traffic (transport connections). MS SHALL listen to the current BS but only transmit on the Basic and Primary Management Connections;
0x0003 = Resume traffic. MS SHALL return to normal operation and may transmit on any of its active connections.
0x0005 = MS shall be put into idle mode.
0xfffe = Initial Authentication Failure. MS shall be sent the RNG-RSP with Ranging Result Code = Abort by the BS.
0xffff = MS shall be sent the RES-CMD by the BS. The MS will reload all configuration information and do initial network entry.
    Description: Indicates the action code to be used by BS in the DREG-CMD. Action Code TLV is used only in the messages directed to a BS.
    Message Primitives That Use This TLV: Path Control messages (Path_Dereg_Req), MS State Change messages.
*/
#define ASNT_ACTION_CODE 3
#define ASNL_ACTION_CODE 2
typedef asnv_uint16_t asnv_action_code_t;
extern asnt_desc_t asnt_action_code;


/*
    Type Name :  Action Time
    Type: 4
    Length in octets: 4
    Value: 32-bit unsigned integer.
    Description: For HO, this value indicates the radio frame in which the Target BS allocates a dedicated transmission opportunity for RNG-REQ message to be transmitted by the MS using Fast Ranging IE. This value is defined in absolute number of radio frames.
    Parent TLV(s): BS Info
*/
#define ASNT_ACTION_TIME 4
#define ASNL_ACTION_TIME 4
typedef asnv_uint32_t asnv_action_time_t;
extern asnt_desc_t asnt_action_time;


/*
    Type Name :  AK
    Type: 5
    Length in octets: 20
    Value: 160-bit AK Value.
    Description: AK is derived from the PMK at the NAS.
    Parent TLV(s): AK Context
*/
#define ASNT_AK 5
#define ASNL_AK 20
typedef asnv_octets_t asnv_ak_t;
extern asnt_desc_t asnt_ak;


/*
    Type Name :  AK ID
    Type: 7
    Length in octets: 8
    Value: 64-bit AK ID Value.
    Description: Identifies the AK that used for protecting the message.
    Parent TLV(s): AK Context
*/
#define ASNT_AK_ID 7
#define ASNL_AK_ID 8
typedef asnv_octets_t asnv_ak_id_t;
extern asnt_desc_t asnt_ak_id;


/*
    Type Name :  AK Lifetime
    Type: 8
    Length in octets: 4
    Value: 32-bit AK Lifetime value in seconds.
    Description: The time period during which the AK will be valid.
    Parent TLV(s): AK Context
*/
#define ASNT_AK_LIFETIME 8
#define ASNL_AK_LIFETIME 4
typedef asnv_uint32_t asnv_ak_lifetime_t;
extern asnt_desc_t asnt_ak_lifetime;


/*
    Type Name :  AK SN
    Type: 9
    Length in octets: 1
    Value: The field is coded as follows:
    Description: The Sequence number of root keys (PMK) for the AK.
    Parent TLV(s): AK Context
*/
#define ASNT_AK_SN 9
#define ASNL_AK_SN 1
typedef asnv_uint8_t asnv_ak_sn_t;
extern asnt_desc_t asnt_ak_sn;


/*
    Type Name :  CMAC_KEY_COUNT
    Type: 34
    Length in octets: 2 
    Value: Unsigned 16-bit integer.
    Description: Value of the Entry Counter that is used to guarantee freshness of computed CMAC_KEY_* with every entry and provide replay protection. Upon initial network entry, count is reset to 0 in the MS and Serving BS, and to 1 in the Authenticator.
    Parent TLV(s): AK Context
    MS Info: */
#define ASNT_CMAC_KEY_COUNT 34
#define ASNL_CMAC_KEY_COUNT 2
typedef asnv_uint16_t asnv_cmac_key_count_t;
extern asnt_desc_t asnt_cmac_key_count;


/*
    Type Name :  AK Context
    Type: 6
    Length in octets: Variable but not less than 10
    Value: Compound
    Description: Contains AK Context from Authenticator.
    Elements (Sub-TLVs): TLV Name
M/O
    AK: M
    AK ID: M
    AK Lifetime: M
    AK SN: M
    CMAC_KEY_COUNT: M
    Parent TLV(s): BS Info
*/
#define ASNT_AK_CONTEXT 6
#define ASNL_AK_CONTEXT ASNL_VARIABLE
typedef struct _asnv_ak_context_t {
    asnv_header_t h;
    asnv_ak_t ak;
    asnv_ak_id_t ak_id;
    asnv_ak_lifetime_t ak_lifetime;
    asnv_ak_sn_t ak_sn;
    asnv_cmac_key_count_t cmac_key_count;
} asnv_ak_context_t;
extern asnt_desc_t asnt_ak_context;


/*
    Type Name :  Anchor ASN GW ID
    Type: 10
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets)
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique identifier for the Anchor GW / Anchor Data Path Function.
    Parent TLV(s): MS Info
*/
#define ASNT_ANCHOR_ASN_GW_ID 10
#define ASNL_ANCHOR_ASN_GW_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_anchor_asn_gw_id_t;
extern asnt_desc_t asnt_anchor_asn_gw_id;


/*
    Type Name :  MS Mobility Mode
    Type: 104
    Length in octets: 2 byte
    Value: Enumerator. The values are:
0x0000 = PMIP4 
0x0001 =  CMIP4
0x0010 =  CMIP6
    Description: Indicates which R3 mobility the MS is using.
    Parent TLV(s): Anchor MM Context
*/
#define ASNT_MS_MOBILITY_MODE 104
#define ASNL_MS_MOBILITY_MODE 2
typedef asnv_uint16_t asnv_ms_mobility_mode_t;
extern asnt_desc_t asnt_ms_mobility_mode;


/*
    Type Name :  Target FA IP Address
    Type: 70
    Length in octets: 4 
    Value: IP address of the entity which containing anFA function.
    Description: 

    Parent TLV(s): MIP4 Info
*/
#define ASNT_TARGET_FA_IP_ADDRESS 70
#define ASNL_TARGET_FA_IP_ADDRESS 4
typedef asnv_uint32_t asnv_target_fa_ip_address_t;
extern asnt_desc_t asnt_target_fa_ip_address;


/*
    Type Name :  Target Care-of Address
    Type: 101
    Length in octets: 4
    Value: 

    Description: 

    Parent TLV(s): MIP4 Info
*/
#define ASNT_TARGET_CARE_OF_ADDRESS 101
#define ASNL_TARGET_CARE_OF_ADDRESS 4
typedef asnv_octets_t asnv_target_care_of_address_t;
extern asnt_desc_t asnt_target_care_of_address;


/*
    Type Name :  HA IP Address
    Type: 75
    Length in octets: Variable (either 4 or 16)
    Value: IP address of HA.
    Description: 

    Parent TLV(s): MIP4 Info, MIP4 Security Info
*/
#define ASNT_HA_IP_ADDRESS 75
#define ASNL_HA_IP_ADDRESS ASNL_VARIABLE
typedef asnv_octets_t asnv_ha_ip_address_t;
extern asnt_desc_t asnt_ha_ip_address;


/*
    Type Name :  Home Address (HoA)
    Type: 77
    Length in octets: 4 
    Value: Home Address (HoA) of the MS.
    Description: 

    Parent TLV(s): MIP4 Info
*/
#define ASNT_HOME_ADDRESS 77
#define ASNL_HOME_ADDRESS 4
typedef asnv_uint32_t asnv_home_address_t;
extern asnt_desc_t asnt_home_address;


/*
    Type Name :  Care-Of Address (CoA)
    Type: 28
    Length in octets: 4 
    Value: Care-Of Address (CoA) of the MS.
    Description: 

    Parent TLV(s): MIP4 Info
*/
#define ASNT_CARE_OF_ADDRESS 28
#define ASNL_CARE_OF_ADDRESS 4
typedef asnv_uint32_t asnv_care_of_address_t;
extern asnt_desc_t asnt_care_of_address;


/*
    Type Name :  Registration Lifetime
    Type: 147
    Length in octets: 2 
    Value: Registration Lifetime as defined in RFC 3344.
    Description: The remaining lifetime (measured in seconds).
    Parent TLV: MIP4 Info
*/
#define ASNT_REGISTRATION_LIFETIME 147
#define ASNL_REGISTRATION_LIFETIME 2
typedef asnv_uint16_t asnv_registration_lifetime_t;
extern asnt_desc_t asnt_registration_lifetime;


/*
    Type Name :  MIP4 Info
    Type: 96
    Length in octets: Variable
    Value: Compound
    Description: MIP4 Information about the MS.
    Elements (Sub-TLVs): TLV Name
M/O
    Target FA IP Address: O
    Target Care-of Address: O
    HA IP Address: O
    Home Address (HoA): O
    Care-of  Address (CoA): O
    Registration Lifetime: O
    Parent TLV(s): Anchor MM Context
*/
#define ASNT_MIP4_INFO 96
#define ASNL_MIP4_INFO ASNL_VARIABLE
typedef struct _asnv_mip4_info_t {
    asnv_header_t h;
    asnv_target_fa_ip_address_t target_fa_ip_address;
    asnv_target_care_of_address_t target_care_of_address;
    asnv_ha_ip_address_t ha_ip_address;
    asnv_home_address_t home_address;
    asnv_care_of_address_t care_of_address;
    asnv_registration_lifetime_t registration_lifetime;
} asnv_mip4_info_t;
extern asnt_desc_t asnt_mip4_info;


/*
    Type Name :  DHCP Server Address
    Type: 57
    Length in octets: Variable (either 4 or 16 )
    Value: IPv4 or IPv6 address.
    Description: IPv4 or IPv6 address of the DHCP server. This TLV SHALL be included in the Context_Rpt message (as part of DHCP Relay Info TLV) if Context Purpose Indicator TLV was set to DHCP-Relay-Info.
    Parent TLV(s): DHCP Relay Info and DHCP Server List
*/
#define ASNT_DHCP_SERVER_ADDRESS 57
#define ASNL_DHCP_SERVER_ADDRESS ASNL_VARIABLE
typedef asnv_octets_t asnv_dhcp_server_address_t;
extern asnt_desc_t asnt_dhcp_server_address;


/*
    Type Name :  DHCP Server List
    Type: 58
    Length in octets: Variable
    Value: Compound
    Description: List of DHCP servers.
    Elements (Sub-TLVs): TLV Name
M/O
    DHCP Server Address: O
    Parent TLV(s): Anchor MM Context
*/
#define ASNT_DHCP_SERVER_LIST 58
#define ASNL_DHCP_SERVER_LIST ASNL_VARIABLE
typedef struct _asnv_dhcp_server_list_t {
    asnv_header_t h;
    asnv_dhcp_server_address_t dhcp_server_address;
} asnv_dhcp_server_list_t;
extern asnt_desc_t asnt_dhcp_server_list;


/*
    Type Name :  IP Remained Time
    Type: 83
    Length in octets: 4  
    Value: 32-bit unsigned integer.
    Description: Remaining lease time for the assigned IP address. It is represented in unit of second.
    Message Primitives That Use This TLV: DHCP Proxy Info
*/
#define ASNT_IP_REMAINED_TIME 83
#define ASNL_IP_REMAINED_TIME 4
typedef asnv_uint32_t asnv_ip_remained_time_t;
extern asnt_desc_t asnt_ip_remained_time;


/*
    Type Name :  DHCP Proxy Info
    Type: 54
    Length in octets: Variable
    Value: Compound
    Description: Information about the DHCP Proxy.
    Elements (Sub-TLVs): TLV Name
M/O
    IP Remained Time: O
    Parent TLV(s): Anchor MM Context
*/
#define ASNT_DHCP_PROXY_INFO 54
#define ASNL_DHCP_PROXY_INFO ASNL_VARIABLE
typedef struct _asnv_dhcp_proxy_info_t {
    asnv_header_t h;
    asnv_ip_remained_time_t ip_remained_time;
} asnv_dhcp_proxy_info_t;
extern asnt_desc_t asnt_dhcp_proxy_info;


/*
    Type Name :  Anchor PC ID
    Type: 12
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets)
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique identifier for the Paging Controller network entity, which administers paging activity for the MS while in Idle Mode and retains MS service and operational information.
    Parent TLV(s): Paging Information,
*/
#define ASNT_ANCHOR_PC_ID 12
#define ASNL_ANCHOR_PC_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_anchor_pc_id_t;
extern asnt_desc_t asnt_anchor_pc_id;


/*
    Type Name :  IDLE Mode Info
    Type: 80
    Length in octets: Variable
    Value: Compound
    Description: Indicates if the MS is in Idle state.
    Elements (Sub-TLVs): TLV Name
M/O
    Anchor PC ID: O
    Parent TLV(s): Anchor MM Context
*/
#define ASNT_IDLE_MODE_INFO 80
#define ASNL_IDLE_MODE_INFO ASNL_VARIABLE
typedef struct _asnv_idle_mode_info_t {
    asnv_header_t h;
    asnv_anchor_pc_id_t anchor_pc_id;
} asnv_idle_mode_info_t;
extern asnt_desc_t asnt_idle_mode_info;


/*
    Type Name :  Anchor MM Context
    Type: 11
    Length in octets: Variable
    Value: Compound
    Description: Information related with FA relocation, which means all context maintained by some entities binding with FA relocation.
    Elements (Sub-TLVs): TLV Name
M/O
    MS Mobility Mode : M
    MIP4 Info: O
    DHCP Server List: O
    DHCP Proxy Info: O
    Idle Mode Info: O
    Parent TLV: MS Info
*/
#define ASNT_ANCHOR_MM_CONTEXT 11
#define ASNL_ANCHOR_MM_CONTEXT ASNL_VARIABLE
typedef struct _asnv_anchor_mm_context_t {
    asnv_header_t h;
    asnv_ms_mobility_mode_t ms_mobility_mode;
    asnv_mip4_info_t mip4_info;
    asnv_dhcp_server_list_t dhcp_server_list;
    asnv_dhcp_proxy_info_t dhcp_proxy_info;
    asnv_idle_mode_info_t idle_mode_info;
} asnv_anchor_mm_context_t;
extern asnt_desc_t asnt_anchor_mm_context;


/*
    Type Name :  Anchor PC Relocation Destination
    Type: 13
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets)
    Value: Destination might be in the format of either 4-octet IPv4 address, 6-octet 802.16 BS ID or 16-octet IPv6 address. The length defines the format of the identifier.
    Description: Network identifier for a new (target) Anchor Paging Controller network entity, which administers paging activity for the MS while in Idle Mode and retains MS service and operational information.
    Parent TLV(s): Paging Information
*/
#define ASNT_ANCHOR_PC_RELOCATION_DESTINATION 13
#define ASNL_ANCHOR_PC_RELOCATION_DESTINATION ASNL_VARIABLE
typedef asnv_octets_t asnv_anchor_pc_relocation_destination_t;
extern asnt_desc_t asnt_anchor_pc_relocation_destination;


/*
    Type Name :  Anchor PC Relocation Request Response
    Type: 14
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Accept
0x01 = Refuse
    Description: Indicates Accept/Reject of the corresponding request.
    Parent TLV(s): Paging Information
*/
#define ASNT_ANCHOR_PC_RELOCATION_REQUEST_RESPONSE 14
#define ASNL_ANCHOR_PC_RELOCATION_REQUEST_RESPONSE 1
typedef asnv_uint8_t asnv_anchor_pc_relocation_request_response_t;
extern asnt_desc_t asnt_anchor_pc_relocation_request_response;


/*
    Type Name :  Associated PHSI
    Type: 15
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The Associated PHSI value. It SHALL be equal to the PHSI value of the corresponding PHS Rule.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_ASSOCIATED_PHSI 15
#define ASNL_ASSOCIATED_PHSI 1
typedef asnv_uint8_t asnv_associated_phsi_t;
extern asnt_desc_t asnt_associated_phsi;


/*
    Type Name :  FA Revoke Reason
    Type: 16
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = DHCP Release
0x01 = DHCP expiry
0x02 = FA initiated release
0x03 = HA initiated release
    Description: Indicates the FA Revoke Reason.
    Message Primitives That Use This TLV: FA Revoke Req
*/
#define ASNT_FA_REVOKE_REASON 16
#define ASNL_FA_REVOKE_REASON 1
typedef asnv_uint8_t asnv_fa_revoke_reason_t;
extern asnt_desc_t asnt_fa_revoke_reason;


/*
    Type Name :  Authentication Result
    Type: 18
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Success
0x01 = Failure
    Description: This parameter indicates to BS the results of EAP authentication process.
    Parent TLV(s): Authentication Complete, MS Info
*/
#define ASNT_AUTHENTICATION_RESULT 18
#define ASNL_AUTHENTICATION_RESULT 1
typedef asnv_uint8_t asnv_authentication_result_t;
extern asnt_desc_t asnt_authentication_result;


/*
    Type Name :  PKM2 Message Code
    Type: 134
    Length in octets: 1
    Value: Enumerator. The values are:
0x0x12 = EAP Transfer
    Description: The value of this parameter indicates to BS the message code that SHOULD be used on PKMv2 and indirectly the state of authentication process.
    Parent TLV(s): Authentication Complete
*/
#define ASNT_PKM2_MESSAGE_CODE 134
#define ASNL_PKM2_MESSAGE_CODE 1
typedef asnv_uint8_t asnv_pkm2_message_code_t;
extern asnt_desc_t asnt_pkm2_message_code;


/*
    Type Name :  Authentication Complete
    Type: 17
    Length in octets: 2
    Value: 

    Description: 

    Elements (Sub-TLVs): TLV Name
M/O
    Authentication Result: M
    PKM2 Message Code: M
    Key_Change_Directive: */
#define ASNT_AUTHENTICATION_COMPLETE 17
#define ASNL_AUTHENTICATION_COMPLETE ASNL_VARIABLE
typedef struct _asnv_authentication_complete_t {
    asnv_header_t h;
    asnv_authentication_result_t authentication_result;
    asnv_pkm2_message_code_t pkm2_message_code;
} asnv_authentication_complete_t;
extern asnt_desc_t asnt_authentication_complete;


/*
    Type Name :  Authenticator ID
    Type: 19
    Length in octets: Variable (could be of three fixed sizes: 4, 6 and 16 octets)
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique identifier of MS’s Anchor Authenticator.
    Parent TLV(s): MS Info
*/
#define ASNT_AUTHENTICATOR_ID 19
#define ASNL_AUTHENTICATOR_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_authenticator_id_t;
extern asnt_desc_t asnt_authenticator_id;


/*
    Type Name :  RRQ
    Type: 20
    Length in octets: Variable
    Value: Same as defined in 2 including IP/UDP headers.
    Description: MIP Register Request message defined in 2.
    Parent TLV(s): FA_Register_Req
*/
#define ASNT_RRQ 20
#define ASNL_RRQ ASNL_VARIABLE
typedef asnv_octets_t asnv_rrq_t;
extern asnt_desc_t asnt_rrq;


/*
    Type Name :  Authorization policy support
    Type: 21
    Length in octets: 1
    Value: 8-bit Bitmask coded as follows:
Bit #0 =  RSA-based authorization at the initial network entry
Bit #1 =  EAP-based authorization at the initial network entry
Bit #2 =  Authenticated EAP-based authorization at the initial network entry
Bit #4 =  RSA-based authorization at reentry
Bit #5 =  EAP-based authorization at reentry
Bit #6 =  Authenticated EAP-based authorization at reentry
    Description: This parameter is used to indicate authentication mode. In MS Security History TLV, it indicates the capability negotiated between ASN and MS. Refer to 11.8.4.2 Authorization policy support in 802.16e.
    Parent TLV: MS Security History, Security Negotiation Parameters
*/
#define ASNT_AUTHORIZATION_POLICY_SUPPORT 21
#define ASNL_AUTHORIZATION_POLICY_SUPPORT 1
typedef asnv_uint8_t asnv_authorization_policy_support_t;
extern asnt_desc_t asnt_authorization_policy_support;


/*
    Type Name :  Available Radio Resource DL
    Type: 22
    Length in octets: 1
    Value: 8-bit unsigned integer:
8-bit unsigned integer:
0x00 = 0%
0x01 = 1%,
...,
0x64 = 100%
    Description: Available Radio Resource indicator DL SHALL indicate the average ratios of non assigned DL resources to the total usable DL radio resources. The average in percentage SHALL take place over a time interval specified by Averaging Time TLV of RRM Spare_Capacity_Req if provided; if omitted, the BS SHALL apply a default value. 
    Parent TLV(s): RRM BS Info
*/
#define ASNT_AVAILABLE_RADIO_RESOURCE_DL 22
#define ASNL_AVAILABLE_RADIO_RESOURCE_DL 1
typedef asnv_uint8_t asnv_available_radio_resource_dl_t;
extern asnt_desc_t asnt_available_radio_resource_dl;


/*
    Type Name :  Available Radio Resource UL
    Type: 23
    Length in octets: 1
    Value: 8-bit unsigned integer:
8-bit unsigned integer:
0x00 = 0%
0x01 = 1%,
...,
0x64 = 100%
    Description: Available Radio Resource indicator UL SHALL indicate the average ratios of non assigned DL resources to the total usable DL radio resources. The average in percentage SHALL take place over a time interval specified by Averaging Time TLV of RRM Spare_Capacity_Req if provided; if omitted, the BS SHALL apply a default value. 
    Parent TLV(s): RRM BS Info
*/
#define ASNT_AVAILABLE_RADIO_RESOURCE_UL 23
#define ASNL_AVAILABLE_RADIO_RESOURCE_UL 1
typedef asnv_uint8_t asnv_available_radio_resource_ul_t;
extern asnt_desc_t asnt_available_radio_resource_ul;


/*
    Type Name :  Maximum Sustained Traffic Rate
    Type: 92
    Length in octets: 4
    Value: 32-bit integer representing rate (in bits per second).
    Description: This parameter defines the peak information rate of the service. The rate is expressed in bits per second and pertains to the SDUs at the input to the system. Explicitly, this parameter does not include MAC overhead such as MAC headers or CRCs. This parameter does not limit the instantaneous rate of the service since this is governed by the physical attributes of the ingress port. If this parameter is omitted or set to zero, then there is no explicitly mandated maximum rate. This field specifies only a bound, not a guarantee that the rate is available. The algorithm for policing to this parameter is left to vendor differentiation and is outside the scope of the standard.
    Parent TLV: ERT-VR Data Delivery Service
ERT-VR Data Delivery Service
RT-VR Data Delivery Service
NRT-VR Data Delivery Service
BE Data Delivery Service
UGS Data Delivery Service
R3 Qos Descriptor
*/
#define ASNT_MAXIMUM_SUSTAINED_TRAFFIC_RATE 92
#define ASNL_MAXIMUM_SUSTAINED_TRAFFIC_RATE 4
typedef asnv_uint32_t asnv_maximum_sustained_traffic_rate_t;
extern asnt_desc_t asnt_maximum_sustained_traffic_rate;


/*
    Type Name :  Traffic Priority
    Type: 193
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Priority 0
0x01 = Priority 1
0x02 = Priority 2
0x03 = Priority 3
0x04 = Priority 4
0x05 = Priority 5
0x06 = Priority 6
0x07 = Priority 7
    Description: The value of this parameter specifies the priority assigned to a service flow as it is defined for the Traffic Priority in IEEE802.16e 2. Given two service flows identical in all QoS parameters besides priority, the higher priority service flow should be given lower delay and higher buffering preference. For otherwise non-identical service flows, the priority parameter should not take precedence over any conflicting service flow QoS parameter. The specific algorithm for enforcing this parameter is not mandated here.
    Parent TLV: BE Data Delivery Service
BE Data Delivery Service
UGS Data Delivery Service
NRT-VR Data Delivery Service
RT-VR Data Delivery Service
ERT-VR Data Delivery Service
R3 QoS Descriptor
*/
#define ASNT_TRAFFIC_PRIORITY 193
#define ASNL_TRAFFIC_PRIORITY 1
typedef asnv_uint8_t asnv_traffic_priority_t;
extern asnt_desc_t asnt_traffic_priority;


/*
    Type Name :  Request/Transmission Policy
    Type: 150
    Length in octets: 4
    Value: 32-bit bitmask with the following values:
Bit #0 =  Service flow SHALL not use broadcast bandwidth request opportunities. (Uplink only).
Bit #2 = Service flow SHALL not piggyback requests with data. (Uplink only).
Bit #3 = Service flow SHALL not fragment data.
Bit #4 = Service flow SHALL not suppress payload headers (CS parameter).
Bit #5 = Service flow SHALL not pack multiple SDUs (or fragments) into single MAC PDUs.
Bit #6 = Service flow SHALL not include CRC in the MAC PDU.
    Description: The value of this parameter provides the capability to specify certain attributes for the associated service flow. These attributes include options for PDU formation, and for uplink service flows, restrictions on the types of bandwidth request options that may be used. An attribute is enabled by setting the corresponding bit position to 1.
    Parent TLV: BE Data Delivery Service, ERT-VR Data Delivery Service, NRT-VR Data Delivery Service, RT-VR Data Delivery Service, UGS Data Delivery Service
*/
#define ASNT_REQUEST_TRANSMISSION_POLICY 150
#define ASNL_REQUEST_TRANSMISSION_POLICY 4
typedef asnv_uint32_t asnv_request_transmission_policy_t;
extern asnt_desc_t asnt_request_transmission_policy;


/*
    Type Name :  BE Data Delivery Service
    Type: 24
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the QoS parameters relevant for BE Data Delivery Service. If included in QoS Parameters, it implies BE Scheduling Service for UL connections.
    Elements (Sub-TLVs): TLV Name
M/O
    Maximum Sustained Traffic Rate: O 
    Traffic Priority. : O (if omitted means Traffic Priority = 0)
    Request/Transmission policy.: O  [a]
    Parent TLV: QoS Parameters
*/
#define ASNT_BE_DATA_DELIVERY_SERVICE 24
#define ASNL_BE_DATA_DELIVERY_SERVICE ASNL_VARIABLE
typedef struct _asnv_be_data_delivery_service_t {
    asnv_header_t h;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_traffic_priority_t traffic_priority;
    asnv_request_transmission_policy_t request_transmission_policy;
} asnv_be_data_delivery_service_t;
extern asnt_desc_t asnt_be_data_delivery_service;


/*
    Type Name :  BS ID
    Type: 25
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets)
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique BS Identifier, referring to a single sector with a single frequency assignment.
    Parent TLV(s): BS Info, RRM BS Info
*/
#define ASNT_BS_ID 25
#define ASNL_BS_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_bs_id_t;
extern asnt_desc_t asnt_bs_id;


/*
    Type Name :  Serving/Target Indicator
    Type: 182
    Length in octets: 1
    Value: Enumerator: The values are:
0x00 = Serving
0x01 = Target
    Description: Indicates if the designated BS is the Serving BS or Target BS for the handover.
    Message Primitives That Use This TLV: HO related messages.
    Parent TLV(s): BS Info, RRM BS_MS PHY Quality Info
*/
#define ASNT_SERVING_TARGET_INDICATOR 182
#define ASNL_SERVING_TARGET_INDICATOR 1
typedef asnv_uint8_t asnv_serving_target_indicator_t;
extern asnt_desc_t asnt_serving_target_indicator;


/*
    Type Name :  Round Trip Delay
    Type: 156
    Length in octets: 1
    Value: 8-bit integer representing Serving BS Round Trip Delay in the units of 1/Fs.
    Description: 

    Parent TLV: BS Info
*/
#define ASNT_ROUND_TRIP_DELAY 156
#define ASNL_ROUND_TRIP_DELAY 1
typedef asnv_uint8_t asnv_round_trip_delay_t;
extern asnt_desc_t asnt_round_trip_delay;


/*
    Type Name :  Relative Delay
    Type: 146
    Length in octets: 1
    Value: 8-bit unsigned integer. 
    Description: Represents the Target BS Relative Delay in milliseconds.
    Parent TLV: BS Info
*/
#define ASNT_RELATIVE_DELAY 146
#define ASNL_RELATIVE_DELAY 1
typedef asnv_uint8_t asnv_relative_delay_t;
extern asnt_desc_t asnt_relative_delay;


/*
    Type Name :  DL PHY Quality Info
    Type: 60
    Length in octets: 4
    Value: 32-bit integer encoding 8-bit DL RSSI Mean, 8-bit DL RSSI Std, 8-bit DL CINR Mean, 8-bit DL CINR Std.
    Description: 

    Parent TLV: BS Info, RRM BS-MS PHY Quality Info
*/
#define ASNT_DL_PHY_QUALITY_INFO 60
#define ASNL_DL_PHY_QUALITY_INFO 4
typedef asnv_uint32_t asnv_dl_phy_quality_info_t;
extern asnt_desc_t asnt_dl_phy_quality_info;


/*
    Type Name :  UL PHY Quality Info
    Type: 197
    Length in octets: 4
    Value: Octet 1: 8-bit UL RSSI Mean
Octet 1: 8-bit UL RSSI Mean
Octet 2: 8-bit UL RSSI Std
Octet 3: 8-bit UL CINR Mean
Octet 4:  8-bit UL CINR Std
    Description: 

    Parent TLV: BS Info
*/
#define ASNT_UL_PHY_QUALITY_INFO 197
#define ASNL_UL_PHY_QUALITY_INFO 4
typedef asnv_uint32_t asnv_ul_phy_quality_info_t;
extern asnt_desc_t asnt_ul_phy_quality_info;


/*
    Type Name :  Data Path Establishment Option
    Type: 43
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Do not (Pre-) Establish DP
0x01 = (Pre-) Establish DP
    Description: A flag indicating whether or not Data Path SHOULD be (pre-)established  by the entity hosting the Target HO Function (e.g., Target BS, Target ASN).
    Parent TLV: BS Info
*/
#define ASNT_DATA_PATH_ESTABLISHMENT_OPTION 43
#define ASNL_DATA_PATH_ESTABLISHMENT_OPTION 1
typedef asnv_uint8_t asnv_data_path_establishment_option_t;
extern asnt_desc_t asnt_data_path_establishment_option;


/*
    Type Name :  HO ID
    Type: 205
    Length in octets: Shall follow 802.16e
    Description: This IE is defined in the IEEE 802.16e spec.
    Parent TLV(s): BS Info
*/
#define ASNT_HO_ID 205
#define ASNL_HO_ID 1
typedef asnv_octets_t asnv_ho_id_t;
extern asnt_desc_t asnt_ho_id;


/*
    Type Name :  HO Process Optimization
    Type: 78
    Length in octets: 1
    Value: 8-bit integer representing HO Process Optimization code.
    Description: 

    Parent TLV: BS Info
*/
#define ASNT_HO_PROCESS_OPTIMIZATION 78
#define ASNL_HO_PROCESS_OPTIMIZATION 1
typedef asnv_uint8_t asnv_ho_process_optimization_t;
extern asnt_desc_t asnt_ho_process_optimization;


/*
    Type Name :  HO Authorization policy support
    Type: 367
    Length in octets: 1
    Value: 8-bit bitmask with the following values:
Bit #0 = RSA authorization
Bit #1 = EAP authorization
Bit #3 = HMAC supported
Bit #4 = CMAC supported
Bit #5 = 64-bit Short-HMAC
Bit #6 = 80-bit Short-HMAC
Bit #7 = 96-bit Short-HMAC
    Description: This parameter is used to indicate that the authorization policy for the target BS is negotiated. Refer HO Authorization policy support in 802.16e(Cor2/D3).
    Parent TLV: BS Info
*/
#define ASNT_HO_AUTHORIZATION_POLICY_SUPPORT 367
#define ASNL_HO_AUTHORIZATION_POLICY_SUPPORT 1
typedef asnv_uint8_t asnv_ho_authorization_policy_support_t;
extern asnt_desc_t asnt_ho_authorization_policy_support;


/*
    Type Name :  Spare Capacity Indicator
    Type: 186
    Length in octets: 2
    Value: 16-bit signed integer.
    Description: The value defines how many MSs with certain Quality Of Service Parameters and certain PHY Quality Info may be accommodated.
    Parent TLV: BS Info 
*/
#define ASNT_SPARE_CAPACITY_INDICATOR 186
#define ASNL_SPARE_CAPACITY_INDICATOR 2
typedef asnv_int16_t asnv_spare_capacity_indicator_t;
extern asnt_desc_t asnt_spare_capacity_indicator;


/*
    Type Name :  Service Level Prediction
    Type: 180
    Length in octets: 1
    Value: 8-bit integer representing Service Level Prediction.
    Description: 

    Parent TLV: BS Info
*/
#define ASNT_SERVICE_LEVEL_PREDICTION 180
#define ASNL_SERVICE_LEVEL_PREDICTION 1
typedef asnv_uint8_t asnv_service_level_prediction_t;
extern asnt_desc_t asnt_service_level_prediction;


/*
    Type Name :  Preamble Index/Sub-channel Index
    Type: 137
    Length in octets: 1
    Value: Unsigned 8-bit integer.
    Description: Represents Preamble Index/Sub-channel Index.
    Parent TLV: BS Info
*/
#define ASNT_PREAMBLE_INDEX_SUB_CHANNEL_INDEX 137
#define ASNL_PREAMBLE_INDEX_SUB_CHANNEL_INDEX 1
typedef asnv_uint8_t asnv_preamble_index_sub_channel_index_t;
extern asnt_desc_t asnt_preamble_index_sub_channel_index;


/*
    Type Name :  Failure Indication
    Type: 69
    Length in octets: 1 byte
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = Unspecified Error
0x01 = Protocol Version not understood (note 1) 
0x02 = Unrecognised Function Type
0x03 = Invalid Message Type
0x04 = Unknown MSID 
0x05 = Transaction Failure
0x06 = Source Identifier unknown or inconsistent with the IP source address
0x07 = Destination unknown
0x08 = Invalid Message Header
0x09 = Invalid OP ID
0x0A = Destination Identifier missing or erroneous
0x0B = Source Identifier TLV missing or erroneous
0x0C = Message type unknown or inopportune
0x0D = Unresolved error
0x0E-0x0F = Unspecific Message Header Failure; the sender SHALL NOT use the value. The receiver, when receiving this value, SHALL understand this value as“Unspecific Message Header Failure".
0x10 = Invalid message format
0x11 = Mandatory TLV missing
0x12 = TLV Value Invalid
0x13 = Unsupported Options
0x14 = TLV Unknown
0x15 = TLV Unexpected
0x16 = TLV parsing error
0x17-0x1F = Unspecific General Message Body Failure; the sender SHALL NOT use the value. The receiver, when receiving this value, SHALL understand this value as “Unspecific General Message Body Failure".
0x20 = Timer expired without response
0x21 = BSID out of service
0x22 = Unknown BSID
0x23 = BSID Unreachable
0x24-0x2F = Unspecific Message Generic Failure; the sender SHALL NOT use the value. The receiver, when receiving this value, SHALL understand this value as“Unspecific Message Generic Failure ".
0x30 = Requested Context Unavailable
0x31 = Authorization Failure
0x32 = Registration Failure
0x33 = No Resources
0x34 = Failure by rejection of MS
0x35 = Authenticator relocated
0x36 = Does not support periodic reporting of RRM messages
0x37 = Location Update Failure
0x38 = Idle Mode Authorization Failure
0x39 = Target BS doesn’t support this HO Type
0x3A = Insufficient Target BS airlink resource
0x3B = Target BS CPU overload
0x3C-0x7F = Unspecific Message-specific Failure; the sender SHALL NOT use the value. The receiver, when receiving this value, SHALL understand this value as“Unspecific Message-specific Failure"
    Description: Indicates the reason for failure of a previous message
    Parent TLV: None
    Message Primitives That Use This TLV: Any message on R6/R4/R8 that is used for failure reporting.
*/
#define ASNT_FAILURE_INDICATION 69
#define ASNL_FAILURE_INDICATION 1
typedef asnv_uint8_t asnv_failure_indication_t;
extern asnt_desc_t asnt_failure_indication;


/*
    Type Name :  SFID
    Type: 184
    Length in octets: 4
    Value: 32-bit unsigned integer.
    Description: SFID definition as per 802.16.
    Parent TLV(s): SF Info
*/
#define ASNT_SFID 184
#define ASNL_SFID 4
typedef asnv_uint32_t asnv_sfid_t;
extern asnt_desc_t asnt_sfid;


/*
    Type Name :  Reservation Action
    Type: 151
    Length in octets: 2
    Value: The Action field is a 16 bit vector with the following meaning for each bit being set to “1”:
Bit 15 (0x0001) = Create service flow
Bit 14 (0x0002) = Admit service flow
Bit 13 (0x0004) = Activate service flow
Bit 12 (0x0008) = Modify service flow
Bit 11 (0x0010) = Delete service flow
Bits 0 – 10 = Undefined
    Description: Identifies the requested resource reservation action. 
    Parent TLV: SF Info
*/
#define ASNT_RESERVATION_ACTION 151
#define ASNL_RESERVATION_ACTION 2
typedef asnv_uint16_t asnv_reservation_action_t;
extern asnt_desc_t asnt_reservation_action;


/*
    Type Name :  Reservation Result
    Type: 152
    Length in octets: 2
    Value: Result can be one of the following:
0x0000 = Successfully Created
0x0001 = Request Denied – No resources 
0x0002 = Request Denied due to Policy
0x0003 = Request Denied due to Requests for Other Flows Failed
0x0004 = Request Failed  (Unspecified reason)
0x0005 = Request Denied due to MS reason
Values in the range 0x0006 – 0xFEFF are Reserved
Values in the range 0xFF00 – 0xFFFF are Reserved
    Description: Indicates the result of a Resource Reservation Request.
    Parent TLV: SF Info
*/
#define ASNT_RESERVATION_RESULT 152
#define ASNL_RESERVATION_RESULT 2
typedef asnv_uint16_t asnv_reservation_result_t;
extern asnt_desc_t asnt_reservation_result;


/*
    Type Name :  ARQ Enable
    Type: 345
    Length in octets: 1
    Description: Indicates whether ARQ is enabled or not for the corresponding service flow as defined in IEEE802.16e.
    Value: Enumerator. The values are:
0x00 = ARQ Not Requested/Accepted
0x01 = ARQ Requested/Accepted
    Parent TLV: SF Info
*/
#define ASNT_ARQ_ENABLE 345
#define ASNL_ARQ_ENABLE 1
typedef asnv_octets_t asnv_arq_enable_t;
extern asnt_desc_t asnt_arq_enable;


/*
    Type Name :  ARQ_WINDOW_SIZE
    Type: 346
    Length in octets: 2
    Description: This parameter is negotiated upon connection setup or during operation as defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_WINDOW_SIZE 346
#define ASNL_ARQ_WINDOW_SIZE 2
typedef asnv_octets_t asnv_arq_window_size_t;
extern asnt_desc_t asnt_arq_window_size;


/*
    Type Name :  ARQ_RETRY_TIMEOUT-Transmitter Delay
    Type: 347
    Length in octets: 2
    Description: This is the total transmitter delay, including sending and receiving delays and other implementation dependent processing delays as defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_RETRY_TIMEOUT_TRANSMITTER_DELAY 347
#define ASNL_ARQ_RETRY_TIMEOUT_TRANSMITTER_DELAY 2
typedef asnv_octets_t asnv_arq_retry_timeout_transmitter_delay_t;
extern asnt_desc_t asnt_arq_retry_timeout_transmitter_delay;


/*
    Type Name :  ARQ_RETRY_TIMEOUT-Receiver Delay
    Type: 348
    Length in octets: 2
    Description: This is the total receiver delay, including receiving and sending delays and other implementation-dependent processing delays as defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_RETRY_TIMEOUT_RECEIVER_DELAY 348
#define ASNL_ARQ_RETRY_TIMEOUT_RECEIVER_DELAY 2
typedef asnv_octets_t asnv_arq_retry_timeout_receiver_delay_t;
extern asnt_desc_t asnt_arq_retry_timeout_receiver_delay;


/*
    Type Name :  ARQ_BLOCK_LIFETIME
    Type: 349
    Length in octets: 2
    Description: Indicates the lifetime of ARQ block as defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_BLOCK_LIFETIME 349
#define ASNL_ARQ_BLOCK_LIFETIME 2
typedef asnv_octets_t asnv_arq_block_lifetime_t;
extern asnt_desc_t asnt_arq_block_lifetime;


/*
    Type Name :  ARQ_SYNC_LOSS_TIMEOUT
    Type: 350
    Length in octets: 2
    Description: Indicates the maximum time interval after which loss of synchronization is indicated as defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_SYNC_LOSS_TIMEOUT 350
#define ASNL_ARQ_SYNC_LOSS_TIMEOUT 2
typedef asnv_octets_t asnv_arq_sync_loss_timeout_t;
extern asnt_desc_t asnt_arq_sync_loss_timeout;


/*
    Type Name :  ARQ_DELIVER_IN_ORDER
    Type: 351
    Length in octets: 1
    Description: As defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_DELIVER_IN_ORDER 351
#define ASNL_ARQ_DELIVER_IN_ORDER 1
typedef asnv_octets_t asnv_arq_deliver_in_order_t;
extern asnt_desc_t asnt_arq_deliver_in_order;


/*
    Type Name :  ARQ_RX_PURGE_TIMEOUT
    Type: 352
    Length in octets: 2
    Description: As defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_RX_PURGE_TIMEOUT 352
#define ASNL_ARQ_RX_PURGE_TIMEOUT 2
typedef asnv_octets_t asnv_arq_rx_purge_timeout_t;
extern asnt_desc_t asnt_arq_rx_purge_timeout;


/*
    Type Name :  ARQ_BLOCK_SIZE
    Type: 353
    Length in octets: 2
    Description: As defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_ARQ_BLOCK_SIZE 353
#define ASNL_ARQ_BLOCK_SIZE 2
typedef asnv_octets_t asnv_arq_block_size_t;
extern asnt_desc_t asnt_arq_block_size;


/*
    Type Name :  RECEIVER_ARQ_ACK_PROCESSING TIME
    Type: 354
    Length in octets: 1
    Description: As defined in IEEE802.16e.
    Value: This TLV is received over the R1 interface and shall follow the 802.16e definition.
    Parent TLV: ARQ Context
*/
#define ASNT_RECEIVER_ARQ_ACK_PROCESSING_TIME 354
#define ASNL_RECEIVER_ARQ_ACK_PROCESSING_TIME 1
typedef asnv_octets_t asnv_receiver_arq_ack_processing_time_t;
extern asnt_desc_t asnt_receiver_arq_ack_processing_time;


/*
    Type Name :  ARQ Context
    Type: 344
    Length in octets: Variable 
    Value: Compound
    Description: Contains ARQ related information of the service flow.
    Elements (Sub-TLVs): TLV Name
M/O
    ARQ_WINDOW_SIZE: O
    ARQ_RETRY_TIMEOUT-Transmitter Delay: O
    ARQ_RETRY_TIMEOUT-Receiver Delay: O
    ARQ_BLOCK_LIFETIME: O
    ARQ_SYNC_LOSS_TIMEOUT: O
    ARQ_DELIVER_IN_ORDER: O
    ARQ_RX_PURGE_TIMEOUT: O
    ARQ_BLOCK_SIZE: O
    RECEIVER_ARQ_ACK_PROCESSING TIME.: O
    Parent TLV(s): SF Info
*/
#define ASNT_ARQ_CONTEXT 344
#define ASNL_ARQ_CONTEXT ASNL_VARIABLE
typedef struct _asnv_arq_context_t {
    asnv_header_t h;
    asnv_arq_window_size_t arq_window_size;
    asnv_arq_retry_timeout_transmitter_delay_t arq_retry_timeout_transmitter_delay;
    asnv_arq_retry_timeout_receiver_delay_t arq_retry_timeout_receiver_delay;
    asnv_arq_block_lifetime_t arq_block_lifetime;
    asnv_arq_sync_loss_timeout_t arq_sync_loss_timeout;
    asnv_arq_deliver_in_order_t arq_deliver_in_order;
    asnv_arq_rx_purge_timeout_t arq_rx_purge_timeout;
    asnv_arq_block_size_t arq_block_size;
    asnv_receiver_arq_ack_processing_time_t receiver_arq_ack_processing_time;
} asnv_arq_context_t;
extern asnt_desc_t asnt_arq_context;


/*
    Type Name :  Direction
    Type: 59
    Length in octets: 2
    Value: Enumerator. The values are:
0x0000 = For Uplink
0x0001 = For Downlink
    Description: Describes the unidirectional Service Flow direction (i.e., UL or DL).
    Parent TLV: SF Info
*/
#define ASNT_DIRECTION 59
#define ASNL_DIRECTION 2
typedef asnv_uint16_t asnv_direction_t;
extern asnt_desc_t asnt_direction;


/*
    Type Name :  CID
    Type: 29
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: CID definition as per 802.16.
    Parent TLV(s): SF Info
*/
#define ASNT_CID 29
#define ASNL_CID 2
typedef asnv_uint16_t asnv_cid_t;
extern asnt_desc_t asnt_cid;


/*
    Type Name :  SAID
    Type: 169
    Length in octets: 2
    Value: SAID definition as per 802.16.
    Description: The SAID is a 16-bit identifier for the SA.
    Parent TLV(s): SF Info, SA Descriptor
*/
#define ASNT_SAID 169
#define ASNL_SAID 2
typedef asnv_uint16_t asnv_said_t;
extern asnt_desc_t asnt_said;


/*
    Type Name :  Classification Rule Index
    Type: 30
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: This TLV defines the index assigned to this classification rule:
The index is unique per service flow.
    Parent TLV(s): Packet Classification Rule / Media Flow Description
*/
#define ASNT_CLASSIFICATION_RULE_INDEX 30
#define ASNL_CLASSIFICATION_RULE_INDEX 2
typedef asnv_uint16_t asnv_classification_rule_index_t;
extern asnt_desc_t asnt_classification_rule_index;


/*
    Type Name :  Classification Rule Action
    Type: 31
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Add Classification Rule,
0x01 = Replace Classification Rule,
0x02 = Delete Classification Rule.
    Description: Add, replace or delete the classification Rule for the classification of a specific service flow.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_CLASSIFICATION_RULE_ACTION 31
#define ASNL_CLASSIFICATION_RULE_ACTION 1
typedef asnv_uint8_t asnv_classification_rule_action_t;
extern asnt_desc_t asnt_classification_rule_action;


/*
    Type Name :  Classification Rule Priority
    Type: 32
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The value of the field specifies the priority for the Classification Rule, which is used for determining the order of the Classification Rule. A higher value indicates higher priority. Classification Rules may have priorities in the range 0–255 with the default value being 0.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_CLASSIFICATION_RULE_PRIORITY 32
#define ASNL_CLASSIFICATION_RULE_PRIORITY 1
typedef asnv_uint8_t asnv_classification_rule_priority_t;
extern asnt_desc_t asnt_classification_rule_priority;


/*
    Type Name :  IP TOS/DSCP Range and Mask
    Type: 85
    Length in octets: 3
    Value: The value field is structured as follows:
Octet 1: Lower Limit
Octet 2: Higher Limit 
Octet 3: Mask 
    Description: The values of the field specify the matching parameters for the IP type of service/DSCP [IETF RFC 2474] byte range and mask. An IP packet with IP type of service (ToS) byte value “ip-tos” matches this parameter if tos-low less than or equal (ip-tos AND tos-mask) less than or equal tos-high. If this field is omitted, then comparison of the IP packet ToS byte for this entry is irrelevant.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_IP_TOS_DSCP_RANGE_AND_MASK 85
#define ASNL_IP_TOS_DSCP_RANGE_AND_MASK 3
typedef asnv_octets_t asnv_ip_tos_dscp_range_and_mask_t;
extern asnt_desc_t asnt_ip_tos_dscp_range_and_mask;


/*
    Type Name :  Protocol
    Type: 138
    Length in octets: 1
    Value: 8 bit integer, representing IP Protocol: protocol.
    Description: The value of the field specifies a matching value for the IP Protocol field. For IPv6 (IETF RFC 2460), this refers to next header entry in the last header of the IP header chain. The encoding of the value field is that defined by the IANA document “Protocol Numbers.” If this parameter is omitted, then comparison of the IP header Protocol field for this entry is irrelevant.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_PROTOCOL 138
#define ASNL_PROTOCOL 1
typedef asnv_uint8_t asnv_protocol_t;
extern asnt_desc_t asnt_protocol;


/*
    Type Name :  IP Source Address and Mask
    Type: 84
    Length in octets: 8 (IPv4) or 32 (IPv6)
    Value: An IP Source Address/Mask pairs: (Src1, Smask).
    Description: An IP source address and its corresponding address mask. An IP packet with IP source address “ip-src” matches this parameter if Src = (ip-src AND Smask) . If this parameter is omitted, then comparison of the IP packet source address for this entry is irrelevant.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_IP_SOURCE_ADDRESS_AND_MASK 84
#define ASNL_IP_SOURCE_ADDRESS_AND_MASK 8
typedef asnv_octets_t asnv_ip_source_address_and_mask_t;
extern asnt_desc_t asnt_ip_source_address_and_mask;


/*
    Type Name :  IP Destination Address and Mask
    Type: 82
    Length in octets: 8 (IPv4) or 32 (IPv6).
    Value: An IP Destination Address/Mask pairs: (dst1, dmask).
    Description: An IP destination addresses and its corresponding address mask. An IP packet with IP destination address “ip-dst” matches this parameter if Dst = (ip-dst AND Dmask). If this parameter is omitted, then comparison of the IP packet destination address for this entry is irrelevant.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_IP_DESTINATION_ADDRESS_AND_MASK 82
#define ASNL_IP_DESTINATION_ADDRESS_AND_MASK 8
typedef asnv_octets_t asnv_ip_destination_address_and_mask_t;
extern asnt_desc_t asnt_ip_destination_address_and_mask;


/*
    Type Name :  Protocol Source Port Range
    Type: 140
    Length in octets: 4
    Value: This field is coded as follows:
Octet 1 = MSB of SrcPortLow
Octet 2 = LSB of SrcPortLow
Octet 3 = MSB of SrcPortHigh
Octet 4 = LSB of SrcPortHigh
    Description: The value of the field specifies a range of protocol source port values. Classifier rules with port numbers are protocol specific; i.e., a rule on port numbers without a protocol specification SHALL not be defined. An IP packet with protocol port value “SrcPort” matches this parameter if SrcPort is greater than or equal to SrcPortLow and SrcPort is less than or equal to SrcPortHigh. If this parameter is omitted, the protocol source port is irrelevant. This parameter is irrelevant for protocols without port numbers.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_PROTOCOL_SOURCE_PORT_RANGE 140
#define ASNL_PROTOCOL_SOURCE_PORT_RANGE 4
typedef asnv_octets_t asnv_protocol_source_port_range_t;
extern asnt_desc_t asnt_protocol_source_port_range;


/*
    Type Name :  Protocol Destination Port Range
    Type: 139
    Length in octets: 4
    Value: This field is coded as follows:
Octet 1 = MSB of DstPortLow
Octet 2 = LSB of DstPortLow
Octet 3 = MSB of DstPortHigh
Octet 4 = LSB of DstPortHigh
    Description: The value of the field specifies a range of protocol destination port values. Classifier rules with port numbers are protocol specific; i.e., a rule on port numbers without a protocol specification SHALL not be defined. An IP packet with protocol port value “DstPort” matches this parameter if DstPort is greater than or equal to DstPortLow and DstPort is less than or equal to DstPortHigh. If this parameter is omitted, the protocol destination port is irrelevant. This parameter is irrelevant for protocols without port numbers.
    Parent TLV: Packet Classification Rule / Media Flow Description
*/
#define ASNT_PROTOCOL_DESTINATION_PORT_RANGE 139
#define ASNL_PROTOCOL_DESTINATION_PORT_RANGE 4
typedef asnv_octets_t asnv_protocol_destination_port_range_t;
extern asnt_desc_t asnt_protocol_destination_port_range;


/*
    Type Name :  Classification Result
    Type: 269
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = None 
0x01 = Discard packet
    Description: The value of this field specifies an action associated with the classification rule. If it is present in the Packet Classification Rule, its action shall be applied on the packets that match this classification rule.
    Parent TLV(s): Packet Classification Rule / Media Flow Description
*/
#define ASNT_CLASSIFICATION_RESULT 269
#define ASNL_CLASSIFICATION_RESULT 1
typedef asnv_uint8_t asnv_classification_result_t;
extern asnt_desc_t asnt_classification_result;


/*
    Type Name :  Packet Classification Rule / Media Flow Description (one or more)
    Type: 114
    Length in octets: Variable
    Value: Compound
    Description: Contains sub-elements representing Classification Rule Priority and Set of Classifiers functionally equivalent to those defined in 802.16. All parameters pertaining to a specific classification rule SHALL be included in the same Packet Classification Rule compound parameter. The TLV contains one packet classification rule.
    Elements (Sub-TLVs): TLV Name
M/O
    Classification Rule Index: M
    Classification Rule Action: O
    Classification Rule Priority: O
    IP TOS/DSCP Range and Mask: O
    Protocol: O
    IP Source Address and Mask: O
    IP Destination Address and Mask: O
    Protocol Source Port Range: O
    Protocol Destination Port Range: O
    Associated PHSI: O
    Classification Result: O
    Parent TLV: SF Info
*/
#define ASNT_PACKET_CLASSIFICATION_RULE 114
#define ASNL_PACKET_CLASSIFICATION_RULE ASNL_VARIABLE
typedef struct _asnv_packet_classification_rule_t {
    asnv_header_t h;
    asnv_classification_rule_index_t classification_rule_index;
    asnv_classification_rule_action_t classification_rule_action;
    asnv_classification_rule_priority_t classification_rule_priority;
    asnv_ip_tos_dscp_range_and_mask_t ip_tos_dscp_range_and_mask;
    asnv_protocol_t protocol;
    asnv_ip_source_address_and_mask_t ip_source_address_and_mask;
    asnv_ip_destination_address_and_mask_t ip_destination_address_and_mask;
    asnv_protocol_source_port_range_t protocol_source_port_range;
    asnv_protocol_destination_port_range_t protocol_destination_port_range;
    asnv_associated_phsi_t associated_phsi;
    asnv_classification_result_t classification_result;
} asnv_packet_classification_rule_t;
extern asnt_desc_t asnt_packet_classification_rule;


/*
    Type Name :  Minimum Reserved Traffic Rate
    Type: 95
    Length in octets: 4
    Value: 32-bit unsigned integer representing rate (in bits per second).
    Description: This parameter specifies the minimum rate reserved for this service flow. The rate is expressed in bits per second and specifies the minimum amount of data to be transported on behalf of the service flow when averaged over time. The specified rate SHALL only be honored when sufficient data is available for scheduling. When insufficient data exists, the requirement imposed by this parameter SHALL be satisfied by assuring the available data is transmitted as soon as possible.
    Parent TLV: UGS Data Delivery Service
UGS Data Delivery Service
ERT-VR Data Delivery Service
RT-VR Data Delivery Service
NRT-VR Data Delivery Service
R3 Qos Descriptor
*/
#define ASNT_MINIMUM_RESERVED_TRAFFIC_RATE 95
#define ASNL_MINIMUM_RESERVED_TRAFFIC_RATE 4
typedef asnv_uint32_t asnv_minimum_reserved_traffic_rate_t;
extern asnt_desc_t asnt_minimum_reserved_traffic_rate;


/*
    Type Name :  Maximum Latency
    Type: 91
    Length in octets: 4
    Value: 32-bit integer specifies the maximum latency (in milliseconds). 
    Description: Time period between the reception of a packet by the BS or MS on its network interface and the delivering the packet to the RF Interface of the peer device. If defined, this parameter represents a service commitment (or admission criteria) at the BS or MS and SHALL be guaranteed by the BS or MS. A BS or MS does not have to meet this service commitment for service flows that exceed their minimum reserved rate.
    Parent TLV: UGS Data Delivery Service
UGS Data Delivery Service
ERT-VR Data Delivery Service
RT-VR Data Delivery Service
*/
#define ASNT_MAXIMUM_LATENCY 91
#define ASNL_MAXIMUM_LATENCY 4
typedef asnv_uint32_t asnv_maximum_latency_t;
extern asnt_desc_t asnt_maximum_latency;


/*
    Type Name :  Tolerated Jitter
    Type: 190
    Length in octets: 4
    Value: 32-bit unsigned integer (in milliseconds).
    Description: This parameter represents the maximum delay variation (jitter) (in milliseconds).
    Parent TLV: UGS Data Delivery Service
UGS Data Delivery Service
ERT-VR Data Delivery Service
R3 Qos Descriptor
*/
#define ASNT_TOLERATED_JITTER 190
#define ASNL_TOLERATED_JITTER 4
typedef asnv_uint32_t asnv_tolerated_jitter_t;
extern asnt_desc_t asnt_tolerated_jitter;


/*
    Type Name :  SDU Size
    Type: 177
    Length in octets: 2
    Value: 16-bit unsigned integer. Default = 49.
    Description: Represents the number of bytes in the fixed size SDU. This parameter may be used for a UGS service flow when the length of IP packets on the data plane is fixed and known in advance (this is typically the case for flows generated by a specific codec).
    Parent TLV: UGS Data Delivery Service
*/
#define ASNT_SDU_SIZE 177
#define ASNL_SDU_SIZE 2
typedef asnv_uint16_t asnv_sdu_size_t;
extern asnt_desc_t asnt_sdu_size;


/*
    Type Name :  Unsolicited Grant Interval
    Type: 199
    Length in octets: 2
    Value: 16-bit unsigned integer representing the grant interval (in milliseconds).
    Description: The value of this parameter specifies the nominal interval between successive data grant opportunities for this service flow. This parameter may be used for a UGS and ERT-VR service flow when the inter-arrival time of IP packets on the data plane is known in advance (this is typically the case for flows generated by a specific codec).
    Parent TLV: ERT-VR Data Delivery Service
ERT-VR Data Delivery Service
UGS Data Delivery Service
R3 Qos Descriptor
*/
#define ASNT_UNSOLICITED_GRANT_INTERVAL 199
#define ASNL_UNSOLICITED_GRANT_INTERVAL 2
typedef asnv_uint16_t asnv_unsolicited_grant_interval_t;
extern asnt_desc_t asnt_unsolicited_grant_interval;


/*
    Type Name :  UGS Data Delivery Service
    Type: 196
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the QoS parameters relevant for UGS Data Delivery Service. If included in QoS Parameters, it implies UGS Scheduling Service for UL connections.
    Elements (Sub-TLVs): TLV Name
M/O Flag
    Minimum Reserved Traffic Rate: O
    Maximum Sustained Traffic Rate: M
    Maximum Latency: M
    Tolerated Jitter: O (omission means jitter equal to maximum latency)
    SDU Size: O (omission means variable size SDU)
    Unsolicited Grant Interval: M
    Traffic Priority: O (if omitted means Traffic Priority = 0)
    Request/Transmission Policy: O (see Note [a])
    Parent TLV: QoS Parameters
*/
#define ASNT_UGS_DATA_DELIVERY_SERVICE 196
#define ASNL_UGS_DATA_DELIVERY_SERVICE ASNL_VARIABLE
typedef struct _asnv_ugs_data_delivery_service_t {
    asnv_header_t h;
    asnv_minimum_reserved_traffic_rate_t minimum_reserved_traffic_rate;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_maximum_latency_t maximum_latency;
    asnv_tolerated_jitter_t tolerated_jitter;
    asnv_sdu_size_t sdu_size;
    asnv_unsolicited_grant_interval_t unsolicited_grant_interval;
    asnv_traffic_priority_t traffic_priority;
    asnv_request_transmission_policy_t request_transmission_policy;
} asnv_ugs_data_delivery_service_t;
extern asnt_desc_t asnt_ugs_data_delivery_service;


/*
    Type Name :  Maximum Traffic Burst
    Type: 93
    Length in octets: 4
    Value: 32-bit integer representing burst size (in bytes).
    Description: This parameter defines the maximum burst size that SHALL be accommodated for the service. Since the physical speed of ingress/egress ports, the air interface, and the backhaul will in general be greater than the maximum sustained traffic rate parameter for a service, this parameter describes the maximum continuous burst the system should accommodate for the service assuming the service is not currently using any of its available resources.
    Parent TLV: ERT-VR Data Delivery Service
ERT-VR Data Delivery Service
RT-VR Data Delivery Service
NRT-VR Data Delivery Service
R3 QoS Descriptor
*/
#define ASNT_MAXIMUM_TRAFFIC_BURST 93
#define ASNL_MAXIMUM_TRAFFIC_BURST 4
typedef asnv_uint32_t asnv_maximum_traffic_burst_t;
extern asnt_desc_t asnt_maximum_traffic_burst;


/*
    Type Name :  NRT-VR Data Delivery Service
    Type: 111
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the QoS parameters relevant for NRT-VR Data Delivery Service. If included in QoS Parameters, it implies nrtPS Scheduling Service for UL connections.
    Elements (Sub-TLVs): TLV Name
M/O
    Minimum Reserved Traffic Rate: M
    Traffic Priority: O (if omitted means Traffic Priority = 0)
    Maximum Sustained Traffic Rate: O (if absent defaulting to Minimum Reserved Traffic Rate)
    Request/Transmission Policy: O (see Note [a])
    Maximum Traffic Burst: O
    Parent TLV: QoS Parameters
*/
#define ASNT_NRT_VR_DATA_DELIVERY_SERVICE 111
#define ASNL_NRT_VR_DATA_DELIVERY_SERVICE ASNL_VARIABLE
typedef struct _asnv_nrt_vr_data_delivery_service_t {
    asnv_header_t h;
    asnv_minimum_reserved_traffic_rate_t minimum_reserved_traffic_rate;
    asnv_traffic_priority_t traffic_priority;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_request_transmission_policy_t request_transmission_policy;
    asnv_maximum_traffic_burst_t maximum_traffic_burst;
} asnv_nrt_vr_data_delivery_service_t;
extern asnt_desc_t asnt_nrt_vr_data_delivery_service;


/*
    Type Name :  Unsolicited Polling Interval
    Type: 199
    Length in octets: 2
    Value: 16-bit unsigned integer representing the polling interval (in milliseconds).
    Description: The value of this parameter specifies the maximal nominal interval between successive polling grants opportunities for this Service Flow.
    Parent TLV: RT-VR Data Delivery Service
RT-VR Data Delivery Service
*/
#define ASNT_UNSOLICITED_POLLING_INTERVAL 199
#define ASNL_UNSOLICITED_POLLING_INTERVAL 2
typedef asnv_uint16_t asnv_unsolicited_polling_interval_t;
extern asnt_desc_t asnt_unsolicited_polling_interval;


/*
    Type Name :  RT-VR Data Delivery Service
    Type: 165
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the QoS parameters relevant for RT-VR Data Delivery Service. If included in QoS Parameters, it implies rtPS Scheduling Service for UL connections.
    Elements (Sub-TLVs): TLV Name
M/O
    Minimum Reserved Traffic Rate: M
    Maximum Latency: M
    Unsolicited Polling Interval: M
    Traffic Priority: O (if omitted means Traffic Priority = 0)
    Maximum Sustained Traffic Rate : O (if absent defaulting to Minimum Reserved Traffic Rate)
    Request/Transmission Policy: O (see Note [a])
    Maximum Traffic Burst: O
    Parent TLV: QoS Parameters
*/
#define ASNT_RT_VR_DATA_DELIVERY_SERVICE 165
#define ASNL_RT_VR_DATA_DELIVERY_SERVICE ASNL_VARIABLE
typedef struct _asnv_rt_vr_data_delivery_service_t {
    asnv_header_t h;
    asnv_minimum_reserved_traffic_rate_t minimum_reserved_traffic_rate;
    asnv_maximum_latency_t maximum_latency;
    asnv_unsolicited_polling_interval_t unsolicited_polling_interval;
    asnv_traffic_priority_t traffic_priority;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_request_transmission_policy_t request_transmission_policy;
    asnv_maximum_traffic_burst_t maximum_traffic_burst;
} asnv_rt_vr_data_delivery_service_t;
extern asnt_desc_t asnt_rt_vr_data_delivery_service;


/*
    Type Name :  ERT-VR Data Delivery Service
    Type: 64
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the QoS parameters relevant for ERT-VR Data Delivery Service. If included in QoS Parameters, it implies ertPS Scheduling Service for UL connections.
    Elements (Sub-TLVs): TLV Name
M/O Flag
    Minimum Reserved Traffic Rate: M
    Maximum Latency: M
    Tolerated Jitter: O (omission means jitter equal to maximum latency)
    Unsolicited Grant Interval: M
    Traffic Priority: O (if omitted means Traffic Priority = 0)
    Maximum Sustained Traffic Rate : O (if absent defaulting to Minimum Reserved Traffic Rate)
    Request/Transmission Policy: O (see Note [a])
    Maximum Traffic Burst: O
    Parent TLV: QoS Parameters
*/
#define ASNT_ERT_VR_DATA_DELIVERY_SERVICE 64
#define ASNL_ERT_VR_DATA_DELIVERY_SERVICE ASNL_VARIABLE
typedef struct _asnv_ert_vr_data_delivery_service_t {
    asnv_header_t h;
    asnv_minimum_reserved_traffic_rate_t minimum_reserved_traffic_rate;
    asnv_maximum_latency_t maximum_latency;
    asnv_tolerated_jitter_t tolerated_jitter;
    asnv_unsolicited_grant_interval_t unsolicited_grant_interval;
    asnv_traffic_priority_t traffic_priority;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_request_transmission_policy_t request_transmission_policy;
    asnv_maximum_traffic_burst_t maximum_traffic_burst;
} asnv_ert_vr_data_delivery_service_t;
extern asnt_desc_t asnt_ert_vr_data_delivery_service;


/*
    Type Name :  Global Service Class Name
    Type: 74
    Length in octets: 6
    Value: Global Service Class Name as defined in IEEE802.16e.
    Description: Provides an authorized QoS parameters set in a length optimized format.
    Parent TLV(s): QoS Parameters, R3 QoS Descriptor
*/
#define ASNT_GLOBAL_SERVICE_CLASS_NAME 74
#define ASNL_GLOBAL_SERVICE_CLASS_NAME 6
typedef asnv_octets_t asnv_global_service_class_name_t;
extern asnt_desc_t asnt_global_service_class_name;


/*
    Type Name :  Service Class Name
    Type: 179
    Length in octets: 2 – 128
    Value: Service Class Name as defined in IEEE802.16e.
    Description: ASCII string, which is known at the BS and which indirectly specifies a set of QoS Parameters.
    Parent TLV: QoS Parameters
*/
#define ASNT_SERVICE_CLASS_NAME 179
#define ASNL_SERVICE_CLASS_NAME ASNL_VARIABLE
typedef asnv_octets_t asnv_service_class_name_t;
extern asnt_desc_t asnt_service_class_name;


/*
    Type Name :  Media Flow Type
    Type: 94
    Length in octets: 1 
    Value: Enumerator. The values are:
0x01 = Voice over IP
0x02 = Robust Browser
0x03 = Secure Browser/ VPN
0x04 = Streaming video on demand
0x05 = Streaming live TV
0x06 = Music and Photo Download
0x07 = Multi-player gaming
0x08 = Location-based services
0x09 = Text and Audio Books with Graphics
0x0A = Video Conversation
0x0B = Message
0x0C = Control
0x0D = Data
    Description: Describes the application type, used as a hint in admission decisions, for instance, VoIP, video, PTT, gaming, etc.
    Parent TLV: QoS Parameters
*/
#define ASNT_MEDIA_FLOW_TYPE 94
#define ASNL_MEDIA_FLOW_TYPE 1
typedef asnv_uint8_t asnv_media_flow_type_t;
extern asnt_desc_t asnt_media_flow_type;


/*
    Type Name :  Media Flow Description in SDP Format
    Type: 228
    Length in octets: Variable
    Value: &lt;SDP string&gt; is encoded as specified in IETF RFC 2327.
    Description: This is a variable length string having SDP information . The &lt;SDP string&gt; is encoded as specified in IETF RFC 2327.
    Parent TLV: QoS Parameters
*/
#define ASNT_MEDIA_FLOW_DESCRIPTION_IN_SDP_FORMAT 228
#define ASNL_MEDIA_FLOW_DESCRIPTION_IN_SDP_FORMAT ASNL_VARIABLE
typedef asnv_octets_t asnv_media_flow_description_in_sdp_format_t;
extern asnt_desc_t asnt_media_flow_description_in_sdp_format;


/*
    Type Name :  Reduced Resources Code
    Type: 237
    Length in octets: 0
    Value: Value = Null, see Description.
    Description: This code indicates that the requesting entity will accept reduced resources Code if the requested resources are not available.
    Parent TLV: QoS Parameters
QoS Parameters
R3 QoS Descriptor
*/
#define ASNT_REDUCED_RESOURCES_CODE 237
#define ASNL_REDUCED_RESOURCES_CODE 0
typedef asnv_null_t asnv_reduced_resources_code_t;
extern asnt_desc_t asnt_reduced_resources_code;


/*
    Type Name :  Data Integrity
    Type: 40
    Length in octets: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = No recommendation
0x01 = Data integrity requested
0x02 = Data delay jitter sensitive
    Description: Specifies, if data integrity is recommended. The value “data integrity requested” advises the base station that mechanism like ARQ/HARQ are requested. The value “data delay jitter sensitive” advises the base station that ARQ/HARQ may have negative effects.
    Parent TLV: QoS Parameters
*/
#define ASNT_DATA_INTEGRITY 40
#define ASNL_DATA_INTEGRITY 1
typedef asnv_uint8_t asnv_data_integrity_t;
extern asnt_desc_t asnt_data_integrity;


/*
    Type Name :  QoS Parameters
    Type: 141
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains all Parameters pertaining to a specific QoS Description.
    Elements (Sub-TLVs): TLV Name
M/O
    BE Data Delivery Service: O
    UGS Data Delivery Service: O
    NRT-VR Data Delivery Service: O
    RT-VR Data Delivery Service: O
    ERT-VR Data Delivery Service: O
    Global Service Class Name: O
    Service Class Name: O
    Media Flow Type: O
    Media Flow Description in SDP Format: O
    Reduced Resources Code: O
    Data Integrity: O
    Parent TLV: SF Info
*/
#define ASNT_QOS_PARAMETERS 141
#define ASNL_QOS_PARAMETERS ASNL_VARIABLE
typedef struct _asnv_qos_parameters_t {
    asnv_header_t h;
    asnv_be_data_delivery_service_t be_data_delivery_service;
    asnv_ugs_data_delivery_service_t ugs_data_delivery_service;
    asnv_nrt_vr_data_delivery_service_t nrt_vr_data_delivery_service;
    asnv_rt_vr_data_delivery_service_t rt_vr_data_delivery_service;
    asnv_ert_vr_data_delivery_service_t ert_vr_data_delivery_service;
    asnv_global_service_class_name_t global_service_class_name;
    asnv_service_class_name_t service_class_name;
    asnv_media_flow_type_t media_flow_type;
    asnv_media_flow_description_in_sdp_format_t media_flow_description_in_sdp_format;
    asnv_reduced_resources_code_t reduced_resources_code;
    asnv_data_integrity_t data_integrity;
} asnv_qos_parameters_t;
extern asnt_desc_t asnt_qos_parameters;


/*
    Type Name :  Paging Preference
    Type: 262
    Length in octets: 1
    Value: Refer to 802.16e section 11.13.30.
    Description: This parameter is a single bit indicator of an MS’s preference for the reception of paging advisory messages during idle mode. When set, it indicates that the BS may present paging advisory messages or other indicative messages to the MS when data SDUs bound for the MS are present while the MS is in idle mode.
    Parent TLV: SF Info
*/
#define ASNT_PAGING_PREFERENCE 262
#define ASNL_PAGING_PREFERENCE 1
typedef asnv_uint8_t asnv_paging_preference_t;
extern asnt_desc_t asnt_paging_preference;


/*
    Type Name :  CS Type
    Type: 39
    Length in octets: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = All CS Types
0x01 = Packet, IPv4
0x02 = Packet, IPv6
0x03 = Packet, 802.3
0x04 = Packet, 802.1Q
0x05 = Packet, IPv4over802.3
0x06 = Packet, IPv6over802.3
    Description: Indicates type of convergence layer between MS and BS.
    Parent TLV(s): SF Info, Combined Resource Indicator
*/
#define ASNT_CS_TYPE 39
#define ASNL_CS_TYPE 1
typedef asnv_uint8_t asnv_cs_type_t;
extern asnt_desc_t asnt_cs_type;


/*
    Type Name :  Data Path ID
    Type: 44
    Length in octets: 4
    Value: Data Path Identifier (e.g., GRE Key).
    Description: Identifier for a data path.
    Parent TLV: Data Path Info
*/
#define ASNT_DATA_PATH_ID 44
#define ASNL_DATA_PATH_ID 4
typedef asnv_uint32_t asnv_data_path_id_t;
extern asnt_desc_t asnt_data_path_id;


/*
    Type Name :  Data Path Encapsulation Type
    Type: 42
    Length in octets: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x01 = GRE
0x02 = IP-in-IP
0x03 = VLAN
    Description: Data Path Type.
    Parent TLV: Data Path Info
*/
#define ASNT_DATA_PATH_ENCAPSULATION_TYPE 42
#define ASNL_DATA_PATH_ENCAPSULATION_TYPE 1
typedef asnv_uint8_t asnv_data_path_encapsulation_type_t;
extern asnt_desc_t asnt_data_path_encapsulation_type;


/*
    Type Name :  Data Path Type
    Type: 47
    Length in octets: 1
    Value: Enumerator. The values are:
0x01 = Type1
0x02 = Type2
    Description: Distinguishes between Type 1 and Type 2 datapaths.
    Parent TLV: Data Path Info
*/
#define ASNT_DATA_PATH_TYPE 47
#define ASNL_DATA_PATH_TYPE 1
typedef asnv_uint8_t asnv_data_path_type_t;
extern asnt_desc_t asnt_data_path_type;


/*
    Type Name :  Data Path Integrity Mechanism
    Type: 46
    Length in octets: 1
    Value: Note:  Possible values are out of scope of Release 1.0.0 and will be defined in a future release.
    Description: 

    Parent TLV: Data Path Info
*/
#define ASNT_DATA_PATH_INTEGRITY_MECHANISM 46
#define ASNL_DATA_PATH_INTEGRITY_MECHANISM 1
typedef asnv_uint8_t asnv_data_path_integrity_mechanism_t;
extern asnt_desc_t asnt_data_path_integrity_mechanism;


/*
    Type Name :  Tunnel Endpoint
    Type: 194
    Length in octets: Variable (either 4 or 16 octets)
    Value: The Identifier might be in format of either 4-octet IPv4 Address, or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Specifies the IP Address of the GRE tunnel associated with the Data Path. If omitted than the IP Address is defaulted to the Source Address of the sender of Path (Pre-) Registration Request.
    Parent TLV(s): Data Path Info
*/
#define ASNT_TUNNEL_ENDPOINT 194
#define ASNL_TUNNEL_ENDPOINT ASNL_VARIABLE
typedef asnv_octets_t asnv_tunnel_endpoint_t;
extern asnt_desc_t asnt_tunnel_endpoint;


/*
    Type Name :  Data Path Info
    Type: 45
    Length in octets: Variable
    Value: Compound
    Description: Data Path Description.
    Elements (Sub-TLVs): TLV Name
M/O
    Data Path ID: M
    Data Path Encapsulation Type: O
    Data Path Type: O
    Data Path Integrity Mechanism: O
    Tunnel Endpoint: O
    Parent TLV: SF Info (for per SF Data Path)
*/
#define ASNT_DATA_PATH_INFO 45
#define ASNL_DATA_PATH_INFO ASNL_VARIABLE
typedef struct _asnv_data_path_info_t {
    asnv_header_t h;
    asnv_data_path_id_t data_path_id;
    asnv_data_path_encapsulation_type_t data_path_encapsulation_type;
    asnv_data_path_type_t data_path_type;
    asnv_data_path_integrity_mechanism_t data_path_integrity_mechanism;
    asnv_tunnel_endpoint_t tunnel_endpoint;
} asnv_data_path_info_t;
extern asnt_desc_t asnt_data_path_info;


/*
    Type Name :  SDU SN
    Type: 178
    Length in octets: 4
    Value: SDU Sequence Number (for Data Path Integrity operations).
    Description: 

    Parent TLV: SDU Info
*/
#define ASNT_SDU_SN 178
#define ASNL_SDU_SN 4
typedef asnv_octets_t asnv_sdu_sn_t;
extern asnt_desc_t asnt_sdu_sn;


/*
    Type Name :  SDU BSN Map
    Type: 175
    Length in octets: Variable
    Value: Bitmap expressing which Blocks of the SDU have been transmitted and/or acknowledged.
    Description: 

    Parent TLV: SDU Info
*/
#define ASNT_SDU_BSN_MAP 175
#define ASNL_SDU_BSN_MAP ASNL_VARIABLE
typedef asnv_octets_t asnv_sdu_bsn_map_t;
extern asnt_desc_t asnt_sdu_bsn_map;


/*
    Type Name :  SDU Info
    Type: 176
    Length in octets: Variable
    Value: 

    Description: Information about an SDU involved in Data Path Integrity operations.
    Elements (Sub-TLVs): TLV Name
M/O
    SDU SN: M
    SDU BSN Map: O
    Parent TLV: SF Info
*/
#define ASNT_SDU_INFO 176
#define ASNL_SDU_INFO ASNL_VARIABLE
typedef struct _asnv_sdu_info_t {
    asnv_header_t h;
    asnv_sdu_sn_t sdu_sn;
    asnv_sdu_bsn_map_t sdu_bsn_map;
} asnv_sdu_info_t;
extern asnt_desc_t asnt_sdu_info;


/*
    Type Name :  PHSI
    Type: 125
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: PHSI has a value between 1 and 255, which uniquely references the suppressed byte string. The index is unique per service flow. The uplink and downlink PHSI values are independent of each other.
    Parent TLV: PHS Rule
*/
#define ASNT_PHSI 125
#define ASNL_PHSI 1
typedef asnv_uint8_t asnv_phsi_t;
extern asnt_desc_t asnt_phsi;


/*
    Type Name :  PHSS
    Type: 129
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The value of this field is the total number of bytes in the header to be suppressed and then restored in a service flow that uses PHS. This TLV is used when a service flow is being created. For all packets that get classified and assigned to a service flow with PHS enabled, suppression SHALL be performed over the specified number of bytes as indicated by the PHSS and according to the PHSM. If this TLV is not included in a service flow definition, or is included with a value of 0 bytes, then PHS is disabled. A nonzero value indicates PHS is enabled.
    Parent TLV: PHS Rule
*/
#define ASNT_PHSS 129
#define ASNL_PHSS 1
typedef asnv_uint8_t asnv_phss_t;
extern asnt_desc_t asnt_phss;


/*
    Type Name :  PHSF
    Type: 124
    Length in octets: Variable
    Value: Byte string 
    Description: String of bytes containing the header information to be suppressed.
    Parent TLV: PHS Rule
*/
#define ASNT_PHSF 124
#define ASNL_PHSF ASNL_VARIABLE
typedef asnv_octets_t asnv_phsf_t;
extern asnt_desc_t asnt_phsf;


/*
    Type Name :  PHSM
    Type: 126
    Length in octets: Variable
    Value: Bit string
    Description: The value of this field is used to interpret the values in the PHSF. It is used at both the sending and receiving entities. The PHSM allows fields, such as sequence numbers or checksums (which vary in value), to be excluded from suppression with the constant bytes around them suppressed:
Bit #0:  0 = Do not suppress first byte of the suppression field, 1 = Suppress first byte of the suppression field.
Bit #1:  0 = Do not suppress second byte of the suppression field, 1 = Suppress second byte of the suppression field.
Bit #x:  0 = Do not suppress (x+1) byte of the suppression field, 1 = Suppress (x+1) byte of the suppression field.
    Parent TLV: PHS Rule
*/
#define ASNT_PHSM 126
#define ASNL_PHSM ASNL_VARIABLE
typedef asnv_octets_t asnv_phsm_t;
extern asnt_desc_t asnt_phsm;


/*
    Type Name :  PHSV
    Type: 130
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Verify
0x01 = Don’t verify
    Description: The value of this field indicates to the sending entity whether or not the packet header contents are to be verified prior to performing suppression. If PHSV is enabled, the sender SHALL compare the bytes in the packet header with the bytes in the PHSF that are to be suppressed as indicated by the PHSM.
    Parent TLV: PHS Rule
*/
#define ASNT_PHSV 130
#define ASNL_PHSV 1
typedef asnv_uint8_t asnv_phsv_t;
extern asnt_desc_t asnt_phsv;


/*
    Type Name :  PHS Rule Action
    Type: 128
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Add PHS Rule
0x01 = Replace PHS Rule
0x02 = Delete PHS Rule
0x03 = Delete All PHS Rules
    Description: PHS Action Code.
    Parent TLV: PHS Rule
*/
#define ASNT_PHS_RULE_ACTION 128
#define ASNL_PHS_RULE_ACTION 1
typedef asnv_uint8_t asnv_phs_rule_action_t;
extern asnt_desc_t asnt_phs_rule_action;


/*
    Type Name :  PHS Rule
    Type: 127
    Length in octets: Variable
    Value: Compound
    Description: Parameters associated with a PHS Rule. Omission means PHS is disabled.
    Elements (Sub-TLVs): TLV Name
M/O
    PHSI: M
    PHSS: M
    PHSF : M
    PHSM : M
    PHSV: M
    PHS Rule Action: O
    Parent TLV: SF Info
*/
#define ASNT_PHS_RULE 127
#define ASNL_PHS_RULE ASNL_VARIABLE
typedef struct _asnv_phs_rule_t {
    asnv_header_t h;
    asnv_phsi_t phsi;
    asnv_phss_t phss;
    asnv_phsf_t phsf;
    asnv_phsm_t phsm;
    asnv_phsv_t phsv;
    asnv_phs_rule_action_t phs_rule_action;
} asnv_phs_rule_t;
extern asnt_desc_t asnt_phs_rule;


/*
    Type Name :  SA Type
    Type: 173
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Primary
0x01 = Static
0x02 = Dynamic
    Description: Type of SA.
    Parent TLV(s): SA Descriptor
*/
#define ASNT_SA_TYPE 173
#define ASNL_SA_TYPE 1
typedef asnv_uint8_t asnv_sa_type_t;
extern asnt_desc_t asnt_sa_type;


/*
    Type Name :  SA Service Type
    Type: 172
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Unicast Service
0x01 = Group Multicast Service
0x02 = MBS Service
    Description: This attribute indicates service types of the corresponding SA type. This attribute SHALL be included only when the SA type is Static SA or Dynamic SA. The GTEK SHALL be used to encrypt connection for group multicast service. The MTK SHALL be used to encrypt connection for MBS service.
    Parent TLV(s): SA Descriptor
*/
#define ASNT_SA_SERVICE_TYPE 172
#define ASNL_SA_SERVICE_TYPE 1
typedef asnv_uint8_t asnv_sa_service_type_t;
extern asnt_desc_t asnt_sa_service_type;


/*
    Type Name :  Cryptographic Suite
    Type: 38
    Length in octets: 4
    Value: Enumerator. The values are: 
0x00000 = No data encryption, no data authentication &amp; 3-DES, 128
0x010001 = CBC-Mode 56-bit DES, no data authentication &amp; 3-DES, 128
0x000002 = No data encryption, no data authentication &amp; RSA, 1024
0x010002 = CBC-Mode 56-bit DES, no data authentication &amp; RSA, 1024
0x020103 = CCM-Mode 128-bit AES, CCM-Mode, 128-bit, ECB mode AES with 128-bit key
0x020104 = CCM-Mode 128bits AES, CCM-Mode, AES Key Wrap with 128-bit key
0x030003 = CBC-Mode 128-bit AES, no data authentication, ECB mode AES with 128-bit key
0x800003 = MBS CTR Mode 128 bits AES, no data authentication, AES ECB mode with 128-bit key
0x800004 = MBS CTR mode 128 bits AES, no data authentication, AES Key Wrap with 128-bit key
    Description: Indicates crytopgraphic suites allowed.
    Parent TLV(s): SA Descriptor
*/
#define ASNT_CRYPTOGRAPHIC_SUITE 38
#define ASNL_CRYPTOGRAPHIC_SUITE 4
typedef asnv_uint32_t asnv_cryptographic_suite_t;
extern asnt_desc_t asnt_cryptographic_suite;


/*
    Type Name :  TEK
    Type: 187
    Length in octets: Two fixed sizes, either 8 or 16
    Value: 64-bit or 128-bit string.
    Description: Traffic Encryption Key.
    Parent TLV(s): Older TEK Parameters, Newer TEK Parameters
*/
#define ASNT_TEK 187
#define ASNL_TEK ASNL_VARIABLE
typedef asnv_octets_t asnv_tek_t;
extern asnt_desc_t asnt_tek;


/*
    Type Name :  TEK SN
    Type: 189
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = TEK Sequence Number 0
0x01 = TEK Sequence Number 1
0x02 = TEK Sequence Number 2
0x03 = TEK Sequence Number 3
    Description: 2-bit TEK Sequence Number.
    Parent TLV(s): Older TEK Parameters, Newer TEK Parameters
*/
#define ASNT_TEK_SN 189
#define ASNL_TEK_SN 1
typedef asnv_uint8_t asnv_tek_sn_t;
extern asnt_desc_t asnt_tek_sn;


/*
    Type Name :  TEK Lifetime
    Type: 188
    Length in octets: 4
    Value: 32-bit unsigned integer.
    Description: The remaining TEK Lifetime in seconds. The value 0x00000000 means that the corresponding TEK is not valid.
    Parent TLV(s): Older TEK Parameters, Newer TEK Parameters
*/
#define ASNT_TEK_LIFETIME 188
#define ASNL_TEK_LIFETIME 4
typedef asnv_uint32_t asnv_tek_lifetime_t;
extern asnt_desc_t asnt_tek_lifetime;


/*
    Type Name :  PN Counter
    Type: 136
    Length in octets: 4
    Value: Unsigned 32-bit integer.
    Description: Last value of PN Counter used on DL (for AES CCM cipher suite).
    Parent TLV(s): Older TEK Parameters, Newer TEK Parameters
*/
#define ASNT_PN_COUNTER 136
#define ASNL_PN_COUNTER 4
typedef asnv_uint32_t asnv_pn_counter_t;
extern asnt_desc_t asnt_pn_counter;


/*
    Type Name :  RxPN Counter
    Type: 166
    Length in octets: 4
    Value: Unsigned 32-bit integer.
    Description: Last value of PN Counter used on UL (for AES CCM cipher suite).
    Parent TLV(s): Older TEK Parameters, Newer TEK Parameters
*/
#define ASNT_RXPN_COUNTER 166
#define ASNL_RXPN_COUNTER 4
typedef asnv_uint32_t asnv_rxpn_counter_t;
extern asnt_desc_t asnt_rxpn_counter;


/*
    Type Name :  Older TEK Parameters
    Type: 112
    Length in octets: Variable
    Value: Compound TLV
    Description: Set of the Older TEK Parameters.
    Elements (Sub-TLVs): TLV Name
M/O
    TEK: M
    TEK SN: M
    TEK Lifetime: M
    PN Counter: O
    RxPN Counter: O
    Parent TLVs: SA Descriptor
*/
#define ASNT_OLDER_TEK_PARAMETERS 112
#define ASNL_OLDER_TEK_PARAMETERS ASNL_VARIABLE
typedef struct _asnv_older_tek_parameters_t {
    asnv_header_t h;
    asnv_tek_t tek;
    asnv_tek_sn_t tek_sn;
    asnv_tek_lifetime_t tek_lifetime;
    asnv_pn_counter_t pn_counter;
    asnv_rxpn_counter_t rxpn_counter;
} asnv_older_tek_parameters_t;
extern asnt_desc_t asnt_older_tek_parameters;


/*
    Type Name :  Newer TEK Parameters
    Type: 110
    Length in octets: Variable
    Value: Compund TLV
    Description: Set of the Newer TEK Parameters.
    Elements (Sub-TLVs): TLV Name        
M/O
    TEK: M
    TEK SN: M
    TEK Lifetime: M
    PN Counter: O
    RxPN Counter: O
    Parent TLVs: SA Descriptor
*/
#define ASNT_NEWER_TEK_PARAMETERS 110
#define ASNL_NEWER_TEK_PARAMETERS ASNL_VARIABLE
typedef struct _asnv_newer_tek_parameters_t {
    asnv_header_t h;
    asnv_tek_t tek;
    asnv_tek_sn_t tek_sn;
    asnv_tek_lifetime_t tek_lifetime;
    asnv_pn_counter_t pn_counter;
    asnv_rxpn_counter_t rxpn_counter;
} asnv_newer_tek_parameters_t;
extern asnt_desc_t asnt_newer_tek_parameters;


/*
    Type Name :  SA Descriptor
    Type: 170
    Length in octets: Variable
    Value: Compound TLV
    Description: Set of SA-related IEs.
    Elements (Sub-TLVs): TLV Name
M/O
    SAID: M
    SA Type: M
    SA Service Type: O
    Cryptographic Suite : M
    Older TEK Parameters: O
    Newer TEK Parameters: O
    Parent TLVs: MS Info
*/
#define ASNT_SA_DESCRIPTOR 170
#define ASNL_SA_DESCRIPTOR ASNL_VARIABLE
typedef struct _asnv_sa_descriptor_t {
    asnv_header_t h;
    asnv_said_t said;
    asnv_sa_type_t sa_type;
    asnv_sa_service_type_t sa_service_type;
    asnv_cryptographic_suite_t cryptographic_suite;
    asnv_older_tek_parameters_t older_tek_parameters;
    asnv_newer_tek_parameters_t newer_tek_parameters;
} asnv_sa_descriptor_t;
extern asnt_desc_t asnt_sa_descriptor;


/*
    Type Name :  Correlation ID
    Type: 37
    Length in octets: 4
    Value: 32-bit unsigned integer.
    Description: Indicates correlation between Service Flows. Service Flows with the same Correlation ID are assumed to be related on higher layers and may be treated with common policy.
    Parent TLV(s): SF Info
*/
#define ASNT_CORRELATION_ID 37
#define ASNL_CORRELATION_ID 4
typedef asnv_uint32_t asnv_correlation_id_t;
extern asnt_desc_t asnt_correlation_id;


/*
    Type Name :  Data Delivery Trigger
    Type: 265
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = No trigger
0x01 = Triggers immediate delivery of data for the specified Service Flow
    Description: Triggers data delivery for the specified service flow.
    Parent TLV: SF Info
*/
#define ASNT_DATA_DELIVERY_TRIGGER 265
#define ASNL_DATA_DELIVERY_TRIGGER 1
typedef asnv_uint8_t asnv_data_delivery_trigger_t;
extern asnt_desc_t asnt_data_delivery_trigger;


/*
    Type Name :  SF Info
    Type: 185
    Length in octets: Variable
    Value: Compound
    Description: Service Flow Description. 
    Elements (Sub-TLVs): TLV Name
M/O
    Failure Indication: O
    SFID: M
    Reservation Action: O
    Reservation Result: O
    ARQ Enable: O
    ARQ Context: O
    Direction: O
    CID: O
    SAID: O
    Packet Classification Rule / Media Flow Description (one or more): O
    QoS Parameters: O
    Paging Preference: O
    CS Type: O
    Data Path Info: O
    SDU Info: O
    PHS Rule : O
    Accounting Extension: O
    SA Descriptor: O
    Correlation ID: O
    Data Delivery Trigger : O
    Parent TLV(s): MS Info, BS Info
*/
#define ASNT_SF_INFO 185
#define ASNL_SF_INFO ASNL_VARIABLE
typedef struct _asnv_sf_info_t {
    asnv_header_t h;
    asnv_failure_indication_t failure_indication;
    asnv_sfid_t sfid;
    asnv_reservation_action_t reservation_action;
    asnv_reservation_result_t reservation_result;
    asnv_arq_enable_t arq_enable;
    asnv_arq_context_t arq_context;
    asnv_direction_t direction;
    asnv_cid_t cid;
    asnv_said_t said;
    asnv_packet_classification_rule_t packet_classification_rule;
    asnv_qos_parameters_t qos_parameters;
    asnv_paging_preference_t paging_preference;
    asnv_cs_type_t cs_type;
    asnv_data_path_info_t data_path_info;
    asnv_sdu_info_t sdu_info;
    asnv_phs_rule_t phs_rule;
    asnv_accounting_extension_t accounting_extension;
    asnv_sa_descriptor_t sa_descriptor;
    asnv_correlation_id_t correlation_id;
    asnv_data_delivery_trigger_t data_delivery_trigger;
} asnv_sf_info_t;
extern asnt_desc_t asnt_sf_info;


/*
    Type Name :  Time Stamp
    Type: 358
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Time stamp for the message transmission time. Time Stamp will be in 24 hour format with granularity in milli seconds since January 1, 1970 00:00 UTC. The 5 most significant bits are set to zero.
    Parent TLV(s): BS Info
*/
#define ASNT_TIME_STAMP 358
#define ASNL_TIME_STAMP 4
typedef asnv_uint32_t asnv_time_stamp_t;
extern asnt_desc_t asnt_time_stamp;


/*
    Type Name :  BS HO RSP Code
    Type: 203
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Void
0x01 = Target BS doesn’t support this HO Type 
0x02 = Target BS’s air link resource is not enough
0x03 = Target BS’s CPU overload
0x04 = Target BS rejects for other reasons
    Description: This TLV is used to carry HO failure reason for target BS.
    Parent TLV(s): BS Info
*/
#define ASNT_BS_HO_RSP_CODE 203
#define ASNL_BS_HO_RSP_CODE 1
typedef asnv_uint8_t asnv_bs_ho_rsp_code_t;
extern asnt_desc_t asnt_bs_ho_rsp_code;


/*
    Type Name :  BS Info
    Type: 26
    Length in octets: Variable
    Value: 

    Description: Description of BS.
    Elements (Sub-TLVs): TLV Name
M/O
    BS ID: M
    Serving/Target Indicator:     Round Trip Delay: O
    Relative Delay: O
    DL PHY Quality Info: O
    UL PHY Quality Info: O
    Data Path Establishment Option: O
    HO ID (see note): O
    HO Process Optimization: O
    HO Authorization Policy Support: O
    Spare Capacity Indicator: O
    Service Level Prediction: O
    Preamble Index / Sub-channel Index: O
    SF Info: O
    Action Time: O
    Time Stamp: O
    BS HO RSP Code: O
    AK Context : O
    Message Primitives That Use This TLV: Every Message
*/
#define ASNT_BS_INFO 26
#define ASNL_BS_INFO ASNL_VARIABLE
typedef struct _asnv_bs_info_t {
    asnv_header_t h;
    asnv_bs_id_t bs_id;
    asnv_serving_target_indicator_t serving_target_indicator;
    asnv_round_trip_delay_t round_trip_delay;
    asnv_relative_delay_t relative_delay;
    asnv_dl_phy_quality_info_t dl_phy_quality_info;
    asnv_ul_phy_quality_info_t ul_phy_quality_info;
    asnv_data_path_establishment_option_t data_path_establishment_option;
    asnv_ho_id_t ho_id;
    asnv_ho_process_optimization_t ho_process_optimization;
    asnv_ho_authorization_policy_support_t ho_authorization_policy_support;
    asnv_spare_capacity_indicator_t spare_capacity_indicator;
    asnv_service_level_prediction_t service_level_prediction;
    asnv_preamble_index_sub_channel_index_t preamble_index_sub_channel_index;
    asnv_sf_info_t ASNV_1_OR_MORE(sf_info); /* User modification */
    asnv_action_time_t action_time;
    asnv_time_stamp_t time_stamp;
    asnv_bs_ho_rsp_code_t bs_ho_rsp_code;
    asnv_ak_context_t ak_context;
} asnv_bs_info_t;
extern asnt_desc_t asnt_bs_info;


/*
    Type Name :  BS-originated EAP-Start Flag
    Type: 27
    Length in octets: 0
    Value: N/A
    Description: Flag indicating that AR_EAP_Start message is originated by a BS (without receiving PKMv2 EAP-Start from an MS). A BS may use AR_EAP_Start with this flag to instigate reauthentication process when MS security context in BS is going to expire.
    Parent TLV: MS Info
*/
#define ASNT_BS_ORIGINATED_EAP_START_FLAG 27
#define ASNL_BS_ORIGINATED_EAP_START_FLAG 0
typedef asnv_null_t asnv_bs_originated_eap_start_flag_t;
extern asnt_desc_t asnt_bs_originated_eap_start_flag;


/*
    Type Name :  Combined Resources Required
    Type: 35
    Length in octets: 2
    Value: Enumerator. The values are:
Enumerator. The values are:
0x0000 = Not combined;
0x0001 =Combined;
    Description: When this TLV’s value is “Combined,” then if any of the pre-provisioned SFs for the indicated CS type cannot be successfully established, all of the SFs for the CS type must be removed. When this TLV’s value is “Not combined,” then each pre-provisioned SF for the indicated CS type can be established independently,
    Parent TLV: Combined Resource Indicator 
*/
#define ASNT_COMBINED_RESOURCES_REQUIRED 35
#define ASNL_COMBINED_RESOURCES_REQUIRED 2
typedef asnv_uint16_t asnv_combined_resources_required_t;
extern asnt_desc_t asnt_combined_resources_required;


/*
    Type Name :  Context Purpose Indicator
    Type: 36
    Length in octets: 4
    Value: 32-bit Bitmask.
Bit #0 = MS AK Context.
Bit #2 = MS MAC Context
Bit #3 = MS Authorization Context
Bit #4 = Anchor MM Context
Bit #5 = Accounting context
Bit #6 = MS Security History
Bit #7 = SA Context
Bit #8 = MN-FA key context
Bit #9 = FA-HA key context
Bit #10 = DHCP-Relay-Info
Bit #11 = Security Context Delivery
Bit #12 = MIP6 handover successful
Bit #13 = Online Accounting context
Bit #14 = Offline Accounting context
    Description: Indicates the type of context to be delivered:
Setting Bit #0 requests delivering AK Context associated with a particular MS. 
Setting Bit #1 requests delivery Network Addressable IDs (i.e., BS ID, Anchor GW ID, Authenticator ID, PC ID) associated with a particular MS and known to the responder.
Setting Bit#2 requests delivery of MAC Context associated with a particular MS that is available in BS. This includes REG Context, SBC Context and PKMv2 context.
Setting Bit#3 requests delivery of service authorization and policy context (e.g., authorization code) associated with a particular MS.
Setting Bit#4 requests delivery of Anchor MM Context associated with a particular MS.
Setting Bit#5 requests delivery of Accounting provisioning info
Setting Bit#6 requests delivery of MS Security History
Setting Bit#7 requests SA Context. This is included based on the bits set in the Idle Mode Retain Information TLV from the MS and if cached in the BS apriori.
Setting Bit#7 requests delivery of MIP4 Security Info TLV with MN-FA key context.
Setting Bit#9 requests delivery of MIP4 Security Info TLV with FA-HA key context.
Setting Bit#10 requests delivery of DHCP relay information.
Setting Bit#11 requests delivery of the security context.
setting bit#12 indicates that the MIP6 handover is successfully completed and R4 data path between previous anchor DPF and new anchor DPF can be released.
Setting Bit#13 requests delivery of Online Accounting context/ quota(s).
Setting Bit#14 requests delivery of Offline Accounting context.
    Message Primitives That Use This TLV: Context Delivery messages.
*/
#define ASNT_CONTEXT_PURPOSE_INDICATOR 36
#define ASNL_CONTEXT_PURPOSE_INDICATOR 4
typedef asnv_uint32_t asnv_context_purpose_indicator_t;
extern asnt_desc_t asnt_context_purpose_indicator;


/*
    Type Name :  DCD/UCD Configuration Change Count
    Type: 48
    Length in octets: 1
    Value: 8-bit integer:
Bits #0…3 = The 4 LSBs of the BS’s current DCD configuration change count;
Bits #4…7 = The 4 LSBs of the BS’s current UCD configuration change count.
    Description: This includes the 4 LSBs of the BS’s current DCD and UCD configuration change count figures
    Parent TLV(s): RRM BS Info
*/
#define ASNT_DCD_UCD_CONFIGURATION_CHANGE_COUNT 48
#define ASNL_DCD_UCD_CONFIGURATION_CHANGE_COUNT 1
typedef asnv_uint8_t asnv_dcd_ucd_configuration_change_count_t;
extern asnt_desc_t asnt_dcd_ucd_configuration_change_count;


/*
    Type Name :  DCD Setting
    Type: 49
    Length in octets: Variable
    Value: Compound, as specified in [802.16e-2005], section 11.1.7.
    Description: This is an IEEE802.16e-2005 defined TLV. The DCD_settings is a TLV value that encapsulates a DCD message (excluding the generic MAC header and CRC) that may be transmitted in the advertised BS downlink channel. This information is intended to enable fast synchronization of the MS with the advertised BS downlink.
    Parent TLV(s): RRM BS Info
    
: 

*/
#define ASNT_DCD_SETTING 49
#define ASNL_DCD_SETTING ASNL_VARIABLE
typedef asnv_octets_t asnv_dcd_setting_t;
extern asnt_desc_t asnt_dcd_setting;


/*
    Type Name :  ODFMA Parameters Sets
    Type: 50
    Length in octets: 1
    Value: 8-bit bitmask
    Description: Identifies the profile of the capabilities of the MS negotiated during SBC handshake
Bit#0 = Support OFDMA PHY parameter set A
Bit#1 = Support OFDMA PHY parameter set B
Bit#2-#4 = HARQ parameters set
Bit#5 = Support OFDMA MAC parameters set A
Bit#6 = Support OFDMA MAC parameters set B
Bit#7 = Reserved
    Parent TLV: SBC Context
*/
#define ASNT_OFDMA_PARAMETERS_SETS 50
#define ASNL_OFDMA_PARAMETERS_SETS 1
typedef asnv_uint8_t asnv_ofdma_parameters_sets_t;
extern asnt_desc_t asnt_ofdma_parameters_sets;


/*
    Type Name :  DHCP Key
    Type: 51
    Length in octets: 20 
    Value: 160-bit unsigned integer.
    Description: Key used to calculate and authenticate messages between the DHCP relay in the ASN and DHCP server in the CSN, as per 2.  This TLV SHALL be included in the Context_Rpt message (as part of DHCP Relay Info TLV) if Context Purpose Indicator TLV was set to DHCP-Relay-Info.
    Parent TLV(s): DHCP Relay Info
*/
#define ASNT_DHCP_KEY 51
#define ASNL_DHCP_KEY 20
typedef asnv_octets_t asnv_dhcp_key_t;
extern asnt_desc_t asnt_dhcp_key;


/*
    Type Name :  DHCP Key ID
    Type: 52
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Key ID associated with the key used to compute authentication suboption as per 2.  This TLV SHALL be included in the Context_Rpt message (as part of DHCP Relay Info TLV) if DHCP Key TLV is included.
    Parent TLV(s): DHCP Relay Info
*/
#define ASNT_DHCP_KEY_ID 52
#define ASNL_DHCP_KEY_ID 4
typedef asnv_uint32_t asnv_dhcp_key_id_t;
extern asnt_desc_t asnt_dhcp_key_id;


/*
    Type Name :  DHCP Key Lifetime
    Type: 53
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: The remaining lifetime in seconds of the DHCP key.  This TLV SHALL be included in the Context_Rpt message (as part of DHCP Relay Info TLV) if DHCP Key TLV is included.
    Parent TLV(s): DHCP Relay Info
*/
#define ASNT_DHCP_KEY_LIFETIME 53
#define ASNL_DHCP_KEY_LIFETIME 4
typedef asnv_uint32_t asnv_dhcp_key_lifetime_t;
extern asnt_desc_t asnt_dhcp_key_lifetime;


/*
    Type Name :  DHCP Relay Address
    Type: 55
    Length in octets: Variable (either 4 or 16 bytes)
    Value: IPv4 or IPv6 address.
    Description: DHCP relay’s IPv4 or IPv6 address facing the DHCP server. This TLV SHALL be included in the Context_Req message (as part of DHCP Relay Info TLV) if Context Purpose Indicator TLV is set to DHCP-Relay-Info.
    Parent TLV(s): DHCP Relay Info
*/
#define ASNT_DHCP_RELAY_ADDRESS 55
#define ASNL_DHCP_RELAY_ADDRESS ASNL_VARIABLE
typedef asnv_octets_t asnv_dhcp_relay_address_t;
extern asnt_desc_t asnt_dhcp_relay_address;


/*
    Type Name :  DHCP Relay Info
    Type: 56
    Length in octets: Variable
    Value: Compound
    Description: Information about the DHCP Relay. This TLV SHALL be included in the Context_Req and Context_Rpt messages if Context Purpose Indicator TLV is set to DHCP-Relay-Info.
    Elements (Sub-TLVs): TLV Name
M/O
    DHCP Server Address: O
    DHCP Relay Address: O
    DHCP Key: O
    DHCP Key ID: O
    DHCP Key Lifetime: O
    Parent TLV(s): MS Info.
*/
#define ASNT_DHCP_RELAY_INFO 56
#define ASNL_DHCP_RELAY_INFO ASNL_VARIABLE
typedef struct _asnv_dhcp_relay_info_t {
    asnv_header_t h;
    asnv_dhcp_server_address_t dhcp_server_address;
    asnv_dhcp_relay_address_t dhcp_relay_address;
    asnv_dhcp_key_t dhcp_key;
    asnv_dhcp_key_id_t dhcp_key_id;
    asnv_dhcp_key_lifetime_t dhcp_key_lifetime;
} asnv_dhcp_relay_info_t;
extern asnt_desc_t asnt_dhcp_relay_info;


/*
    Type Name :  DL PHY Service Level
    Type: 61
    Length in octets: 4
    Value: 32-bit integer representing DL PSL.
    Description: 

    Parent TLV: RRM BS-MS PHY Quality Info
*/
#define ASNT_DL_PHY_SERVICE_LEVEL 61
#define ASNL_DL_PHY_SERVICE_LEVEL 4
typedef asnv_uint32_t asnv_dl_phy_service_level_t;
extern asnt_desc_t asnt_dl_phy_service_level;


/*
    Type Name :  EAP Payload
    Type: 62
    Length in octets: Variable
    Value: EAP Payload (for EAP over R6 Authentication Relay).
    Description: EAP Messages.
    Message Primitives That Use This TLV: EAP Relay messages
*/
#define ASNT_EAP_PAYLOAD 62
#define ASNL_EAP_PAYLOAD ASNL_VARIABLE
typedef asnv_octets_t asnv_eap_payload_t;
extern asnt_desc_t asnt_eap_payload;


/*
    Type Name :  AvailableInClient
    Type: 89
    Length in octets: 4
    Value: 4 Octet String interpreted as a bit map with the following values:
4 Octet String interpreted as a bit map with the following values:
0x00000000 = Reserved
0x00000001 = Volume metering supported
0x00000002 = Duration metering supported
0x00000004 = Resource metering supported
0x00000008 = Pools supported
0x00000010 = Rating groups supported
0x00000020 = Multi-Services supported
0x00000040 = Tariff Switch supported
    Description: AvailableInClient TLV indicates the metering capabilities of the ASN and SHALL be bitmap encoded.
    Parent TLV(s): PPAC
*/
#define ASNT_AVAILABLEINCLIENT 89
#define ASNL_AVAILABLEINCLIENT 4
typedef asnv_uint32_t asnv_availableinclient_t;
extern asnt_desc_t asnt_availableinclient;


/*
    Type Name :  PPAC
    Type: 65
    Length in octets: Variable
    Value: Compound
    Description: The PrepaidAccountingCapability (PPAC) TLV is sent by a prepaid capable ASN entity and is used to describe the prepaid capabilities of the ASN.
    Elements (Sub-TLVs): TLV Name
M/O Flag
    AvailableInClient: M
    Message Primitives that use this TLV: Relocation_Complete_Rsp, Anchor_DPF_HO_Trigger, Anchor_DPF_HO_Req
*/
#define ASNT_PPAC 65
#define ASNL_PPAC ASNL_VARIABLE
typedef struct _asnv_ppac_t {
    asnv_header_t h;
    asnv_availableinclient_t availableinclient;
} asnv_ppac_t;
extern asnt_desc_t asnt_ppac;


/*
    Type Name :  FA-HA Key
    Type: 66
    Length in octets: 20 
    Value: 160-bit unsigned integer.
    Description: Using FA-HA key to calculate and authenticate FA-HA-AE, integrity can be protected between HA and FA.
    Parent TLV(s): MIP4 Security Info
*/
#define ASNT_FA_HA_KEY 66
#define ASNL_FA_HA_KEY 20
typedef asnv_octets_t asnv_fa_ha_key_t;
extern asnt_desc_t asnt_fa_ha_key;


/*
    Type Name :  FA-HA Key Lifetime
    Type: 67
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Time of FA-HA key remaining valid.
    Message Primitives That Use This TLV: MIP4 Security Info
*/
#define ASNT_FA_HA_KEY_LIFETIME 67
#define ASNL_FA_HA_KEY_LIFETIME 4
typedef asnv_uint32_t asnv_fa_ha_key_lifetime_t;
extern asnt_desc_t asnt_fa_ha_key_lifetime;


/*
    Type Name :  FA-HA Key SPI
    Type: 68
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Key ID of FA-HA key. It should be equal to the SPI (Key ID) of HA-RK.
    Message Primitives That Use This TLV: MIP4 Security Info 
*/
#define ASNT_FA_HA_KEY_SPI 68
#define ASNL_FA_HA_KEY_SPI 4
typedef asnv_uint32_t asnv_fa_ha_key_spi_t;
extern asnt_desc_t asnt_fa_ha_key_spi;


/*
    Type Name :  FA Relocation Indication
    Type: 71
    Length in octets: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = Success
0x01 = Failure
    Description: Indicates the FA relocation process. It shall be set to indicate “Success” if FA relocation has been Successfully completed with authenticator relocation. otherwise it should indicate “Failure”.
    Parent TLV(s): MS Info
*/
#define ASNT_FA_RELOCATION_INDICATION 71
#define ASNL_FA_RELOCATION_INDICATION 1
typedef asnv_uint8_t asnv_fa_relocation_indication_t;
extern asnt_desc_t asnt_fa_relocation_indication;


/*
    Type Name :  Full DCD Setting
    Type: 72
    Length in octets: Variable
    Value: Compound, as specified in [802.16e-2005], section 11.1.7.
    Description: This is an IEEE802.16e-2005 defined TLV. The DCD_settings is a TLV value that encapsulates a DCD message (excluding the generic MAC header and CRC) that may be transmitted in the advertised BS downlink channel. This information is intended to enable fast synchronization of the MS with the advertised BS downlink.
    Parent TLV(s): RRM BS Info
*/
#define ASNT_FULL_DCD_SETTING 72
#define ASNL_FULL_DCD_SETTING ASNL_VARIABLE
typedef asnv_octets_t asnv_full_dcd_setting_t;
extern asnt_desc_t asnt_full_dcd_setting;


/*
    Type Name :  Full UCD Setting
    Type: 73
    Length in octets: Variable
    Value: Compound, as specified in [802.16e-2005], section 11.1.7.
    Description: This is an IEEE802.16e-2005 defined TLV. The UCD_settings is a TLV value that encapsulates a UCD message (excluding the generic MAC header and CRC) that may be transmitted in the advertised BS downlink channel. This information is intended to enable fast synchronization of the MS with the advertised BS downlink.
    Parent TLV(s): RRM BS Info
*/
#define ASNT_FULL_UCD_SETTING 73
#define ASNL_FULL_UCD_SETTING ASNL_VARIABLE
typedef asnv_octets_t asnv_full_ucd_setting_t;
extern asnt_desc_t asnt_full_ucd_setting;


/*
    Type Name :  HO Confirm Type
    Type: 76
    Length in octets: 1
    Value: Enumerator. The values are:Enumerator: 
Enumerator. The values are:Enumerator: 
0x00 = Confirm
0x01 = Unconfirm
0x02 = Cancel
0x03 = Reject
    Description: Indicates whether one of the candidate BSs is selected as the HO target or not. 
    Message Primitives That use this TLV: HO_Cnf
*/
#define ASNT_HO_CONFIRM_TYPE 76
#define ASNL_HO_CONFIRM_TYPE 1
typedef asnv_uint8_t asnv_ho_confirm_type_t;
extern asnt_desc_t asnt_ho_confirm_type;


/*
    Type Name :  HO Type
    Type: 79
    Length in octets: 4
    Value: Enumerator. The values are:
0x00000000 = Hard Handoff (HHO)
0x00000001 = Fast Base Station Switching (FBSS)
0x00000002 = Macro Diversity Handoff (MDHO)
    Description: Allows communication of various handover types.
    Message Primitives That Use This TLV: HO Control messages
*/
#define ASNT_HO_TYPE 79
#define ASNL_HO_TYPE 4
typedef asnv_uint32_t asnv_ho_type_t;
extern asnt_desc_t asnt_ho_type;


/*
    Type Name :  IDLE Mode Retain Info
    Type: 81
    Length in octets: 1
    Value: 

    Description: Indicates which re-entry management messages SHALL be retained and managed. Encoded as in 802.16e.
    Parent TLV(s): Paging Information
*/
#define ASNT_IDLE_MODE_RETAIN_INFO 81
#define ASNL_IDLE_MODE_RETAIN_INFO 1
typedef asnv_uint8_t asnv_idle_mode_retain_info_t;
extern asnt_desc_t asnt_idle_mode_retain_info;


/*
    Type Name :  Key Change Indicator
    Type: 86
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Success
0x01 = Failure
    Description: The value of this parameter indicates to ASN GW/Authenticator the results of PKMv2 3-way handshake process. Note, that BS indicates “Success” results when it ensures that MS had received PKMv2 SA-TEK-Response message and successfully enforced the new PMK/ AK contexts.
    Parent TLV(s): MS Info
*/
#define ASNT_KEY_CHANGE_INDICATOR 86
#define ASNL_KEY_CHANGE_INDICATOR 1
typedef asnv_uint8_t asnv_key_change_indicator_t;
extern asnt_desc_t asnt_key_change_indicator;


/*
    Type Name :  L-BSID
    Type: 87
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets).
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique BS Identifier, referring to a single sector with a single frequency assignment.
    Message Primitives That Use This TLV: R4_Paging_Announce
*/
#define ASNT_L_BSID 87
#define ASNL_L_BSID ASNL_VARIABLE
typedef asnv_octets_t asnv_l_bsid_t;
extern asnt_desc_t asnt_l_bsid;


/*
    Type Name :  Location Update Status
    Type: 88
    Length in octets: 1
    Value: Enumerator. Supported values in this release:
0x00 = Accept
All other values are Reserved.
    Description: Indicates successful location update result.
    Parent TLV(s): Paging Information
*/
#define ASNT_LOCATION_UPDATE_STATUS 88
#define ASNL_LOCATION_UPDATE_STATUS 1
typedef asnv_uint8_t asnv_location_update_status_t;
extern asnt_desc_t asnt_location_update_status;


/*
    Type Name :  LU Result Indicator
    Type: 90
    Length in octets: 1 
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = Success
0x01 = Failure
    Description: Boolean that indicates the result of the LU operation.
    Message Primitives That Use This TLV: PC_Relocation_Ind
*/
#define ASNT_LU_RESULT_INDICATOR 90
#define ASNL_LU_RESULT_INDICATOR 1
typedef asnv_uint8_t asnv_lu_result_indicator_t;
extern asnt_desc_t asnt_lu_result_indicator;


/*
    Type Name :  RRP
    Type: 97
    Length in octets: variable
    Value: Same as defined in 2 including IP/UDP headers.
    Description: MIP Register Response message defined in 2.
    Message Primitives That Use This TLV: FA_Register_Rsp
*/
#define ASNT_RRP 97
#define ASNL_RRP ASNL_VARIABLE
typedef asnv_octets_t asnv_rrp_t;
extern asnt_desc_t asnt_rrp;


/*
    Type Name :  MN-FA Key
    Type: 98
    Length in octets: 20 
    Value: 160-bit unsigned integer. 
    Description: Using MN-FA key to calculate and authenticate MN-FA-AE, integrity can be protected between MN and FA.
    Parent TLV(s): MIP4 Security Info
*/
#define ASNT_MN_FA_KEY 98
#define ASNL_MN_FA_KEY 20
typedef asnv_octets_t asnv_mn_fa_key_t;
extern asnt_desc_t asnt_mn_fa_key;


/*
    Type Name :  MN-FA SPI
    Type: 99
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Key ID of MN-FA key.
    Parent TLV(s): MIP4 Security Info 
*/
#define ASNT_MN_FA_SPI 99
#define ASNL_MN_FA_SPI 4
typedef asnv_uint32_t asnv_mn_fa_spi_t;
extern asnt_desc_t asnt_mn_fa_spi;


/*
    Type Name :  MS NAI
    Type: 105
    Length in octets: Variable up to 256 octets
    Value: ASCII String.
    Description: MS Network Access Identifier character string.
    Parent TLV(s): MS Security History, MIP4 Security Info, Context_Req, MS Authorization Context
*/
#define ASNT_MS_NAI 105
#define ASNL_MS_NAI ASNL_VARIABLE
typedef asnv_octets_t asnv_ms_nai_t;
extern asnt_desc_t asnt_ms_nai;


/*
    Type Name :  R3 Accounting Capabilities
    Type: 208
    Length: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = No accounting.  Only valid at the HA
0x01 = IP-Session-based accounting.  Default value for the ASN
0x02 = Flow-based accounting
    Description: Accounting Capabilities.
    Parent TLV: R3 Wimax Capability
*/
#define ASNT_R3_ACCOUNTING_CAPABILITIES 208
#define ASNL_R3_ACCOUNTING_CAPABILITIES 1
typedef asnv_uint8_t asnv_r3_accounting_capabilities_t;
extern asnt_desc_t asnt_r3_accounting_capabilities;


/*
    Type Name :  R3 Idle Notification Capabilities
    Type: 209
    Length: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = Idle Mode notification is not supported or is not required
0x01 = Idle Mode notification is supported and is required
    Description: Idle notification Capabilities.
    Parent TLV: R3 Wimax Capability
*/
#define ASNT_R3_IDLE_NOTIFICATION_CAPABILITIES 209
#define ASNL_R3_IDLE_NOTIFICATION_CAPABILITIES 1
typedef asnv_uint8_t asnv_r3_idle_notification_capabilities_t;
extern asnt_desc_t asnt_r3_idle_notification_capabilities;


/*
    Type Name :  R3 Wimax Capability
    Type: 207
    Length: Variable
    Value: Compound
    Description: 

    Elements: TLV Name
M/O
    R3 Accounting Capabilities: M
    R3 Idle Notification Capabilities: O
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_WIMAX_CAPABILITY 207
#define ASNL_R3_WIMAX_CAPABILITY ASNL_VARIABLE
typedef struct _asnv_r3_wimax_capability_t {
    asnv_header_t h;
    asnv_r3_accounting_capabilities_t r3_accounting_capabilities;
    asnv_r3_idle_notification_capabilities_t r3_idle_notification_capabilities;
} asnv_r3_wimax_capability_t;
extern asnt_desc_t asnt_r3_wimax_capability;


/*
    Type Name :  R3 CUI
    Type: 210
    Length: Variable
    Value: String
    Description: CUI
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_CUI 210
#define ASNL_R3_CUI ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_cui_t;
extern asnt_desc_t asnt_r3_cui;


/*
    Type Name :  R3 Class
    Type: 211
    Length: Variable
    Value: String
    Description: Class
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_CLASS 211
#define ASNL_R3_CLASS ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_class_t;
extern asnt_desc_t asnt_r3_class;


/*
    Type Name :  R3 Framed IP Address
    Type: 212
    Length: 4
    Value: 32-bits unsigned integer.
    Description: Framed-IP-Address.
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_FRAMED_IP_ADDRESS 212
#define ASNL_R3_FRAMED_IP_ADDRESS 4
typedef asnv_uint32_t asnv_r3_framed_ip_address_t;
extern asnt_desc_t asnt_r3_framed_ip_address;


/*
    Type Name :  R3 Framed-IPv6-Prefix
    Type: 213
    Length: Variable
    Value: 0-16 bytes.
    Description: Framed-IPv6-Prefix.
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_FRAMED_IPV6_PREFIX 213
#define ASNL_R3_FRAMED_IPV6_PREFIX ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_framed_ipv6_prefix_t;
extern asnt_desc_t asnt_r3_framed_ipv6_prefix;


/*
    Type Name :  R3 Framed-Interface-Id
    Type: 364
    Length: Variable
    Value: 8 bytes
    Description: R3 Framed-Interface-Id.
    Parent TLV: MS Authorization Context
*/
#define ASNT_R3_FRAMED_INTERFACE_ID 364
#define ASNL_R3_FRAMED_INTERFACE_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_framed_interface_id_t;
extern asnt_desc_t asnt_r3_framed_interface_id;


/*
    Type Name :  R3 Visited-Framed-IP-Address
    Type: 362
    Length: 4
    Value: 32-bit unsigned integer
    Description: R3 Visited Framed-IP-Address.
    Parent TLV: MS Authorization Context
*/
#define ASNT_R3_VISITED_FRAMED_IP_ADDRESS 362
#define ASNL_R3_VISITED_FRAMED_IP_ADDRESS 4
typedef asnv_uint32_t asnv_r3_visited_framed_ip_address_t;
extern asnt_desc_t asnt_r3_visited_framed_ip_address;


/*
    Type Name :  R3 Visited-Framed-IPv6-Prefix
    Type: 363
    Length: Variable
    Value: 0-128 bits
    Description: R3 Visited Framed-IPv6-Prefix.
    Parent TLV: MS Authorization Context
*/
#define ASNT_R3_VISITED_FRAMED_IPV6_PREFIX 363
#define ASNL_R3_VISITED_FRAMED_IPV6_PREFIX ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_visited_framed_ipv6_prefix_t;
extern asnt_desc_t asnt_r3_visited_framed_ipv6_prefix;


/*
    Type Name :  R3 Visited-Framed-Interface-Id
    Type: 365
    Length: Variable
    Value: 8 bytes
    Description: R3 Visited-Framed-Interface-Id.
    Parent TLV: MS Authorization Context
*/
#define ASNT_R3_VISITED_FRAMED_INTERFACE_ID 365
#define ASNL_R3_VISITED_FRAMED_INTERFACE_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_visited_framed_interface_id_t;
extern asnt_desc_t asnt_r3_visited_framed_interface_id;


/*
    Type Name :  R3 WiMAX Session ID
    Type: 214
    Length: Variable
    Value: String
    Description: WiMAX Session ID.
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_WIMAX_SESSION_ID 214
#define ASNL_R3_WIMAX_SESSION_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_wimax_session_id_t;
extern asnt_desc_t asnt_r3_wimax_session_id;


/*
    Type Name :  R3 Packet Data Flow ID
    Type: 216
    Length: 2
    Value: Unsigned Short representing the flow identifier (most significant bit first).  A value of zero(0) is invalid.
    Description: Packet data flow ID.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_PACKET_DATA_FLOW_ID 216
#define ASNL_R3_PACKET_DATA_FLOW_ID 2
typedef asnv_uint16_t asnv_r3_packet_data_flow_id_t;
extern asnt_desc_t asnt_r3_packet_data_flow_id;


/*
    Type Name :  R3 Service Data Flow ID
    Type: 217
    Length: 2
    Value: Unsigned Short representing the Service flow identifier (most significant bit first).  This value is assigned by the home network and is unique per mobile session for the life of the session.  A value of zero(0) is invalid.
    Description: Service data flow ID.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_SERVICE_DATA_FLOW_ID 217
#define ASNL_R3_SERVICE_DATA_FLOW_ID 2
typedef asnv_uint16_t asnv_r3_service_data_flow_id_t;
extern asnt_desc_t asnt_r3_service_data_flow_id;


/*
    Type Name :  R3 Service Profile ID
    Type: 218
    Length: 4
    Value: Unsigned Integer representing the identity of a Flow Spec that is pre-provisioned (most significant bit first).  A value of zero(0) is invalid.
    Description: Service Profile ID.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_SERVICE_PROFILE_ID 218
#define ASNL_R3_SERVICE_PROFILE_ID 4
typedef asnv_uint32_t asnv_r3_service_profile_id_t;
extern asnt_desc_t asnt_r3_service_profile_id;


/*
    Type Name :  R3 Direction
    Type: 219
    Length: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x00 = Reserved
0x01 = Uplink
0x02 = Downlink
0x03 = Bi-directional
    Description: Direction.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_DIRECTION 219
#define ASNL_R3_DIRECTION 1
typedef asnv_uint8_t asnv_r3_direction_t;
extern asnt_desc_t asnt_r3_direction;


/*
    Type Name :  R3 Activation Trigger
    Type: 220
    Length: 1
    Value: 0x00 = Reserved
0x00 = Reserved
0x01 = Provisioned (SHALL be set in case of ISF)
0x02 = Admit (SHALL be set in case of ISF)
0x04 = Activate (SHALL be set in case of ISF)
0x08 = Dynamically Changeable (not valid for ISF)
    Description: Activation Trigger.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_ACTIVATION_TRIGGER 220
#define ASNL_R3_ACTIVATION_TRIGGER 1
typedef asnv_uint8_t asnv_r3_activation_trigger_t;
extern asnt_desc_t asnt_r3_activation_trigger;


/*
    Type Name :  R3 Transport Type
    Type: 221
    Length: 1
    Value: All other values are Reserved.
All other values are Reserved.
0x00 = Reserved
0x01 = IPv4-CS
0x02 = IPv6-CS
0x03 = Ethernet
    Description: Transport Type.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_TRANSPORT_TYPE 221
#define ASNL_R3_TRANSPORT_TYPE 1
typedef asnv_uint8_t asnv_r3_transport_type_t;
extern asnt_desc_t asnt_r3_transport_type;


/*
    Type Name :  R3 Uplink QoS ID
    Type: 222
    Length: 1
    Value: Unsigned Integer (most significant bit first) containing the ID of the QoS descriptor.
    Description: Uplink Qos ID.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_UPLINK_QOS_ID 222
#define ASNL_R3_UPLINK_QOS_ID 1
typedef asnv_uint8_t asnv_r3_uplink_qos_id_t;
extern asnt_desc_t asnt_r3_uplink_qos_id;


/*
    Type Name :  R3 Downlink QoS ID
    Type: 223
    Length: 1
    Value: Unsigned Integer (most significant bit first) containing the ID of the QoS descriptor.
    Description: Downlink Qos ID.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_DOWNLINK_QOS_ID 223
#define ASNL_R3_DOWNLINK_QOS_ID 1
typedef asnv_uint8_t asnv_r3_downlink_qos_id_t;
extern asnt_desc_t asnt_r3_downlink_qos_id;


/*
    Type Name :  R3 Uplink Classifier
    Type: 224
    Length: Variable
    Value: String containing an IP-Filter Rule as pre RFC3588.  Action is set to ”permit”.
    Description: Uplink Classifier.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_UPLINK_CLASSIFIER 224
#define ASNL_R3_UPLINK_CLASSIFIER ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_uplink_classifier_t;
extern asnt_desc_t asnt_r3_uplink_classifier;


/*
    Type Name :  R3 Downlink Classifier
    Type: 225
    Length: Variable
    Value: String containing an IP-Filter Rule as pre RFC3588.  Action is set to ”permit”.
    Description: Downlink Classifier.
    Parent TLV: R3 Packet-Flow Descriptor
*/
#define ASNT_R3_DOWNLINK_CLASSIFIER 225
#define ASNL_R3_DOWNLINK_CLASSIFIER ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_downlink_classifier_t;
extern asnt_desc_t asnt_r3_downlink_classifier;


/*
    Type Name :  R3 Packet Flow Descriptor
    Type: 215
    Length: Variable
    Value: Compound
    Description: 

    Elements: TLV Name
M/O
    SFID: M
    R3 Packet Data Flow ID: M
    R3 Service Data Flow ID: O
    R3 Service Profile ID: O
    R3 Direction: O
    R3 Activation Trigger: O
    R3 Transport Type: O
    R3 Uplink Qos ID: O
    R3 Downlink Qos ID: O
    R3 Uplink Classifier: O
    R3 Downlink Classifier: O
    R3 Paging Preference: O
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_PACKET_FLOW_DESCRIPTOR 215
#define ASNL_R3_PACKET_FLOW_DESCRIPTOR ASNL_VARIABLE
typedef struct _asnv_r3_packet_flow_descriptor_t {
    asnv_header_t h;
    asnv_sfid_t sfid;
    asnv_r3_packet_data_flow_id_t r3_packet_data_flow_id;
    asnv_r3_service_data_flow_id_t r3_service_data_flow_id;
    asnv_r3_service_profile_id_t r3_service_profile_id;
    asnv_r3_direction_t r3_direction;
    asnv_r3_activation_trigger_t r3_activation_trigger;
    asnv_r3_transport_type_t r3_transport_type;
    asnv_r3_uplink_qos_id_t r3_uplink_qos_id;
    asnv_r3_downlink_qos_id_t r3_downlink_qos_id;
    asnv_r3_uplink_classifier_t r3_uplink_classifier;
    asnv_r3_downlink_classifier_t r3_downlink_classifier;
    asnv_paging_preference_t paging_preference;
} asnv_r3_packet_flow_descriptor_t;
extern asnt_desc_t asnt_r3_packet_flow_descriptor;


/*
    Type Name :  R3 QoS ID
    Type: 227
    Length: 1
    Value: Unsigned Octet representing an ID.
    Description: Qos ID.
    Parent TLV: R3 Qos Descriptor
*/
#define ASNT_R3_QOS_ID 227
#define ASNL_R3_QOS_ID 1
typedef asnv_uint8_t asnv_r3_qos_id_t;
extern asnt_desc_t asnt_r3_qos_id;


/*
    Type Name :  R3 Schedule Type
    Type: 230
    Length: 1
    Value: Enumerator. The values are:
Enumerator. The values are:
0x02 = Best Effort
0x03 = nrtPS
0x04 = rtPS
0x05 = Extended rtPS
0x06 = UGS
    Description: Schedule Type.
    Parent TLV: R3 Qos Descriptor
*/
#define ASNT_R3_SCHEDULE_TYPE 230
#define ASNL_R3_SCHEDULE_TYPE 1
typedef asnv_uint8_t asnv_r3_schedule_type_t;
extern asnt_desc_t asnt_r3_schedule_type;


/*
    Type Name :  R3 Maximum Latency
    Type: 236
    Length in octets: 4
    Value: 32-bit integer specifies the maximum latency (in milliseconds). 
    Description: Time period between the reception of a packet by the BS or MS on its network interface and the delivering the packet to the RF Interface of the peer device. If defined, this parameter represents a service commitment (or admission criteria) at the BS or MS and SHALL be guaranteed by the BS or MS. A BS or MS does not have to meet this service commitment for service flows that exceed their minimum reserved rate.
    Parent TLV: R3 QoS Descriptor
R3 QoS Descriptor
*/
#define ASNT_R3_MAXIMUM_LATENCY 236
#define ASNL_R3_MAXIMUM_LATENCY 4
typedef asnv_uint32_t asnv_r3_maximum_latency_t;
extern asnt_desc_t asnt_r3_maximum_latency;


/*
    Type Name :  R3 Media Flow Type
    Type: 238
    Length in octets: 1 
    Value: Enumerator. The values are:
 0x01 = Voice over IP
0x02 = Robust Browser
0x03 = Secure Browser/ VPN
0x04 = Streaming video on demand
0x05 = Streaming live TV
0x06 = Music and Photo Download
0x07 = Multi-player gaming
0x08 = Location-based services
0x09 = Text and Audio Books with Graphics
0x0A = Video Conversation
0x0B = Message
0x0C = Control
0x0D = Data
    Description: Describes the application type, used as a hint in admission decisions, for instance, VoIP, video, PTT, gaming, etc.
    Parent TLV: R3 QoS Descriptor
R3 QoS Descriptor
*/
#define ASNT_R3_MEDIA_FLOW_TYPE 238
#define ASNL_R3_MEDIA_FLOW_TYPE 1
typedef asnv_uint8_t asnv_r3_media_flow_type_t;
extern asnt_desc_t asnt_r3_media_flow_type;


/*
    Type Name :  R3 SDU Size
    Type: 240
    Length in octets: 1
    Value: 8-bit unsigned integer. Default = 49.
    Description: Represents the number of bytes in the fixed size SDU. This parameter may be used for a UGS service flow when the length of IP packets on the data plane is fixed and known in advance (this is typically the case for flows generated by a specific codec).
    Parent TLV: R3 QoS Descriptor
R3 QoS Descriptor
*/
#define ASNT_R3_SDU_SIZE 240
#define ASNL_R3_SDU_SIZE 1
typedef asnv_uint8_t asnv_r3_sdu_size_t;
extern asnt_desc_t asnt_r3_sdu_size;


/*
    Type Name :  R3 Unsolicited Polling Interval
    Type: 241
    Length in octets: 2
    Value: 16-bit unsigned integer representing the polling interval (in milliseconds).
    Description: The value of this parameter specifies the maximal nominal interval between successive polling grants opportunities for this Service Flow.
    Parent TLV: R3 QoS Descriptor
R3 QoS Descriptor
*/
#define ASNT_R3_UNSOLICITED_POLLING_INTERVAL 241
#define ASNL_R3_UNSOLICITED_POLLING_INTERVAL 2
typedef asnv_uint16_t asnv_r3_unsolicited_polling_interval_t;
extern asnt_desc_t asnt_r3_unsolicited_polling_interval;


/*
    Type Name :  R3 Media Flow Description in SDP format
    Type: 356
    Length in octets: Variable
    Value: &lt;SDP string&gt; is encoded as specified in IETF RFC 2327.
    Description: This is a variable length string having SDP information . The &lt;SDP string&gt; is encoded as specified in IETF RFC 2327.
    Parent TLV: R3 QoS descriptor
*/
#define ASNT_R3_MEDIA_FLOW_DESCRIPTION_IN_SDP_FORMAT 356
#define ASNL_R3_MEDIA_FLOW_DESCRIPTION_IN_SDP_FORMAT ASNL_VARIABLE
typedef asnv_octets_t asnv_r3_media_flow_description_in_sdp_format_t;
extern asnt_desc_t asnt_r3_media_flow_description_in_sdp_format;


/*
    Type Name :  R3 QoS Descriptor
    Type: 226
    Length: Variable
    Value: Compound
    Description: 

    Elements: TLV Name
M/O
    R3 QoS ID: M
    Global Service Class Name: O
    Service Class Name: O
    R3 Schedule Type: M
    Traffic Priority: O
    Maximum Sustained Traffic Rate: O
    Minimum Reserved Traffic Rate: O
    Maximum Traffic Burst: O
    Tolerated Jitter: O
    R3 Maximum Latency: O
    Reduced Resources Code: O
    R3 Media Flow Type: O
    Unsolicited Granted Interval: O
    R3 SDU Size: O
    R3 Unsolicited Polling Interval: O
    R3 Media Flow Description in SDP Format: O
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_QOS_DESCRIPTOR 226
#define ASNL_R3_QOS_DESCRIPTOR ASNL_VARIABLE
typedef struct _asnv_r3_qos_descriptor_t {
    asnv_header_t h;
    asnv_r3_qos_id_t r3_qos_id;
    asnv_global_service_class_name_t global_service_class_name;
    asnv_service_class_name_t service_class_name;
    asnv_r3_schedule_type_t r3_schedule_type;
    asnv_traffic_priority_t traffic_priority;
    asnv_maximum_sustained_traffic_rate_t maximum_sustained_traffic_rate;
    asnv_minimum_reserved_traffic_rate_t minimum_reserved_traffic_rate;
    asnv_maximum_traffic_burst_t maximum_traffic_burst;
    asnv_tolerated_jitter_t tolerated_jitter;
    asnv_r3_maximum_latency_t r3_maximum_latency;
    asnv_reduced_resources_code_t reduced_resources_code;
    asnv_r3_media_flow_type_t r3_media_flow_type;
    asnv_unsolicited_grant_interval_t unsolicited_grant_interval;
    asnv_r3_sdu_size_t r3_sdu_size;
    asnv_r3_unsolicited_polling_interval_t r3_unsolicited_polling_interval;
    asnv_r3_media_flow_description_in_sdp_format_t r3_media_flow_description_in_sdp_format;
} asnv_r3_qos_descriptor_t;
extern asnt_desc_t asnt_r3_qos_descriptor;


/*
    Type Name :  R3 Acct Interim Interval
    Type: 242
    Length: 4
    Value: 32-bit unsigned integer
    Description: Acct-Interim-Interval.
    Parent TLV: Ms Authorization Context
*/
#define ASNT_R3_ACCT_INTERIM_INTERVAL 242
#define ASNL_R3_ACCT_INTERIM_INTERVAL 4
typedef asnv_uint32_t asnv_r3_acct_interim_interval_t;
extern asnt_desc_t asnt_r3_acct_interim_interval;


/*
    Type Name :  MS Authorization Context
    Type: 100
    Length in octets: Variable
    Value: Compound
    Description: 

    Elements (Sub-TLVs): TLV Name
M/O
    MS NAI: M
    R3 WiMAX Capability : M
    R3 CUI : O
    R3 Class : O
    R3 Framed IP Address : O
    R3 Framed-IPv6-Prefix: O
    R3 Framed-Interface-Id: O
    R3 Visited-Framed-IP-Address: O
    R3 Visited-Framed-IPv6-Prefix: O
    R3 Visited-Framed-Interface-Id: O
    R3 WiMAX Session ID : M
    R3 Packet Flow Descriptor : M
    R3 QoS Descriptor : O
    R3 Acct Interim Interval: O
    Parent TLV: MS Info
*/
#define ASNT_MS_AUTHORIZATION_CONTEXT 100
#define ASNL_MS_AUTHORIZATION_CONTEXT ASNL_VARIABLE
typedef struct _asnv_ms_authorization_context_t {
    asnv_header_t h;
    asnv_ms_nai_t ms_nai;
    asnv_r3_wimax_capability_t r3_wimax_capability;
    asnv_r3_cui_t r3_cui;
    asnv_r3_class_t r3_class;
    asnv_r3_framed_ip_address_t r3_framed_ip_address;
    asnv_r3_framed_ipv6_prefix_t r3_framed_ipv6_prefix;
    asnv_r3_framed_interface_id_t r3_framed_interface_id;
    asnv_r3_visited_framed_ip_address_t r3_visited_framed_ip_address;
    asnv_r3_visited_framed_ipv6_prefix_t r3_visited_framed_ipv6_prefix;
    asnv_r3_visited_framed_interface_id_t r3_visited_framed_interface_id;
    asnv_r3_wimax_session_id_t r3_wimax_session_id;
    asnv_r3_packet_flow_descriptor_t r3_packet_flow_descriptor;
    asnv_r3_qos_descriptor_t r3_qos_descriptor;
    asnv_r3_acct_interim_interval_t r3_acct_interim_interval;
} asnv_ms_authorization_context_t;
extern asnt_desc_t asnt_ms_authorization_context;


/*
    Type Name :  MSID
    Type: 102
    Length in octets: 6
    Value: 48-bit MS MAC address.
    Description: Unique MS identifier (MS MAC address) (Note 1).
    Parent TLV(s): MS Info, Accounting Bulk Session/Flow
*/
#define ASNT_MSID 102
#define ASNL_MSID 6
typedef asnv_octets_t asnv_msid_t;
extern asnt_desc_t asnt_msid;


/*
    Type Name :  Quota Identifier
    Type: 148
    Length in octets: 4
    Description : Quota Identifier.
    Value: Octet String.  The Quota Identifier value (most significant bit first).
    Parent TLV(s): PPAQ
*/
#define ASNT_QUOTA_IDENTIFIER 148
#define ASNL_QUOTA_IDENTIFIER 4
typedef asnv_octets_t asnv_quota_identifier_t;
extern asnt_desc_t asnt_quota_identifier;


/*
    Type Name :  Volume Quota
    Type: 167
    Length in octets: 4
    Description : Indicates the volume (in octets) allocated for the session or the total used volume (in octets) for both inbound and outbound traffic.  
    Value: The attribute is an unsigned Integer representing a volume measured in kilo-bytes (1024 bytes).
    Parent TLV(s): PPAQ
*/
#define ASNT_VOLUME_QUOTA 167
#define ASNL_VOLUME_QUOTA 4
typedef asnv_octets_t asnv_volume_quota_t;
extern asnt_desc_t asnt_volume_quota;


/*
    Type Name :  Volume Threshold
    Type: 168
    Length in octets: 4
    Description : This TLV is optionally present if Volume Quota is present.  It indicates the volume (in octets) that SHALL be consumed before a new quota should be requested.  This threshold should not be larger than the Volume Quota.
    Value: The attribute is an unsigned Integer representing a volume measured in kilo-bytes (1024 bytes).
    Parent TLV(s): PPAQ
*/
#define ASNT_VOLUME_THRESHOLD 168
#define ASNL_VOLUME_THRESHOLD 4
typedef asnv_octets_t asnv_volume_threshold_t;
extern asnt_desc_t asnt_volume_threshold;


/*
    Type Name :  VolumeUsed
    TLV ID: 357
    Length in octets: 4
    Description: This TLV describes the total used volume (in octets) for both inbound and outbound traffic.
    Value: The attribute is an unsigned Integer representing a volume measured in kilo-bytes (1024 bytes).
The attribute is an unsigned Integer representing a volume measured in kilo-bytes (1024 bytes).
    Parent TLV(s): PPAQ
*/
#define ASNT_VOLUMEUSED 357
#define ASNL_VOLUMEUSED 4
typedef asnv_octets_t asnv_volumeused_t;
extern asnt_desc_t asnt_volumeused;


/*
    Type Name :  Duration Quota
    Type: 275
    Length in octets: 4
    Description : This optional TLV is only present if duration-based charging is used.  It indicates the duration (in seconds) allocated for the session.  It is encoded as an integer.  It may indicate the total duration (in seconds) since the start of the accounting session related to the QuotaID of the PPAQ in which it occurs.
    Value: Unsigned Integer representing seconds.
    Parent TLV(s): PPAQ
*/
#define ASNT_DURATION_QUOTA 275
#define ASNL_DURATION_QUOTA 4
typedef asnv_octets_t asnv_duration_quota_t;
extern asnt_desc_t asnt_duration_quota;


/*
    Type Name :  Duration Threshold
    Type: 276
    Length in octets: 4
    Description : This TLV is optionally present if DurationQuota is present. It indicates the duration (in seconds) that SHALL be consumed before a new quota should be requested.  This threshold should not be larger than the DurationQuota.
    Value: Unsigned Integer representing seconds.
    Parent TLV(s): PPAQ
*/
#define ASNT_DURATION_THRESHOLD 276
#define ASNL_DURATION_THRESHOLD 4
typedef asnv_octets_t asnv_duration_threshold_t;
extern asnt_desc_t asnt_duration_threshold;


/*
    Type Name :  Resource Quota
    Type: 277
    Length in octets: 4
    Description: This optional TLV is only present if resource-based or one-time charging is used.  It indicates the resources allocated for the session.  It may indicate the resources used in total, including both incoming and outgoing chargeable traffic.  In one-time charging scenarios, the subtype represents the number of units to charge or credit the user.
    Value: Unsigned Integer representing a resource measured in units.
    Parent TLV: PPAQ
*/
#define ASNT_RESOURCE_QUOTA 277
#define ASNL_RESOURCE_QUOTA 4
typedef asnv_octets_t asnv_resource_quota_t;
extern asnt_desc_t asnt_resource_quota;


/*
    Type Name :  Resource Threshold
    Type: 278
    Length in octets: 4
    Description: The semantics of this TLV follows those of the Volume Threshold and DurationThreshold.  
    Value: Unsigned Integer representing a resource measured in units.
    Parent TLV: PPAQ
*/
#define ASNT_RESOURCE_THRESHOLD 278
#define ASNL_RESOURCE_THRESHOLD 4
typedef asnv_octets_t asnv_resource_threshold_t;
extern asnt_desc_t asnt_resource_threshold;


/*
    Type Name :  Update Reason
    Type: 279
    Length in octets: 1
    Description: This TLV SHALL be present in the quota update messages.  It indicates the reason for initiating the on-line quota update operation.  Update reasons 6, 7, 8 and 9 indicate that the associated resources are released at the client side.
    Value: Enumerator. The values are: 0x01 = Pre-initialization
Enumerator. The values are: 0x01 = Pre-initialization
0x02 = Initial-Request
0x03 = Threshold Reached
0x04 = Quota Reached
0x05 = TITSU Approaching
0x06 = Remote Forced Disconnect
0x07 = Client Service Termination
0x08 = “Access Service” Terminated
0x09 = Service not established
0x0A = One-time Charging
    Parent TLV: PPAQ
*/
#define ASNT_UPDATE_REASON 279
#define ASNL_UPDATE_REASON 1
typedef asnv_octets_t asnv_update_reason_t;
extern asnt_desc_t asnt_update_reason;


/*
    Type Name :  Service-ID
    Type: 280
    Length in octets: Variable
    Description: This value is handled as an opaque string that uniquely describes the service instance to which prepaid metering should be applied.
    Value: The value field of this TLV is encoded as a string.
    Parent TLV: PPAQ
*/
#define ASNT_SERVICE_ID 280
#define ASNL_SERVICE_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_service_id_t;
extern asnt_desc_t asnt_service_id;


/*
    Type Name :  Rating-Group-ID
    Type: 281
    Length in octets: 4
    Description: This TLV indicates that this PPAQ is associated with resources allocated to a Rating Group with the corresponding ID.  This AVP is encoded as a string. A PPAQ SHALL NOT contain more than one Rating-Group-ID.
    Value: Unsigned Integer representing the value of the Rating Group ID.
    Parent TLV: PPAQ
*/
#define ASNT_RATING_GROUP_ID 281
#define ASNL_RATING_GROUP_ID 4
typedef asnv_octets_t asnv_rating_group_id_t;
extern asnt_desc_t asnt_rating_group_id;


/*
    Type Name :  Termination Action
    Type: 282
    Length in octets: 1
    Description: This TLV describes action to take when the PPS does not grant additional quota.
    Value: Enumerator. The values are:
0x00x01 = Terminate
0x02 = Request more quota
0x03 = Redirect/Filter
    Parent TLV: PPAQ
*/
#define ASNT_TERMINATION_ACTION 282
#define ASNL_TERMINATION_ACTION 1
typedef asnv_octets_t asnv_termination_action_t;
extern asnt_desc_t asnt_termination_action;


/*
    Type Name :  Pool-ID
    Type: 283
    Length in octets: 4
    Description: This TLV identifies the resource pool that the quota included in this PPAQ is associated with.
    Value: Unsigned Integer representing a Pool-ID.
    Parent TLV: PPAQ
*/
#define ASNT_POOL_ID 283
#define ASNL_POOL_ID 4
typedef asnv_octets_t asnv_pool_id_t;
extern asnt_desc_t asnt_pool_id;


/*
    Type Name :  Pool-Multiplier
    Type: 284
    Length in octets: 4
    Description: The pool-multiplier determines the weight that resources are inserted into the pool that is identified by the accompanying Pool-ID, and the rate at which resources are taken out of the pool by the relevant Service or Rating-Group.
    Value: 32-bit unsigned integer.
    Parent TLV: PPAQ
*/
#define ASNT_POOL_MULTIPLIER 284
#define ASNL_POOL_MULTIPLIER 4
typedef asnv_octets_t asnv_pool_multiplier_t;
extern asnt_desc_t asnt_pool_multiplier;


/*
    Type Name :  Prepaid Server
    Type: 285
    Length in octets: 4 (IPv4) or 16 (IPv6)
    Description: indicates the address (IPv4 or IPv6) of the serving PPS. Multiple instances of this subtype MAY be present in a single PPAQ.
    Value: The attribute consists of a unsigned integer.
    Parent TLV: PPAQ
*/
#define ASNT_PREPAID_SERVER 285
#define ASNL_PREPAID_SERVER 4
typedef asnv_octets_t asnv_prepaid_server_t;
extern asnt_desc_t asnt_prepaid_server;


/*
    Type Name :  PPAQ
    Type: 131
    Length in octets: Variable
    Value: Compound
    Description: Used for One-Time charging, report usage, the request for further quota and quota delivery.  It is also used in order to request prepaid quota for a new service instance or to allocate the (initial and subsequent) quotas.
    Elements (Sub-TLVs): TLV Name
M/O
    Quota Identifier: M
    Volume Quota: O
    Volume Threshold: O
    VolumeUsed: O
    DurationQuota: O
    DurationThershold: O
    ResourceQuota: O
    ResourceThreshold: O
    Update-Reason: O
    Service-ID: O
    Rating-Group-ID: O
    Termination-Action: O
    Pool-ID: O
    Pool-Multiplier: O
    Prepaid Server: O
    SF ID (one or more):     Parent TLV: MS Info
*/
#define ASNT_PPAQ 131
#define ASNL_PPAQ ASNL_VARIABLE
typedef struct _asnv_ppaq_t {
    asnv_header_t h;
    asnv_quota_identifier_t quota_identifier;
    asnv_volume_quota_t volume_quota;
    asnv_volume_threshold_t volume_threshold;
    asnv_volumeused_t volumeused;
    asnv_duration_quota_t duration_quota;
    asnv_duration_threshold_t duration_threshold;
    asnv_resource_quota_t resource_quota;
    asnv_resource_threshold_t resource_threshold;
    asnv_update_reason_t update_reason;
    asnv_service_id_t service_id;
    asnv_rating_group_id_t rating_group_id;
    asnv_termination_action_t termination_action;
    asnv_pool_id_t pool_id;
    asnv_pool_multiplier_t pool_multiplier;
    asnv_prepaid_server_t prepaid_server;
    asnv_r3_service_data_flow_id_t r3_service_data_flow_id;
} asnv_ppaq_t;
extern asnt_desc_t asnt_ppaq;


/*
    Type Name :  Service Authorization Code
    Type: 181
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Service authorized
0x01 = Service not authorized
    Description: Code indicating whether or not service is authorized.
    Parent TLV: MS Info
*/
#define ASNT_SERVICE_AUTHORIZATION_CODE 181
#define ASNL_SERVICE_AUTHORIZATION_CODE 1
typedef asnv_uint8_t asnv_service_authorization_code_t;
extern asnt_desc_t asnt_service_authorization_code;


/*
    Type Name :  Number of UL Transport CIDs Support
    Type: 288
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: The number of uplink Transport CIDs supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_NUMBER_OF_UL_TRANSPORT_CIDS_SUPPORT 288
#define ASNL_NUMBER_OF_UL_TRANSPORT_CIDS_SUPPORT 2
typedef asnv_uint16_t asnv_number_of_ul_transport_cids_support_t;
extern asnt_desc_t asnt_number_of_ul_transport_cids_support;


/*
    Type Name :  Number of DL Transport CIDs Support
    Type: 289
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: The number of downlink Transport CIDs supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_NUMBER_OF_DL_TRANSPORT_CIDS_SUPPORT 289
#define ASNL_NUMBER_OF_DL_TRANSPORT_CIDS_SUPPORT 2
typedef asnv_uint16_t asnv_number_of_dl_transport_cids_support_t;
extern asnt_desc_t asnt_number_of_dl_transport_cids_support;


/*
    Type Name :  Classification/PHS Options and SDU Encapsulation Support
    Type: 290
    Length in octets: 2 or 4
    Value: 16 or 32-bit bitmask, as specified in the IEEE802.16e.
    Description: This TLV contains information of Classification/PHS options and SDU encapsulation which are supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_CLASSIFICATION_PHS_OPTIONS_AND_SDU_ENCAPSULATION_SUPPORT 290
#define ASNL_CLASSIFICATION_PHS_OPTIONS_AND_SDU_ENCAPSULATION_SUPPORT 4
typedef asnv_uint32_t asnv_classification_phs_options_and_sdu_encapsulation_support_t;
extern asnt_desc_t asnt_classification_phs_options_and_sdu_encapsulation_support;


/*
    Type Name :  Maximum Number of Classifier
    Type: 291
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: Maximum number of simultaneously admitted classification rules supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MAXIMUM_NUMBER_OF_CLASSIFIER 291
#define ASNL_MAXIMUM_NUMBER_OF_CLASSIFIER 2
typedef asnv_uint16_t asnv_maximum_number_of_classifier_t;
extern asnt_desc_t asnt_maximum_number_of_classifier;


/*
    Type Name :  PHS Support
    Type: 292
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This TLV indicates which type of PHS is supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_PHS_SUPPORT 292
#define ASNL_PHS_SUPPORT 1
typedef asnv_uint8_t asnv_phs_support_t;
extern asnt_desc_t asnt_phs_support;


/*
    Type Name :  ARQ Support
    Type: 293
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This TLV indicates if ARQ is supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_ARQ_SUPPORT 293
#define ASNL_ARQ_SUPPORT 1
typedef asnv_uint8_t asnv_arq_support_t;
extern asnt_desc_t asnt_arq_support;


/*
    Type Name :  DSx Flow Control
    Type: 294
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This TLV indicates how many concurrent transactions of DSx messages are supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_DSX_FLOW_CONTROL 294
#define ASNL_DSX_FLOW_CONTROL 1
typedef asnv_uint8_t asnv_dsx_flow_control_t;
extern asnt_desc_t asnt_dsx_flow_control;


/*
    Type Name :  Total Number of Provisioned Service Flows
    Type: 295
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Total number of pre-provisioned service flows supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_TOTAL_NUMBER_OF_PROVISIONED_SERVICE_FLOWS 295
#define ASNL_TOTAL_NUMBER_OF_PROVISIONED_SERVICE_FLOWS 1
typedef asnv_uint8_t asnv_total_number_of_provisioned_service_flows_t;
extern asnt_desc_t asnt_total_number_of_provisioned_service_flows;


/*
    Type Name :  Maximum amount of MAC Level Data per DL Frame
    Type: 297
    Length in octets: 2
    Value: 16-bit unsigned integer. A value of 0x0000 means unlimited.
    Description: Maximum amount of downlink MAC data per air frame supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): Maximum MAC Data per Frame Support
*/
#define ASNT_MAXIMUM_AMOUNT_OF_MAC_LEVEL_DATA_PER_DL_FRAME 297
#define ASNL_MAXIMUM_AMOUNT_OF_MAC_LEVEL_DATA_PER_DL_FRAME 2
typedef asnv_uint16_t asnv_maximum_amount_of_mac_level_data_per_dl_frame_t;
extern asnt_desc_t asnt_maximum_amount_of_mac_level_data_per_dl_frame;


/*
    Type Name :  Maximum amount of MAC Level Data per UL Frame
    Type: 298
    Length in octets: 2
    Value: 16-bit unsigned integer. A value of 0x0000 means unlimited.
    Description: Maximum amount of uplink MAC data per air frame supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): Maximum MAC Data per Frame Support
*/
#define ASNT_MAXIMUM_AMOUNT_OF_MAC_LEVEL_DATA_PER_UL_FRAME 298
#define ASNL_MAXIMUM_AMOUNT_OF_MAC_LEVEL_DATA_PER_UL_FRAME 2
typedef asnv_uint16_t asnv_maximum_amount_of_mac_level_data_per_ul_frame_t;
extern asnt_desc_t asnt_maximum_amount_of_mac_level_data_per_ul_frame;


/*
    Type Name :  Maximum MAC Data per Frame Support
    Type: 296
    Length: Variable
    Value: Compound TLV
    Description: Maximum amount of MAC data per air frame supported by BS and MS, as defined in IEEE802.16e.
    Elements: TLV Name
M/O
    Maximum amount of MAC Level Data per DL Frame: M
    Maximum amount of MAC Level Data per UL Frame: M
    Parent TLV: REG Context
*/
#define ASNT_MAXIMUM_MAC_DATA_PER_FRAME_SUPPORT 296
#define ASNL_MAXIMUM_MAC_DATA_PER_FRAME_SUPPORT ASNL_VARIABLE
typedef struct _asnv_maximum_mac_data_per_frame_support_t {
    asnv_header_t h;
    asnv_maximum_amount_of_mac_level_data_per_dl_frame_t maximum_amount_of_mac_level_data_per_dl_frame;
    asnv_maximum_amount_of_mac_level_data_per_ul_frame_t maximum_amount_of_mac_level_data_per_ul_frame;
} asnv_maximum_mac_data_per_frame_support_t;
extern asnt_desc_t asnt_maximum_mac_data_per_frame_support;


/*
    Type Name :  Packing Support
    Type: 299
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This TLV indicates if packing of fragments is supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_PACKING_SUPPORT 299
#define ASNL_PACKING_SUPPORT 1
typedef asnv_uint8_t asnv_packing_support_t;
extern asnt_desc_t asnt_packing_support;


/*
    Type Name :  MAC ertPS Support
    Type: 300
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This TLV indicates if ertPS scheduling type in the MAC layer is supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MAC_ERTPS_SUPPORT 300
#define ASNL_MAC_ERTPS_SUPPORT 1
typedef asnv_uint8_t asnv_mac_ertps_support_t;
extern asnt_desc_t asnt_mac_ertps_support;


/*
    Type Name :  Maximum Number of Bursts Transmitted Concurrently to the MS
    Type: 301
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Maximum number of bursts transmitted concurrently to the MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MAXIMUM_NUMBER_OF_BURSTS_TRANSMITTED_CONCURRENTLY_TO_THE_MS 301
#define ASNL_MAXIMUM_NUMBER_OF_BURSTS_TRANSMITTED_CONCURRENTLY_TO_THE_MS 1
typedef asnv_uint8_t asnv_maximum_number_of_bursts_transmitted_concurrently_to_the_ms_t;
extern asnt_desc_t asnt_maximum_number_of_bursts_transmitted_concurrently_to_the_ms;


/*
    Type Name :  HO Supported
    Type: 302
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This TLV indicates which type of hadnovers is supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_HO_SUPPORTED 302
#define ASNL_HO_SUPPORTED 1
typedef asnv_uint8_t asnv_ho_supported_t;
extern asnt_desc_t asnt_ho_supported;


/*
    Type Name :  HO Process Optimization MS Timer
    Type: 303
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The duration in frames the MS shall wait until receipt of the next unsolicited network reentry MAC management message, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_HO_PROCESS_OPTIMIZATION_MS_TIMER 303
#define ASNL_HO_PROCESS_OPTIMIZATION_MS_TIMER 1
typedef asnv_uint8_t asnv_ho_process_optimization_ms_timer_t;
extern asnt_desc_t asnt_ho_process_optimization_ms_timer;


/*
    Type Name :  Mobility Features Supported
    Type: 304
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This TLV indicates if handover, sleep mode, and idle mode are supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MOBILITY_FEATURES_SUPPORTED 304
#define ASNL_MOBILITY_FEATURES_SUPPORTED 1
typedef asnv_uint8_t asnv_mobility_features_supported_t;
extern asnt_desc_t asnt_mobility_features_supported;


/*
    Type Name :  Sleep Mode Recovery Time
    Type: 305
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Number of frames required for the MS to switchfrom sleep mode to awake mode, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_SLEEP_MODE_RECOVERY_TIME 305
#define ASNL_SLEEP_MODE_RECOVERY_TIME 1
typedef asnv_uint8_t asnv_sleep_mode_recovery_time_t;
extern asnt_desc_t asnt_sleep_mode_recovery_time;


/*
    Type Name :  Idle Mode Timeout
    Type: 268
    Length in octets: 2 (as specified in 802.16e)
    Value: 16-bit unsigned integer.
    Description: Maximum time interval between MS idle mode location updates in seconds, as defined in the IEEE802.16e.
    Parent TLV(s): Paging Information, REG Context
*/
#define ASNT_IDLE_MODE_TIMEOUT 268
#define ASNL_IDLE_MODE_TIMEOUT 2
typedef asnv_uint16_t asnv_idle_mode_timeout_t;
extern asnt_desc_t asnt_idle_mode_timeout;


/*
    Type Name :  ARQ Ack Type
    Type: 307
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This TLV indicates which types of ARQ Ack types are supported by BS and MS, as defined in IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_ARQ_ACK_TYPE 307
#define ASNL_ARQ_ACK_TYPE 1
typedef asnv_uint8_t asnv_arq_ack_type_t;
extern asnt_desc_t asnt_arq_ack_type;


/*
    Type Name :  MS HO Connections Parameters Proc Time
    Type: 308
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Time in ms the MS needs to process information on connections during HO, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MS_HO_CONNECTIONS_PARAMETERS_PROC_TIME 308
#define ASNL_MS_HO_CONNECTIONS_PARAMETERS_PROC_TIME 1
typedef asnv_uint8_t asnv_ms_ho_connections_parameters_proc_time_t;
extern asnt_desc_t asnt_ms_ho_connections_parameters_proc_time;


/*
    Type Name :  MS HO TEK Proc Time
    Type: 309
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Time in ms the MS needs to process TEK information during HO, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MS_HO_TEK_PROC_TIME 309
#define ASNL_MS_HO_TEK_PROC_TIME 1
typedef asnv_uint8_t asnv_ms_ho_tek_proc_time_t;
extern asnt_desc_t asnt_ms_ho_tek_proc_time;


/*
    Type Name :  MAC Header and Extended Sub-Header Support
    Type: 310
    Length in octets: 3
    Value: 24-bit bitmask, as specified in IEEE802.16e.
    Description: This TLV indicates which types of MAC headers and sub-headers are supported by BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MAC_HEADER_AND_EXTENDED_SUB_HEADER_SUPPORT 310
#define ASNL_MAC_HEADER_AND_EXTENDED_SUB_HEADER_SUPPORT 3
typedef asnv_uint24_t asnv_mac_header_and_extended_sub_header_support_t;
extern asnt_desc_t asnt_mac_header_and_extended_sub_header_support;


/*
    Type Name :  System Resource Retain Timer
    Type: 311
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: System resource retain timer set by the BS during the initial network entry of MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_SYSTEM_RESOURCE_RETAIN_TIMER 311
#define ASNL_SYSTEM_RESOURCE_RETAIN_TIMER 2
typedef asnv_uint16_t asnv_system_resource_retain_timer_t;
extern asnt_desc_t asnt_system_resource_retain_timer;


/*
    Type Name :  MS Handover Retransmission Timer
    Type: 312
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: MS Handover Retransmission Timer set by the BS during the initial network entry of MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_MS_HANDOVER_RETRANSMISSION_TIMER 312
#define ASNL_MS_HANDOVER_RETRANSMISSION_TIMER 1
typedef asnv_uint8_t asnv_ms_handover_retransmission_timer_t;
extern asnt_desc_t asnt_ms_handover_retransmission_timer;


/*
    Type Name :  Handover Indication Readiness Timer
    Type: 313
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: MS Handover Indication Readiness Timer agreed by the BS and MS during the initial network entry of MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_HANDOVER_INDICATION_READINESS_TIMER 313
#define ASNL_HANDOVER_INDICATION_READINESS_TIMER 1
typedef asnv_uint8_t asnv_handover_indication_readiness_timer_t;
extern asnt_desc_t asnt_handover_indication_readiness_timer;


/*
    Type Name :  BS Switching Timer
    Type: 314
    Length in octets: 1
    Value: 8-bit coded value, as specified in the IEEE802.16e.
    Description: Minimum time from transmission of MOB_HO-IND at the serving BS.
    Parent TLV(s): REG Context 
*/
#define ASNT_BS_SWITCHING_TIMER 314
#define ASNL_BS_SWITCHING_TIMER 1
typedef asnv_uint8_t asnv_bs_switching_timer_t;
extern asnt_desc_t asnt_bs_switching_timer;


/*
    Type Name :  Power Saving Class Capability
    Type: 315
    Length in octets: 2
    Value: 16-bit bitmask, as specified in the IEEE802.16e.
    Description: This TLV indicates which types of power saving classes are supported by BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): REG Context 
*/
#define ASNT_POWER_SAVING_CLASS_CAPABILITY 315
#define ASNL_POWER_SAVING_CLASS_CAPABILITY 2
typedef asnv_uint16_t asnv_power_saving_class_capability_t;
extern asnt_desc_t asnt_power_saving_class_capability;


/*
    Type Name :  REG Context
    Type: 144
    Length in octets: Variable
    Value: Compound
    Description: MS REG context parameters that has been agreed between MS and BS and delivered in REG-RSP message during the initial network entry of MS.
    Elements (Sub-TLVs): TLV Name
M/O
    Number of UL Transport CIDs Support: M
    Number of DL Transport CIDs Support: M
    Classification/PHS Options and SDU Encapsulation Support:     Maximum Number of Classifier: O
    PHS Support: O
    ARQ Support: M
    DSx Flow Control: O
    Total Number of Provisioned Service Flows: O
    Maximum MAC Data per Frame Support: O
    Packing Support : M
    MAC ertPS Support: O
    Maximum Number of Bursts Transmitted Concurrently to the MS: M
    HO Supported: M
    HO Process Optimization MS Timer: M
    Mobility Features Supported: M
    Sleep Mode Recovery Time: M
    Idle Mode Timeout: O
    ARQ Ack Type: O
    MS HO Connections Parameters Proc Time: M
    MS HO TEK Proc Time: M
    MAC Header and Extended Sub-Header Support : M
    System Resource Retain Timer: O
    MS Handover Retransmission Timer: O
    Handover Indication Readiness Timer: M
    BS Switching Timer: M
    Power Saving Class Capability: M
    Parent TLV(s): MS Info
*/
#define ASNT_REG_CONTEXT 144
#define ASNL_REG_CONTEXT ASNL_VARIABLE
typedef struct _asnv_reg_context_t {
    asnv_header_t h;
    asnv_number_of_ul_transport_cids_support_t number_of_ul_transport_cids_support;
    asnv_number_of_dl_transport_cids_support_t number_of_dl_transport_cids_support;
    asnv_classification_phs_options_and_sdu_encapsulation_support_t classification_phs_options_and_sdu_encapsulation_support;
    asnv_maximum_number_of_classifier_t maximum_number_of_classifier;
    asnv_phs_support_t phs_support;
    asnv_arq_support_t arq_support;
    asnv_dsx_flow_control_t dsx_flow_control;
    asnv_total_number_of_provisioned_service_flows_t total_number_of_provisioned_service_flows;
    asnv_maximum_mac_data_per_frame_support_t maximum_mac_data_per_frame_support;
    asnv_packing_support_t packing_support;
    asnv_mac_ertps_support_t mac_ertps_support;
    asnv_maximum_number_of_bursts_transmitted_concurrently_to_the_ms_t maximum_number_of_bursts_transmitted_concurrently_to_the_ms;
    asnv_ho_supported_t ho_supported;
    asnv_ho_process_optimization_ms_timer_t ho_process_optimization_ms_timer;
    asnv_mobility_features_supported_t mobility_features_supported;
    asnv_sleep_mode_recovery_time_t sleep_mode_recovery_time;
    asnv_idle_mode_timeout_t idle_mode_timeout;
    asnv_arq_ack_type_t arq_ack_type;
    asnv_ms_ho_connections_parameters_proc_time_t ms_ho_connections_parameters_proc_time;
    asnv_ms_ho_tek_proc_time_t ms_ho_tek_proc_time;
    asnv_mac_header_and_extended_sub_header_support_t mac_header_and_extended_sub_header_support;
    asnv_system_resource_retain_timer_t system_resource_retain_timer;
    asnv_ms_handover_retransmission_timer_t ms_handover_retransmission_timer;
    asnv_handover_indication_readiness_timer_t handover_indication_readiness_timer;
    asnv_bs_switching_timer_t bs_switching_timer;
    asnv_power_saving_class_capability_t power_saving_class_capability;
} asnv_reg_context_t;
extern asnt_desc_t asnt_reg_context;


/*
    Type Name :  Subscriber Transition Gaps
    Type: 316
    Length in octets: 2
    Value: 16-bit coded value, as specified in the IEEE802.16e.
    Description: This TLV indicates the transition gap SSTTG and SSRTG for TDD and H-FDD SSs, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_SUBSCRIBER_TRANSITION_GAPS 316
#define ASNL_SUBSCRIBER_TRANSITION_GAPS 2
typedef asnv_uint16_t asnv_subscriber_transition_gaps_t;
extern asnt_desc_t asnt_subscriber_transition_gaps;


/*
    Type Name :  Maximum Transmit Power
    Type: 317
    Length in octets: 4
    Value: 32-bit coded value, as specified in the IEEE802.16e.
    Description: The maximum available power for BPSK, QPSK, 16-QAM, and 64-QAM constellations, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_MAXIMUM_TRANSMIT_POWER 317
#define ASNL_MAXIMUM_TRANSMIT_POWER 4
typedef asnv_uint32_t asnv_maximum_transmit_power_t;
extern asnt_desc_t asnt_maximum_transmit_power;


/*
    Type Name :  Capabilities for Construction and Transmission of MAC PDUs
    Type: 318
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: Indicates the capabilities for construction and transmission of MAC PDUs.
    Parent TLV(s): SBC Context 
*/
#define ASNT_CAPABILITIES_FOR_CONSTRUCTION_AND_TRANSMISSION_OF_MAC_PDUS 318
#define ASNL_CAPABILITIES_FOR_CONSTRUCTION_AND_TRANSMISSION_OF_MAC_PDUS 1
typedef asnv_uint8_t asnv_capabilities_for_construction_and_transmission_of_mac_pdus_t;
extern asnt_desc_t asnt_capabilities_for_construction_and_transmission_of_mac_pdus;


/*
    Type Name :  PKM Flow Control
    Type: 319
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Maximum number of concurrent PKM transactions supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_PKM_FLOW_CONTROL 319
#define ASNL_PKM_FLOW_CONTROL 1
typedef asnv_uint8_t asnv_pkm_flow_control_t;
extern asnt_desc_t asnt_pkm_flow_control;


/*
    Type Name :  Maximum Number of Supported Security Associations
    Type: 320
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Maximum number of security association supported by the SS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_MAXIMUM_NUMBER_OF_SUPPORTED_SECURITY_ASSOCIATIONS 320
#define ASNL_MAXIMUM_NUMBER_OF_SUPPORTED_SECURITY_ASSOCIATIONS 1
typedef asnv_uint8_t asnv_maximum_number_of_supported_security_associations_t;
extern asnt_desc_t asnt_maximum_number_of_supported_security_associations;


/*
    Type Name :  MAC Mode
    Type: 323
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which message authentication code mode is supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): Security Negotiation Parameters
*/
#define ASNT_MAC_MODE 323
#define ASNL_MAC_MODE 1
typedef asnv_uint8_t asnv_mac_mode_t;
extern asnt_desc_t asnt_mac_mode;


/*
    Type Name :  PN Window Size
    Type: 324
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: Size of the receiver PN window for SAs and management connections supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): Security Negotiation Parameters
*/
#define ASNT_PN_WINDOW_SIZE 324
#define ASNL_PN_WINDOW_SIZE 2
typedef asnv_uint16_t asnv_pn_window_size_t;
extern asnt_desc_t asnt_pn_window_size;


/*
    Type Name :  Security Negotiation Parameters
    Type: 321
    Length: Variable
    Value: Compound TLV
    Description: Security parameters that has been agreed between MS and BS and delivered in SBC-RSP message during the initial network entry of MS.
    Elements: TLV Name
M/O
    Authorization Policy Support: M
    MAC Mode: M
    PN Window Size: M
    Parent TLV: SBC Context
*/
#define ASNT_SECURITY_NEGOTIATION_PARAMETERS 321
#define ASNL_SECURITY_NEGOTIATION_PARAMETERS ASNL_VARIABLE
typedef struct _asnv_security_negotiation_parameters_t {
    asnv_header_t h;
    asnv_authorization_policy_support_t authorization_policy_support;
    asnv_mac_mode_t mac_mode;
    asnv_pn_window_size_t pn_window_size;
} asnv_security_negotiation_parameters_t;
extern asnt_desc_t asnt_security_negotiation_parameters;


/*
    Type Name :  Extended Subheader Capability
    Type: 325
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: Extended subheader capability supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_EXTENDED_SUBHEADER_CAPABILITY 325
#define ASNL_EXTENDED_SUBHEADER_CAPABILITY 1
typedef asnv_uint8_t asnv_extended_subheader_capability_t;
extern asnt_desc_t asnt_extended_subheader_capability;


/*
    Type Name :  HO Trigger Metric Support
    Type: 326
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which trigger metrics are supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_HO_TRIGGER_METRIC_SUPPORT 326
#define ASNL_HO_TRIGGER_METRIC_SUPPORT 1
typedef asnv_uint8_t asnv_ho_trigger_metric_support_t;
extern asnt_desc_t asnt_ho_trigger_metric_support;


/*
    Type Name :  Current Transmit Power
    Type: 327
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This indicates the transmitted power used for the burst which carried the SBC-REQ message, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_CURRENT_TRANSMIT_POWER 327
#define ASNL_CURRENT_TRANSMIT_POWER 1
typedef asnv_uint8_t asnv_current_transmit_power_t;
extern asnt_desc_t asnt_current_transmit_power;


/*
    Type Name :  OFDMA SS FFT Sizes
    Type: 328
    Length in octets: 8-bit bitmask, as specified in the IEEE802.16e.
    Value: This indicates FFT size supported by the BS and MS, as defined in the IEEE802.16e.
    Description: 8-bit bitmask, as specified in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_FFT_SIZES 328
#define ASNL_OFDMA_SS_FFT_SIZES 1
typedef asnv_uint8_t asnv_ofdma_ss_fft_sizes_t;
extern asnt_desc_t asnt_ofdma_ss_fft_sizes;


/*
    Type Name :  OFDMA SS demodulator
    Type: 329
    Length in octets: variable
    Value: Sets of 16-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates MS demodulator options supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_DEMODULATOR 329
#define ASNL_OFDMA_SS_DEMODULATOR ASNL_VARIABLE
typedef asnv_octets_t asnv_ofdma_ss_demodulator_t;
extern asnt_desc_t asnt_ofdma_ss_demodulator;


/*
    Type Name :  OFDMA SS modulator
    Type: 330
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates MS modulator options supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_MODULATOR 330
#define ASNL_OFDMA_SS_MODULATOR 1
typedef asnv_uint8_t asnv_ofdma_ss_modulator_t;
extern asnt_desc_t asnt_ofdma_ss_modulator;


/*
    Type Name :  The number of UL HARQ Channel
    Type: 331
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The number of UL_HARQ channels supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_THE_NUMBER_OF_UL_HARQ_CHANNEL 331
#define ASNL_THE_NUMBER_OF_UL_HARQ_CHANNEL 1
typedef asnv_uint8_t asnv_the_number_of_ul_harq_channel_t;
extern asnt_desc_t asnt_the_number_of_ul_harq_channel;


/*
    Type Name :  OFDMA SS Permutation support
    Type: 332
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: This indicates which OFDMA permutation modes are supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_PERMUTATION_SUPPORT 332
#define ASNL_OFDMA_SS_PERMUTATION_SUPPORT 1
typedef asnv_uint8_t asnv_ofdma_ss_permutation_support_t;
extern asnt_desc_t asnt_ofdma_ss_permutation_support;


/*
    Type Name :  OFDMA SS CINR Measurement Capability
    Type: 333
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which channel quality measurement methods are supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_CINR_MEASUREMENT_CAPABILITY 333
#define ASNL_OFDMA_SS_CINR_MEASUREMENT_CAPABILITY 1
typedef asnv_uint8_t asnv_ofdma_ss_cinr_measurement_capability_t;
extern asnt_desc_t asnt_ofdma_ss_cinr_measurement_capability;


/*
    Type Name :  The number of DL HARQ Channels
    Type: 334
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: The number of DL_HARQ channels supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_THE_NUMBER_OF_DL_HARQ_CHANNELS 334
#define ASNL_THE_NUMBER_OF_DL_HARQ_CHANNELS 1
typedef asnv_uint8_t asnv_the_number_of_dl_harq_channels_t;
extern asnt_desc_t asnt_the_number_of_dl_harq_channels;


/*
    Type Name :  HARQ Chase Combining and CC-IR Buffer Capability
    Type: 335
    Length in octets: 2
    Value: 16-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates if HARQ Chase Combining and CC-IR buffer are supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_HARQ_CHASE_COMBINING_AND_CC_IR_BUFFER_CAPABILITY 335
#define ASNL_HARQ_CHASE_COMBINING_AND_CC_IR_BUFFER_CAPABILITY 2
typedef asnv_uint16_t asnv_harq_chase_combining_and_cc_ir_buffer_capability_t;
extern asnt_desc_t asnt_harq_chase_combining_and_cc_ir_buffer_capability;


/*
    Type Name :  OFDMA SS Uplink Power Control Support
    Type: 336
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which power control methods for uplink are supported by MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_UPLINK_POWER_CONTROL_SUPPORT 336
#define ASNL_OFDMA_SS_UPLINK_POWER_CONTROL_SUPPORT 1
typedef asnv_uint8_t asnv_ofdma_ss_uplink_power_control_support_t;
extern asnt_desc_t asnt_ofdma_ss_uplink_power_control_support;


/*
    Type Name :  OFDMA SS Uplink Power Control Scheme Switching Delay
    Type: 337
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Minimum number of frames that MS takes to switch between open-loop and closed-loop power control schemes, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_UPLINK_POWER_CONTROL_SCHEME_SWITCHING_DELAY 337
#define ASNL_OFDMA_SS_UPLINK_POWER_CONTROL_SCHEME_SWITCHING_DELAY 1
typedef asnv_uint8_t asnv_ofdma_ss_uplink_power_control_scheme_switching_delay_t;
extern asnt_desc_t asnt_ofdma_ss_uplink_power_control_scheme_switching_delay;


/*
    Type Name :  OFDMA MAP Capability
    Type: 338
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which MAP options are supported by the BS and MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_MAP_CAPABILITY 338
#define ASNL_OFDMA_MAP_CAPABILITY 1
typedef asnv_uint8_t asnv_ofdma_map_capability_t;
extern asnt_desc_t asnt_ofdma_map_capability;


/*
    Type Name :  Uplink Control Channel Support
    Type: 339
    Length in octets: 1
    Value: 8-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates which uplink control channels are supported by MS, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_UPLINK_CONTROL_CHANNEL_SUPPORT 339
#define ASNL_UPLINK_CONTROL_CHANNEL_SUPPORT 1
typedef asnv_uint8_t asnv_uplink_control_channel_support_t;
extern asnt_desc_t asnt_uplink_control_channel_support;


/*
    Type Name :  OFDMA MS CSIT Capability
    Type: 340
    Length in octets: 2
    Value: 16-bit bitmask, as specified in the IEEE802.16e.
    Description: This indicates MS capability of supporting CSIT (UL sounding), as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_MS_CSIT_CAPABILITY 340
#define ASNL_OFDMA_MS_CSIT_CAPABILITY 2
typedef asnv_uint16_t asnv_ofdma_ms_csit_capability_t;
extern asnt_desc_t asnt_ofdma_ms_csit_capability;


/*
    Type Name :  Maximum Number of Burst per Frame Capability in HARQ
    Type: 341
    Length in octets: 1
    Value: 8-bit coded value, as specified in the IEEE802.16e.
    Description: This indicates the maximum number of UL/DL data burst allocations for the SS in a single UL/DL subframe, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_MAXIMUM_NUMBER_OF_BURST_PER_FRAME_CAPABILITY_IN_HARQ 341
#define ASNL_MAXIMUM_NUMBER_OF_BURST_PER_FRAME_CAPABILITY_IN_HARQ 1
typedef asnv_uint8_t asnv_maximum_number_of_burst_per_frame_capability_in_harq_t;
extern asnt_desc_t asnt_maximum_number_of_burst_per_frame_capability_in_harq;


/*
    Type Name :  OFDMA SS demodulator for MIMO Support
    Type: 342
    Length in octets: 3
    Value: 24-bit bitmask, as specified in the IEEE802.16e.
    Description: MIMO capability of MS demodulator, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_DEMODULATOR_FOR_MIMO_SUPPORT 342
#define ASNL_OFDMA_SS_DEMODULATOR_FOR_MIMO_SUPPORT 3
typedef asnv_uint24_t asnv_ofdma_ss_demodulator_for_mimo_support_t;
extern asnt_desc_t asnt_ofdma_ss_demodulator_for_mimo_support;


/*
    Type Name :  OFDMA SS modulator for MIMO Support
    Type: 343
    Length in octets: 2
    Value: 16-bit bitmask, as specified in the IEEE802.16e.
    Description: MIMO capability of MS modulator, as defined in the IEEE802.16e.
    Parent TLV(s): SBC Context 
*/
#define ASNT_OFDMA_SS_MODULATOR_FOR_MIMO_SUPPORT 343
#define ASNL_OFDMA_SS_MODULATOR_FOR_MIMO_SUPPORT 2
typedef asnv_uint16_t asnv_ofdma_ss_modulator_for_mimo_support_t;
extern asnt_desc_t asnt_ofdma_ss_modulator_for_mimo_support;


/*
    Type Name :  SBC Context
    Type: 174
    Length in octets: Variable
    Value: Compound
    Description: MS SBC context parameters that has been agreed between MS and BS and delivered in SBC-RSP message during the initial network entry of MS.
    Elements : TLV Name
M/O
    
: Subscriber Transition Gaps
M
    Maximum Transmit Power: M
    Capabilities for Construction and Transmission of MAC PDUs: M
    PKM Flow Control : O
    Maximum Number of Supported Security Associations: O
    Security negotiation parameters: M
    Extended Subheader Capability: M
    HO Trigger Metric Support: M
    Current Transmit Power: M
    OFDMA SS FFT Sizes: M
    OFDMA SS demodulator: M
    OFDMA SS modulator: M
    The number of UL HARQ Channel: M
    OFDMA SS Permutation support: M
    OFDMA SS CINR Measurement Capability: M
    The number of DL HARQ  Channels: M
    HARQ Chase Combining and CC-IR Buffer Capability: M
    OFDMA SS Uplink Power Control Support: M
    OFDMA SS Uplink Power Control Scheme Switching Delay: M
    OFDMA MAP Capability: M
    Uplink Control Channel Support: M
    OFDMA MS CSIT Capability: M
    Maximum Number of Burst per Frame Capability in HARQ: O
    OFDMA SS demodulator for MIMO Support: M
    OFDMA SS modulator for MIMO Support: M
    OFDMA parameters sets:     Parent TLV(s): MS Info
*/
#define ASNT_SBC_CONTEXT 174
#define ASNL_SBC_CONTEXT ASNL_VARIABLE
typedef struct _asnv_sbc_context_t {
    asnv_header_t h;
    asnv_subscriber_transition_gaps_t subscriber_transition_gaps;
    asnv_maximum_transmit_power_t maximum_transmit_power;
    asnv_capabilities_for_construction_and_transmission_of_mac_pdus_t capabilities_for_construction_and_transmission_of_mac_pdus;
    asnv_pkm_flow_control_t pkm_flow_control;
    asnv_maximum_number_of_supported_security_associations_t maximum_number_of_supported_security_associations;
    asnv_security_negotiation_parameters_t security_negotiation_parameters;
    asnv_extended_subheader_capability_t extended_subheader_capability;
    asnv_ho_trigger_metric_support_t ho_trigger_metric_support;
    asnv_current_transmit_power_t current_transmit_power;
    asnv_ofdma_ss_fft_sizes_t ofdma_ss_fft_sizes;
    asnv_ofdma_ss_demodulator_t ofdma_ss_demodulator;
    asnv_ofdma_ss_modulator_t ofdma_ss_modulator;
    asnv_the_number_of_ul_harq_channel_t the_number_of_ul_harq_channel;
    asnv_ofdma_ss_permutation_support_t ofdma_ss_permutation_support;
    asnv_ofdma_ss_cinr_measurement_capability_t ofdma_ss_cinr_measurement_capability;
    asnv_the_number_of_dl_harq_channels_t the_number_of_dl_harq_channels;
    asnv_harq_chase_combining_and_cc_ir_buffer_capability_t harq_chase_combining_and_cc_ir_buffer_capability;
    asnv_ofdma_ss_uplink_power_control_support_t ofdma_ss_uplink_power_control_support;
    asnv_ofdma_ss_uplink_power_control_scheme_switching_delay_t ofdma_ss_uplink_power_control_scheme_switching_delay;
    asnv_ofdma_map_capability_t ofdma_map_capability;
    asnv_uplink_control_channel_support_t uplink_control_channel_support;
    asnv_ofdma_ms_csit_capability_t ofdma_ms_csit_capability;
    asnv_maximum_number_of_burst_per_frame_capability_in_harq_t maximum_number_of_burst_per_frame_capability_in_harq;
    asnv_ofdma_ss_demodulator_for_mimo_support_t ofdma_ss_demodulator_for_mimo_support;
    asnv_ofdma_ss_modulator_for_mimo_support_t ofdma_ss_modulator_for_mimo_support;
    asnv_ofdma_parameters_sets_t ofdma_parameters_sets;
} asnv_sbc_context_t;
extern asnt_desc_t asnt_sbc_context;


/*
    Type Name :  PMK SN
    Type: 133
    Length in octets: 1
    Value: 0X0000 | 4-bit PMK SN.
    Description: PMK Sequence Number as specified by IEEE 802.16e.
    Parent TLV(s): MS Security History
*/
#define ASNT_PMK_SN 133
#define ASNL_PMK_SN 1
typedef asnv_uint8_t asnv_pmk_sn_t;
extern asnt_desc_t asnt_pmk_sn;


/*
    Type Name :  VAAA Realm
    Type: 202
    Length in octets: Variable up to 256 octets
    Value: ASCII String
    Description: VAAA realm character string.
    Parent TLV(s): MS Security History
*/
#define ASNT_VAAA_REALM 202
#define ASNL_VAAA_REALM ASNL_VARIABLE
typedef asnv_octets_t asnv_vaaa_realm_t;
extern asnt_desc_t asnt_vaaa_realm;


/*
    Type Name :  VAAA IP Address
    Type: 201
    Length in octets: Variable (either 4 or 16)
    Value: The length defines the format of this value – IPv4 or IPv6. The value with length of 4 octets provides IPv4 address. The value with 16 octets provides IPv6 address.
    Description: VAAA IPv4 or IPv6 address.
    Parent TLV(s): MS Security History
*/
#define ASNT_VAAA_IP_ADDRESS 201
#define ASNL_VAAA_IP_ADDRESS ASNL_VARIABLE
typedef asnv_octets_t asnv_vaaa_ip_address_t;
extern asnt_desc_t asnt_vaaa_ip_address;


/*
    Type Name :  MS Security History
    Type: 108
    Length in octets: Variable
    Value: Compound TLV
    Description: Security parameters presenting the history of MS authentication.
    Elements (Bus-TLVs): TLV Name
M/O
    PMK SN: O
    MS NAI: O
    Authorization policy support: O [Note 1]
    VAAA Realm: O [Note 2]
    VAAA IP Address: O [Note 2]
    Parent TLV(s): MS Info
*/
#define ASNT_MS_SECURITY_HISTORY 108
#define ASNL_MS_SECURITY_HISTORY ASNL_VARIABLE
typedef struct _asnv_ms_security_history_t {
    asnv_header_t h;
    asnv_pmk_sn_t pmk_sn;
    asnv_ms_nai_t ms_nai;
    asnv_authorization_policy_support_t authorization_policy_support;
    asnv_vaaa_realm_t vaaa_realm;
    asnv_vaaa_ip_address_t vaaa_ip_address;
} asnv_ms_security_history_t;
extern asnt_desc_t asnt_ms_security_history;


/*
    Type Name :  Combined Resource Indicator
    Type: 206
    Length in octets: 3
    Value: Compound
    Description: This TLV indicates whether or not pre-provisioned service flows for the indicated CS type must be successfully established in order for the indicated CS type to remain active at the ASN. 
    Elements (Sub-TLVs): TLV Name
M/O
    
: CS Type
M
    Combined Resources Required: M
    Parent TLV(s): MS Info
*/
#define ASNT_COMBINED_RESOURCE_INDICATOR 206
#define ASNL_COMBINED_RESOURCE_INDICATOR ASNL_VARIABLE
typedef struct _asnv_combined_resource_indicator_t {
    asnv_header_t h;
    asnv_cs_type_t cs_type;
    asnv_combined_resources_required_t combined_resources_required;
} asnv_combined_resource_indicator_t;
extern asnt_desc_t asnt_combined_resource_indicator;


/*
    Type Name :  State
    Type: 355
    Length in octets: Variable 1-253 octets
    Value: Octet String
    Description: State attribute as received in most recent message from AAA server. 
    Parent TLV(s): MS Info
*/
#define ASNT_STATE 355
#define ASNL_STATE ASNL_VARIABLE
typedef asnv_octets_t asnv_state_t;
extern asnt_desc_t asnt_state;


/*
    Type Name :  NSP ID
    Type: 368
    Length in octets: 3
    Value: 24-bits NSP ID
24-bits NSP ID
    Description: Identifier of the NSP. 
    Parent TLV : MS Info
*/
#define ASNT_NSP_ID 368
#define ASNL_NSP_ID 3
typedef asnv_octets_t asnv_nsp_id_t;
extern asnt_desc_t asnt_nsp_id;


/*
    Type Name :  MS Info
    Type: 103
    Length in octets: Length of MS Info is set as  ‘Variable’.
    Value: Compound
    Description: Information about the MS.
    Elements (Sub-TLVs): TLV Name
M/O
    
: MSID
O
    SF Info:     PPAQ: O
    Anchor ASN GW ID: O (Note 2)
    Authenticator ID: O (Note 3)
    SA Descriptor: O
    Service Authorization Code: O
    REG Context: O
    SBC Context: O
    Anchor MM Context: O (Note 4)
    MS Security History:     MS Authorization Context:     Combined Resource Indicator: O
    Authentication Result:     DHCP relay info: O
    FA Relocation Indication: O
    BS-originated EAP Start Flag: O
    CMAC_KEY_COUNT: O
    Key Change Indicator:     State: O (Note 5)
    Idle Mode Authorization Indication: O
    NSP ID: O
    Message Primitives That Use This TLV: Every Message
*/
#define ASNT_MS_INFO 103
#define ASNL_MS_INFO ASNL_VARIABLE
typedef struct _asnv_ms_info_t {
    asnv_header_t h;
    asnv_msid_t msid;
    asnv_sf_info_t ASNV_1_OR_MORE(sf_info); /* User modification */
    asnv_ppaq_t ppaq;
    asnv_anchor_asn_gw_id_t anchor_asn_gw_id;
    asnv_authenticator_id_t authenticator_id;
    asnv_sa_descriptor_t sa_descriptor;
    asnv_service_authorization_code_t service_authorization_code;
    asnv_reg_context_t reg_context;
    asnv_sbc_context_t sbc_context;
    asnv_anchor_mm_context_t anchor_mm_context;
    asnv_ms_security_history_t ms_security_history;
    asnv_ms_authorization_context_t ms_authorization_context;
    asnv_combined_resource_indicator_t combined_resource_indicator;
    asnv_authentication_result_t authentication_result;
    asnv_dhcp_relay_info_t dhcp_relay_info;
    asnv_fa_relocation_indication_t fa_relocation_indication;
    asnv_bs_originated_eap_start_flag_t bs_originated_eap_start_flag;
    asnv_cmac_key_count_t cmac_key_count;
    asnv_key_change_indicator_t key_change_indicator;
    asnv_state_t state;
    asnv_nsp_id_t nsp_id;
} asnv_ms_info_t;
extern asnt_desc_t asnt_ms_info;


/*
    Type Name :  Network Exit Indicator
    Type: 109
    Length in octets: 1
    Value: Enumerator. The values are: 
0x00 = MS Power Down indication (used if Network Exit Indicator is requested in RNG REQ).
0x01 = Radio link with MS is lost.
    Description: Present in operations related to MS Network Exit and indicates MS Network Exit reason.
    Parent TLV(s): Path Control messages (Path_Dereg_Req), MS State Change messages.
*/
#define ASNT_NETWORK_EXIT_INDICATOR 109
#define ASNL_NETWORK_EXIT_INDICATOR 1
typedef asnv_uint8_t asnv_network_exit_indicator_t;
extern asnt_desc_t asnt_network_exit_indicator;


/*
    Type Name :  Old Anchor PC ID
    Type: 113
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets)
    Value: Unique identifier for the Old Anchor Paging Controller network entity, which administers paging activity for the MS while in Idle Mode and retains MS service and operational information.
    Description: 

    Parent TLV(s): Paging Information
*/
#define ASNT_OLD_ANCHOR_PC_ID 113
#define ASNL_OLD_ANCHOR_PC_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_old_anchor_pc_id_t;
extern asnt_desc_t asnt_old_anchor_pc_id;


/*
    Type Name :  Paging Announce Timer
    Type: 115
    Length in octets: 2 octet
    Value: 16-bit unsigned integer (in seconds).
    Description: The duration which the MS should be paged.
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_ANNOUNCE_TIMER 115
#define ASNL_PAGING_ANNOUNCE_TIMER 2
typedef asnv_uint16_t asnv_paging_announce_timer_t;
extern asnt_desc_t asnt_paging_announce_timer;


/*
    Type Name :  Paging Cause
    Type: 116
    Length in octets: 1
    Value: Enumerator. The values are:
0x01 = Location update.
0x02 = Network Re-Entry, Incoming Data for Idle MS.
    Description: 

    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_CAUSE 116
#define ASNL_PAGING_CAUSE 1
typedef asnv_uint8_t asnv_paging_cause_t;
extern asnt_desc_t asnt_paging_cause;


/*
    Type Name :  Relay PC ID
    Type: 117
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets).
    Value: Unique identifier for the Paging Controller network entity, which partakes in forwarding of Idle mode and Paging related network messages between the MS and Anchor PC and vice versa. May take part in PC relocation during MS Location Update process. Relay PC can be the identifier of serving ASN when the MS Anchor PC is not in serving ASN.
    Value: 

    Parent TLV(s): Paging Information
*/
#define ASNT_RELAY_PC_ID 117
#define ASNL_RELAY_PC_ID ASNL_VARIABLE
typedef asnv_octets_t asnv_relay_pc_id_t;
extern asnt_desc_t asnt_relay_pc_id;


/*
    Type Name :  Paging Cycle
    Type: 118
    Length in octets: 2
    Value: 

    Description: Cycle in which the paging message is transmitted within the paging group (aligned with 802.16e).
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_CYCLE 118
#define ASNL_PAGING_CYCLE 2
typedef asnv_octets_t asnv_paging_cycle_t;
extern asnt_desc_t asnt_paging_cycle;


/*
    Type Name :  Paging Offset
    Type: 120
    Length in octets: 2
    Value: 

    Description: Determines the frame within the cycle in which the paging message is transmitted. SHALL be smaller then the PAGING CYCLE value.
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_OFFSET 120
#define ASNL_PAGING_OFFSET 2
typedef asnv_octets_t asnv_paging_offset_t;
extern asnt_desc_t asnt_paging_offset;


/*
    Type Name :  Paging Interval Length
    Type: 135
    Length in octets: 2
    Value: Unsigned 32-bit integer
    Description: Max duration in frames of Paging Listening interval. Used in calculation of Paging listening interval (aligned with 802.16).
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_INTERVAL_LENGTH 135
#define ASNL_PAGING_INTERVAL_LENGTH 2
typedef asnv_uint16_t asnv_paging_interval_length_t;
extern asnt_desc_t asnt_paging_interval_length;


/*
    Type Name :  Relocation Success Indicator
    Type: 149
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Accept
0x01 = Refuse
    Description: Indicates confirmation of whether the Relocation was accepted and completed by the Relocation Destination.
    Parent TLV(s): Paging Information
*/
#define ASNT_RELOCATION_SUCCESS_INDICATOR 149
#define ASNL_RELOCATION_SUCCESS_INDICATOR 1
typedef asnv_uint8_t asnv_relocation_success_indicator_t;
extern asnt_desc_t asnt_relocation_success_indicator;


/*
    Type Name :  Paging Group ID
    Type: 123
    Length in octets: 2
    Value: Byte string
    Description: 16-bit ID representing Paging Group. 
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_GROUP_ID 123
#define ASNL_PAGING_GROUP_ID 2
typedef asnv_octets_t asnv_paging_group_id_t;
extern asnt_desc_t asnt_paging_group_id;


/*
    Type Name :  Paging Start/Stop
    Type: 121
    Length in octets: 1
    Value: 

    Description: Indicates to the BSs whether to start/stop paging on the airlink.
    Parent TLV(s): Paging Information
*/
#define ASNT_PAGING_START_STOP 121
#define ASNL_PAGING_START_STOP 1
typedef asnv_uint8_t asnv_paging_start_stop_t;
extern asnt_desc_t asnt_paging_start_stop;


/*
    Type Name :  Paging Information
    Type: 119
    Length in octets: Variable
    Value: Compound TLV
    Description: Set of Paging related IEs.
    Elements (Sub-TLVs): TLV Name
M/O
    
: Paging Cycle
O
    Paging Offset: O
    Paging Interval Length: O
    Relocation Success Indicator: O
    Paging Group ID: O
    Relay PC ID: O
    Anchor PC ID: O
    Idle Mode Retain Info: O
    Paging Start / Stop: O
    Anchor PC Relocation Destination: O
    Anchor PC Relocation Request Response: O
    Location Update Status: O
    Paging Cause: O
    Idle Mode Timeout: O
    Old Anchor PC ID: O
    Paging Announce Timer: O
    Message Primitives That Use This TLV: Paging Function messages; Data Path Control messages; Context Delivery messages.
*/
#define ASNT_PAGING_INFORMATION 119
#define ASNL_PAGING_INFORMATION ASNL_VARIABLE
typedef struct _asnv_paging_information_t {
    asnv_header_t h;
    asnv_paging_cycle_t paging_cycle;
    asnv_paging_offset_t paging_offset;
    asnv_paging_interval_length_t paging_interval_length;
    asnv_relocation_success_indicator_t relocation_success_indicator;
    asnv_paging_group_id_t paging_group_id;
    asnv_relay_pc_id_t relay_pc_id;
    asnv_anchor_pc_id_t anchor_pc_id;
    asnv_idle_mode_retain_info_t idle_mode_retain_info;
    asnv_paging_start_stop_t paging_start_stop;
    asnv_anchor_pc_relocation_destination_t anchor_pc_relocation_destination;
    asnv_anchor_pc_relocation_request_response_t anchor_pc_relocation_request_response;
    asnv_location_update_status_t location_update_status;
    asnv_paging_cause_t paging_cause;
    asnv_idle_mode_timeout_t idle_mode_timeout;
    asnv_old_anchor_pc_id_t old_anchor_pc_id;
    asnv_paging_announce_timer_t paging_announce_timer;
} asnv_paging_information_t;
extern asnt_desc_t asnt_paging_information;


/*
    Type Name :  PC Relocation Indication
    Type: 122
    Length in octets: 1
    Value: 

    Description: Request from the Current Anchor PC to the New Anchor PC to perform PC relocation.
    Message Primitives That Use This TLV: R4 LU_Rsp
*/
#define ASNT_PC_RELOCATION_INDICATION 122
#define ASNL_PC_RELOCATION_INDICATION 1
typedef asnv_uint8_t asnv_pc_relocation_indication_t;
extern asnt_desc_t asnt_pc_relocation_indication;


/*
    Type Name :  Radio Resource Fluctuation
    Type: 142
    Length in octets: 1
    Value: 8-bit unsigned integer.
    Description: Radio Resource Fluctuation is used to indicate the degree of fluctuation in DL and UL channel data traffic throughputs. When Radio Resource Fluctuation is set to 0, it implies that the DL and UL data traffic is constant in data throughput. Hence, there is no fluctuation in Available Radio Resource. When Radio Resource Fluctuation is set to maximum value 255, the data traffic is very volatile in nature which makes the Available Radio Resource unpredictable. The Radio Resource Fluctuation for all traffic models should be in the range of 0 to 255."
    Parent TLV(s): RRM BS Info
*/
#define ASNT_RADIO_RESOURCE_FLUCTUATION 142
#define ASNL_RADIO_RESOURCE_FLUCTUATION 1
typedef asnv_uint8_t asnv_radio_resource_fluctuation_t;
extern asnt_desc_t asnt_radio_resource_fluctuation;


/*
    Type Name :  Registration Type
    Type: 145
    Length in octets: 4
    Value: Enumerator. The values are: 
0x00000000 – Initial Network Entry
0x00000001 – Handoff
0x00000002 – In-Service Data Path Establishment
0x00000003 – MS Network Exit
0x00000004 – Idle Mode Entry
0x00000005 – Idle Mode Exit
0x00000006 – Anchor DPF Relocation
    Description: Indication of the process which includes data path (Pre-) Registration.
    Message Primitives That Use This TLV: DP Control messages (Path (Pre-/De-) Registration/Modification Request/Response/Acknowledge), HO_Req
*/
#define ASNT_REGISTRATION_TYPE 145
#define ASNL_REGISTRATION_TYPE 4
typedef asnv_uint32_t asnv_registration_type_t;
extern asnt_desc_t asnt_registration_type;


/*
    Type Name :  Response Code
    Type: 153
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Not allowed - Paging Reference is zero
0x01 = Not allowed - No such SF
    Description: Indicates reason for not paging the MS.
    Message Primitives that Use This TLV: Initiated_Paging_Rsp
*/
#define ASNT_RESPONSE_CODE 153
#define ASNL_RESPONSE_CODE 1
typedef asnv_uint8_t asnv_response_code_t;
extern asnt_desc_t asnt_response_code;


/*
    Type Name :  Result Code
    Type: 154
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Success
0x01 = Failure – No resources
0x02 = Failure – Not supported
0x03 = Partial Response
0x04 = Multiple Not Supported
0x05 = Request Failure
The values in the range 0x06 – 0x99 are Reserved
The values in the range 0xA0 – 0xFF are Reserved
    Description: Indicates if the requested action was successfully supported at the intended target.
    Message Primitives that use this TLV: HO related messages, Path (pre-)registration and context related  messages.
*/
#define ASNT_RESULT_CODE 154
#define ASNL_RESULT_CODE 1
typedef asnv_uint8_t asnv_result_code_t;
extern asnt_desc_t asnt_result_code;


/*
    Type Name :  ROHC Parameter Payload
    Type: 155
    Length in octets: TBD
    Value: TBD
    Description: 

    Parent TLV: TBD
*/
#define ASNT_ROHC_PARAMETER_PAYLOAD 155
#define ASNL_ROHC_PARAMETER_PAYLOAD ASNL_VARIABLE
typedef asnv_octets_t asnv_rohc_parameter_payload_t;
extern asnt_desc_t asnt_rohc_parameter_payload;


/*
    Type Name :  RRM Absolute Threshold Value J
    Type: 157
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = 0%
0x01 = 1%
...
0x64 = 100%
    Description: The threshold value J is used by BS (RRA) as the absolute threshold for reporting.
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_ABSOLUTE_THRESHOLD_VALUE_J 157
#define ASNL_RRM_ABSOLUTE_THRESHOLD_VALUE_J 1
typedef asnv_uint8_t asnv_rrm_absolute_threshold_value_j_t;
extern asnt_desc_t asnt_rrm_absolute_threshold_value_j;


/*
    Type Name :  RRM Averaging Time T
    Type: 158
    Length in octets: 2
    Value: 16-bit unsigned integer, in units of 100 msec.
    Description: Used by BS (RRA) as the measurement interval for producing the information requested by RRC. 
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_AVERAGING_TIME_T 158
#define ASNL_RRM_AVERAGING_TIME_T 2
typedef asnv_uint16_t asnv_rrm_averaging_time_t_t;
extern asnt_desc_t asnt_rrm_averaging_time_t;


/*
    Type Name :  Total Slots DL
    Type: 191
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: Total number of slots in the DL frame. This is the total (max) number of slots possible in DL. This would depend on the RF channelization and the subchannelization schemes employed.
    Parent TLV(s): RRM BS Info
*/
#define ASNT_TOTAL_SLOTS_DL 191
#define ASNL_TOTAL_SLOTS_DL 2
typedef asnv_uint16_t asnv_total_slots_dl_t;
extern asnt_desc_t asnt_total_slots_dl;


/*
    Type Name :  Total Slots UL
    Type: 192
    Length in octets: 2
    Value: 16-bit unsigned integer.
    Description: Total number of slots in the UL frame. This is the total (max) number of slots possible in UL. This would depend on the RF channelization and the subchannelization schemes employed.
    Parent TLV(s): RRM BS Info
*/
#define ASNT_TOTAL_SLOTS_UL 192
#define ASNL_TOTAL_SLOTS_UL 2
typedef asnv_uint16_t asnv_total_slots_ul_t;
extern asnt_desc_t asnt_total_slots_ul;


/*
    Type Name :  UCD Setting
    Type: 195
    Length in octets: Variable
    Value: Compound, as specified in [802.16e-2005], section 11.1.7.
    Description: This is an IEEE802.16e-2005 defined TLV. The UCD_settings is a TLV value that encapsulates a UCD message (excluding the generic MAC header and CRC) that may be transmitted in the advertised BS downlink channel. This information is intended to enable fast synchronization of the MS with the advertised BS downlink.
    Parent TLV(s): RRM BS Info
*/
#define ASNT_UCD_SETTING 195
#define ASNL_UCD_SETTING ASNL_VARIABLE
typedef asnv_octets_t asnv_ucd_setting_t;
extern asnt_desc_t asnt_ucd_setting;


/*
    Type Name :  RRM BS Info
    Type: 159
    Length in octets: Variable
    Value: Compound
    Description: Contains a description of BS parameters which are not related to a specific MS. 
    Elements (Sub-TLVs): TLV Name
M/O
    BS ID: M
    Available Radio Resource DL: O
    Total slots DL: O
    Available Radio Resource UL: O
    Total slots UL: O
    Radio Resource Fluctuation: O
    DCD/UCD Configuration Change Count: O
    DCD Setting: O
    UCD Setting: O
    Full DCD Setting: O
    Full UCD Setting: O
    Message Primitives That Use This TLV: RRM Spare_Capacity_Rpt, RRM Neighbor_BS_Resource_Status_Update, RRM Radio_Config_Update_Rpt.
*/
#define ASNT_RRM_BS_INFO 159
#define ASNL_RRM_BS_INFO ASNL_VARIABLE
typedef struct _asnv_rrm_bs_info_t {
    asnv_header_t h;
    asnv_bs_id_t bs_id;
    asnv_available_radio_resource_dl_t available_radio_resource_dl;
    asnv_total_slots_dl_t total_slots_dl;
    asnv_available_radio_resource_ul_t available_radio_resource_ul;
    asnv_total_slots_ul_t total_slots_ul;
    asnv_radio_resource_fluctuation_t radio_resource_fluctuation;
    asnv_dcd_ucd_configuration_change_count_t dcd_ucd_configuration_change_count;
    asnv_dcd_setting_t dcd_setting;
    asnv_ucd_setting_t ucd_setting;
    asnv_full_dcd_setting_t full_dcd_setting;
    asnv_full_ucd_setting_t full_ucd_setting;
} asnv_rrm_bs_info_t;
extern asnt_desc_t asnt_rrm_bs_info;


/*
    Type Name :  UL PHY Service Level
    Type: 198
    Length in octets: 4
    Value: 32-bit integer representing UL PSL.
    Description: 

    Parent TLV: BS Info
*/
#define ASNT_UL_PHY_SERVICE_LEVEL 198
#define ASNL_UL_PHY_SERVICE_LEVEL 4
typedef asnv_uint32_t asnv_ul_phy_service_level_t;
extern asnt_desc_t asnt_ul_phy_service_level;


/*
    Type Name :  RRM BS-MS PHY Quality Info
    Type: 160
    Length in octets: Variable
    Value: Compound
    Description: This compound TLV contains the PHY quality indicators of the radio channel between a BS and a specific MS identified by MSID in the message header.
    Elements (Sub-TLVs): TLV Name
M/O
    BS ID: M
    Serving/Target Indicator: O
    Round Trip Delay (Serving Only): O
    Relative Delay (Target Only): O
    DL PHY Quality Info: O
    DL PHY Service Level: O
    UL PHY Quality Info: O
    UL PHY Service Level: O
    Preamble Index / Sub-channel Index: O
    SF Info (for Data Integrity): O
    Message Primitives That Use This TLV: RRM PHY_Parameters_Rpt
*/
#define ASNT_RRM_BS_MS_PHY_QUALITY_INFO 160
#define ASNL_RRM_BS_MS_PHY_QUALITY_INFO ASNL_VARIABLE
typedef struct _asnv_rrm_bs_ms_phy_quality_info_t {
    asnv_header_t h;
    asnv_bs_id_t bs_id;
    asnv_serving_target_indicator_t serving_target_indicator;
    asnv_round_trip_delay_t round_trip_delay;
    asnv_relative_delay_t relative_delay;
    asnv_dl_phy_quality_info_t dl_phy_quality_info;
    asnv_dl_phy_service_level_t dl_phy_service_level;
    asnv_ul_phy_quality_info_t ul_phy_quality_info;
    asnv_ul_phy_service_level_t ul_phy_service_level;
    asnv_preamble_index_sub_channel_index_t preamble_index_sub_channel_index;
    asnv_sf_info_t sf_info;
} asnv_rrm_bs_ms_phy_quality_info_t;
extern asnt_desc_t asnt_rrm_bs_ms_phy_quality_info;


/*
    Type Name :  RRM Relative Threshold RT
    Type: 161
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = 0%
0x01 = 1%
...
0x64 = 100%
    Description: The threshold value RT is used by BS (RRA) to keep track of the threshold from the last measurement period.
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_RELATIVE_THRESHOLD_RT 161
#define ASNL_RRM_RELATIVE_THRESHOLD_RT 1
typedef asnv_uint8_t asnv_rrm_relative_threshold_rt_t;
extern asnt_desc_t asnt_rrm_relative_threshold_rt;


/*
    Type Name :  RRM Reporting Characteristics
    Type: 162
    Length in octets: 4
    Value: 32-bit bitmaskwith the following values.
Bit #0 = periodically as defined by reporting period P
Bit #1 = regularly whenever resources have changed as defined by RT since the last measurement period.
Bit #2 = regularly whenever resources cross predefined total threshold(s) defined by reporting absolute threshold values J
Bit #3 = DCD/UCD Configuration Change Count modification
All Bit= 0, Stop RRM Reporting (while in Request message) and RRM Reporting Stopped in (Report Message)
    Description: Indicates whether reporting SHALL be once, or periodically, or event driven, in which case the event is specified.
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_REPORTING_CHARACTERISTICS 162
#define ASNL_RRM_REPORTING_CHARACTERISTICS 4
typedef asnv_uint32_t asnv_rrm_reporting_characteristics_t;
extern asnt_desc_t asnt_rrm_reporting_characteristics;


/*
    Type Name :  RRM Reporting Period P
    Type: 163
    Length in octets: 2
    Value: 16-bit unsigned integer, in units of 100 msec.
    Description: Used by BS (RRA) as the reporting period for producing the information requested by RRC. When a report has been sent at time T, then the next report SHALL be sent at T + P, unless an earlier report is sent because of a different reporting event during that period. Whenever a report has been sent for any other reason, the timer for periodic reporting SHALL be reset at the reporting side.
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_REPORTING_PERIOD_P 163
#define ASNL_RRM_REPORTING_PERIOD_P 2
typedef asnv_uint16_t asnv_rrm_reporting_period_p_t;
extern asnt_desc_t asnt_rrm_reporting_period_p;


/*
    Type Name :  RRM Spare Capacity Report Type
    Type: 164
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = “Type 1” which refers to reporting of the “Available radio resource indicator”
    Description: The value of this parameter specifies the type of RRM Spare_Capacity_Rpt Forward compatibility. 
    Message Primitives That Use This TLV: RRM Spare_Capacity_Req, RRM Spare_Capacity_Rpt.
*/
#define ASNT_RRM_SPARE_CAPACITY_REPORT_TYPE 164
#define ASNL_RRM_SPARE_CAPACITY_REPORT_TYPE 1
typedef asnv_uint8_t asnv_rrm_spare_capacity_report_type_t;
extern asnt_desc_t asnt_rrm_spare_capacity_report_type;


/*
    Type Name :  Accounting Type
    Type: 247
    Length in octets: 1
    Value: 1st nibble:
0x0 = Invalid
0x1 = IP Session-Based Accounting Default value for the ASN
0x2 = Flow-Based Accounting
    Parent TLV(s): Accounting Mode Provisioning
*/
#define ASNT_ACCOUNTING_TYPE 247
#define ASNL_ACCOUNTING_TYPE 1
typedef asnv_uint8_t asnv_accounting_type_t;
extern asnt_desc_t asnt_accounting_type;


/*
    Type Name :  Interim Update Interval
    Type: 248
    Length in octets: 2
    Value: 16-bit unsigned integer representing the interval in seconds.
    Parent TLV(s): Accounting Mode Provisioning
*/
#define ASNT_INTERIM_UPDATE_INTERVAL 248
#define ASNL_INTERIM_UPDATE_INTERVAL 2
typedef asnv_uint16_t asnv_interim_update_interval_t;
extern asnt_desc_t asnt_interim_update_interval;


/*
    Type Name :  Accounting Number of ToDs
    Type: 256
    Length in octets: 1
    Value: UINT8 (0 .. 255).
    Parent TLV(s): Accounting Mode Provisioning
*/
#define ASNT_ACCOUNTING_NUMBER_OF_TODS 256
#define ASNL_ACCOUNTING_NUMBER_OF_TODS 1
typedef asnv_uint8_t asnv_accounting_number_of_tods_t;
extern asnt_desc_t asnt_accounting_number_of_tods;


/*
    Type Name :  Time of Day Tariff Switch Time
    Type: 254
    Length in octets: 2
    Value: The time of day time in hours and minutes
Octet 1: 0x00-0x17 = Hour (0-23)
Octet 2: 0x00-0x3B = Minute (0-59)
    Parent TLV(s): Time of Day Tariff Switch
*/
#define ASNT_TIME_OF_DAY_TARIFF_SWITCH_TIME 254
#define ASNL_TIME_OF_DAY_TARIFF_SWITCH_TIME 2
typedef asnv_octets_t asnv_time_of_day_tariff_switch_time_t;
extern asnt_desc_t asnt_time_of_day_tariff_switch_time;


/*
    Type Name :  Time of Day Tariff Switch Offset
    Type: 255
    Length in octets: 4
    Value:  32-bit signed integer:Offset (+/- seconds from UTC).
    Parent TLV(s): Time of Day Tariff Switch
*/
#define ASNT_TIME_OF_DAY_TARIFF_SWITCH_OFFSET 255
#define ASNL_TIME_OF_DAY_TARIFF_SWITCH_OFFSET 4
typedef asnv_int32_t asnv_time_of_day_tariff_switch_offset_t;
extern asnt_desc_t asnt_time_of_day_tariff_switch_offset;


/*
    Type Name :  Time of Day Tariff Switch
    Type: 253
    Length in octets: 6
    Elements (Sub-TLVs): TLV Name
M/O Flag
    1. Time of Day Tariff Switch Time: M
    2. Time of Day Tariff Switch Offset: M
*/
#define ASNT_TIME_OF_DAY_TARIFF_SWITCH 253
#define ASNL_TIME_OF_DAY_TARIFF_SWITCH ASNL_VARIABLE
typedef struct _asnv_time_of_day_tariff_switch_t {
    asnv_header_t h;
    asnv_time_of_day_tariff_switch_time_t time_of_day_tariff_switch_time;
    asnv_time_of_day_tariff_switch_offset_t time_of_day_tariff_switch_offset;
} asnv_time_of_day_tariff_switch_t;
extern asnt_desc_t asnt_time_of_day_tariff_switch;


/*
    Type Name :  Accounting Mode Provisioning
    Type: 243 
    Length in octets: Variable
    Description: Optional accounting extensions that is designed to enable the Accounting Agent, if present, to communicate with the accounting client. The optional accounting mode provisioning TLV is included in existing messages to indicate the different accounting options as described in the stage-2 specifications. 
    Elements (Sub-TLVs): TLV Name
Description
M/O
    Accounting Type : The Accounting Type is datafilled in the AAA server and sent to the accounting client in the Access_Accept message. This information is used to instruct the accounting agent at the Accounting Agent to track volume counts, if requested, and to what granularity to track them, e.g., IP session vs. service flow level.
M
    Interim Update Interval : The Interim Update Interval is datafilled in the AAA server and sent to the Accounting Client in the Access_Accept message. This TLV is only used for volume-based accounting.
O
    
: Accounting Number of ToDs
The number of Time of Day Tariff Switch TLVs.
O
    
: Time of Day Tariff Switch
The Time of Day Tariff Switch TLV is datafilled in the AAA server and sent to the ASN-GW in the Access_Accept message.  There can be more than one of these sent.
O
    Parent TLV(s): Accounting Context
*/
#define ASNT_ACCOUNTING_MODE_PROVISIONING 243
#define ASNL_ACCOUNTING_MODE_PROVISIONING ASNL_VARIABLE
typedef struct _asnv_accounting_mode_provisioning_t {
    asnv_header_t h;
    asnv_accounting_type_t accounting_type;
    asnv_interim_update_interval_t interim_update_interval;
    asnv_accounting_number_of_tods_t accounting_number_of_tods;
    asnv_time_of_day_tariff_switch_t time_of_day_tariff_switch;
} asnv_accounting_mode_provisioning_t;
extern asnt_desc_t asnt_accounting_mode_provisioning;


/*
    Type Name :  R3 Acct Session Time
    Type: 361
    Length: 4
    Value: 32-bit unsigned Integer
    Description: The number of seconds the flow or session was active.
    Parent TLV: Accounting Context
*/
#define ASNT_R3_ACCT_SESSION_TIME 361
#define ASNL_R3_ACCT_SESSION_TIME 4
typedef asnv_uint32_t asnv_r3_acct_session_time_t;
extern asnt_desc_t asnt_r3_acct_session_time;


/*
    Type Name :  R3 Active Time
    Type: 286
    Length: 4
    Value: 32-bit unsigned Integer.
    Description: The number of seconds the session was not in Idle Mode.
    Parent TLV: Accounting Context
*/
#define ASNT_R3_ACTIVE_TIME 286
#define ASNL_R3_ACTIVE_TIME 4
typedef asnv_uint32_t asnv_r3_active_time_t;
extern asnt_desc_t asnt_r3_active_time;


/*
    Type Name :  Interim Update Interval Remaining
    Type: 287
    Length: 4
    Value: 32-bit unsigned Integer.
    Description: The number of seconds remaining in the current Interim Update Interval.
    Parent TLV: Accounting Context
*/
#define ASNT_INTERIM_UPDATE_INTERVAL_REMAINING 287
#define ASNL_INTERIM_UPDATE_INTERVAL_REMAINING 4
typedef asnv_uint32_t asnv_interim_update_interval_remaining_t;
extern asnt_desc_t asnt_interim_update_interval_remaining;


/*
    Type Name :  Accounting Context
    Type: 204
    Length in octets: Variable
    Value: Compound
    Description: Accounting Context.
    Elements (Sub- TLVs): TLV Name
M/O
    Accounting Mode Provisioning: M
    
: R3 Acct Session Time
O1
    R3 Active Time: O1
    Interim Update Interval Remaining: O2
    Message Primitives That Use This TLV: RR_Req (Create) / HO_Req/Context_Rpt / IM_Exit_State_Change_Req/Relocation_Complete_Rsp/Anchor_DPF_HO_ReqAnchor_DPF_HO_Trigger
*/
#define ASNT_ACCOUNTING_CONTEXT 204
#define ASNL_ACCOUNTING_CONTEXT ASNL_VARIABLE
typedef struct _asnv_accounting_context_t {
    asnv_header_t h;
    asnv_accounting_mode_provisioning_t accounting_mode_provisioning;
    asnv_r3_acct_session_time_t r3_acct_session_time;
    asnv_r3_active_time_t r3_active_time;
    asnv_interim_update_interval_remaining_t interim_update_interval_remaining;
} asnv_accounting_context_t;
extern asnt_desc_t asnt_accounting_context;


/*
    Type Name :  Cumulative Uplink Octets
    Type: 249
    Length in octets: 8
    Value: Cumulative uplink volume count in octets.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_CUMULATIVE_UPLINK_OCTETS 249
#define ASNL_CUMULATIVE_UPLINK_OCTETS 8
typedef asnv_octets_t asnv_cumulative_uplink_octets_t;
extern asnt_desc_t asnt_cumulative_uplink_octets;


/*
    Type Name :  Cumulative Downlink Octets
    Type: 250
    Length in octets: 8
    Value: Cumulative downlink volume count in octets.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_CUMULATIVE_DOWNLINK_OCTETS 250
#define ASNL_CUMULATIVE_DOWNLINK_OCTETS 8
typedef asnv_octets_t asnv_cumulative_downlink_octets_t;
extern asnt_desc_t asnt_cumulative_downlink_octets;


/*
    Type Name :  Uplink Octets at Tariff Switch
    Type: 257
    Length in octets: 8
    Value: Uplink octets at tariff switch.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_UPLINK_OCTETS_AT_TARIFF_SWITCH 257
#define ASNL_UPLINK_OCTETS_AT_TARIFF_SWITCH 8
typedef asnv_octets_t asnv_uplink_octets_at_tariff_switch_t;
extern asnt_desc_t asnt_uplink_octets_at_tariff_switch;


/*
    Type Name :  Downlink Octets at Tariff Switch
    Type: 258
    Length in octets: 8
    Value: Downlink Octets at Tariff Switch.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_DOWNLINK_OCTETS_AT_TARIFF_SWITCH 258
#define ASNL_DOWNLINK_OCTETS_AT_TARIFF_SWITCH 8
typedef asnv_octets_t asnv_downlink_octets_at_tariff_switch_t;
extern asnt_desc_t asnt_downlink_octets_at_tariff_switch;


/*
    Type Name :  Cumulative Uplink Packets
    Type: 251
    Length in octets: 8
    Value: Cumulative uplink volume count in packets.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_CUMULATIVE_UPLINK_PACKETS 251
#define ASNL_CUMULATIVE_UPLINK_PACKETS 8
typedef asnv_octets_t asnv_cumulative_uplink_packets_t;
extern asnt_desc_t asnt_cumulative_uplink_packets;


/*
    Type Name :  Cumulative Downlink Packets
    Type: 252
    Length in octets: 8
    Value: Cumulative downlink volume count in packets.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_CUMULATIVE_DOWNLINK_PACKETS 252
#define ASNL_CUMULATIVE_DOWNLINK_PACKETS 8
typedef asnv_octets_t asnv_cumulative_downlink_packets_t;
extern asnt_desc_t asnt_cumulative_downlink_packets;


/*
    Type Name :  Uplink Packets at Tariff Switch
    Type: 259
    Length in octets: 8
    Value: Uplink Packets at tariff switch.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_UPLINK_PACKETS_AT_TARIFF_SWITCH 259
#define ASNL_UPLINK_PACKETS_AT_TARIFF_SWITCH 8
typedef asnv_octets_t asnv_uplink_packets_at_tariff_switch_t;
extern asnt_desc_t asnt_uplink_packets_at_tariff_switch;


/*
    Type Name :  Downlink Packets at Tariff Switch
    Type: 260
    Length in octets: 8
    Value: Downlink Packets at tariff switch.
    Parent TLV(s): Accounting Session/Flow Volume Counts
*/
#define ASNT_DOWNLINK_PACKETS_AT_TARIFF_SWITCH 260
#define ASNL_DOWNLINK_PACKETS_AT_TARIFF_SWITCH 8
typedef asnv_octets_t asnv_downlink_packets_at_tariff_switch_t;
extern asnt_desc_t asnt_downlink_packets_at_tariff_switch;


/*
    Type Name :  Accounting Session/Flow Volume Counts
    Type: 244 
    Length in octets: 16
    Description: The counts represent session or flow depending on the Accounting Type that has been specified for the MS. The counts are sent by the Accounting Agent to the Accounting Client during Service Flow Deletion/Modification, HO, entering Idle Mode, de-registering from the network, and reporting bulk interim accounting. The counts are cumulative meaning that the counts are not reset on the Accounting Agent each time the TLV is sent.  Also the counts are simply the counts collected at the Accounting Agent. The overflow of any of these counters is handled by the Accounting Client.
    Elements (Sub-TLVs): TLV Name
Description
M/O
    Cumulative Uplink Octets: Shall include this TLV if the value is &gt; 0
M
    Cumulative Downlink Octets: Shall include this TLV if the value is &gt; 0
M
    Uplink Octets at Tariff Switch : 

O
    Downlink Octets at Tariff Switch : 

O
    Cumulative Uplink Packets: Shall include this TLV if the value is &gt; 0
M
    Cumulative Downlink Packets: Shall include this TLV if the value is &gt; 0
M
    Uplink Packets at Tariff Switch : 

O
    Downlink Packets at Tariff Switch: 

O
    Parent TLV(s): Accounting Bulk Session/Flow
*/
#define ASNT_ACCOUNTING_SESSION_FLOW_VOLUME_COUNTS 244
#define ASNL_ACCOUNTING_SESSION_FLOW_VOLUME_COUNTS ASNL_VARIABLE
typedef struct _asnv_accounting_session_flow_volume_counts_t {
    asnv_header_t h;
    asnv_cumulative_uplink_octets_t cumulative_uplink_octets;
    asnv_cumulative_downlink_octets_t cumulative_downlink_octets;
    asnv_uplink_octets_at_tariff_switch_t uplink_octets_at_tariff_switch;
    asnv_downlink_octets_at_tariff_switch_t downlink_octets_at_tariff_switch;
    asnv_cumulative_uplink_packets_t cumulative_uplink_packets;
    asnv_cumulative_downlink_packets_t cumulative_downlink_packets;
    asnv_uplink_packets_at_tariff_switch_t uplink_packets_at_tariff_switch;
    asnv_downlink_packets_at_tariff_switch_t downlink_packets_at_tariff_switch;
} asnv_accounting_session_flow_volume_counts_t;
extern asnt_desc_t asnt_accounting_session_flow_volume_counts;


/*
    Type Name :  Accounting Number of Bulk Sessions/Flows
    Type: 245
    Length in octets: 1
    Value: The number of Accounting Bulk Session/Flow TLVs
    Parent TLV(s): Accounting Bulk Session/Flow Volume Counts
*/
#define ASNT_ACCOUNTING_NUMBER_OF_BULK_SESSIONS_FLOWS 245
#define ASNL_ACCOUNTING_NUMBER_OF_BULK_SESSIONS_FLOWS 1
typedef asnv_uint8_t asnv_accounting_number_of_bulk_sessions_flows_t;
extern asnt_desc_t asnt_accounting_number_of_bulk_sessions_flows;


/*
    Type Name :  Accounting IP Address
    Type: 264
    Length in octets: Variable (either 4 or 16)
    Value: 

    Description: 

    Parent TLV: Accounting Bulk Session/Flow
*/
#define ASNT_ACCOUNTING_IP_ADDRESS 264
#define ASNL_ACCOUNTING_IP_ADDRESS ASNL_VARIABLE
typedef asnv_octets_t asnv_accounting_ip_address_t;
extern asnt_desc_t asnt_accounting_ip_address;


/*
    Type Name :  Accounting Bulk Session/Flow
    Type: 246 
    Length in octets: Variable
    Description: The IP session or service flow based volume count information is carried in this TLV.
    Elements (Sub-TLVs): TLV Name
Description
M/O
    MSID: 

O
    Accounting IP Address: 

M
    SFID: 

O
    Accounting Session/Flow Volume Counts: 

M
    Parent TLV(s): Accounting Bulk Session/Flow Volume Counts
*/
#define ASNT_ACCOUNTING_BULK_SESSION_FLOW 246
#define ASNL_ACCOUNTING_BULK_SESSION_FLOW ASNL_VARIABLE
typedef struct _asnv_accounting_bulk_session_flow_t {
    asnv_header_t h;
    asnv_msid_t msid;
    asnv_accounting_ip_address_t accounting_ip_address;
    asnv_sfid_t sfid;
    asnv_accounting_session_flow_volume_counts_t accounting_session_flow_volume_counts;
} asnv_accounting_bulk_session_flow_t;
extern asnt_desc_t asnt_accounting_bulk_session_flow;


/*
    Type Name :  MN-FA Key Lifetime
    Type: 267
    Length in octets: 4 
    Value: 32-bit unsigned integer.
    Description: Time of MN-FA key remaining valid. This is provided to the FA by the anchor Authenticator for MN-FA key context transfer.
    Parent TLV(s): MIP4 Security Info
*/
#define ASNT_MN_FA_KEY_LIFETIME 267
#define ASNL_MN_FA_KEY_LIFETIME 4
typedef asnv_uint32_t asnv_mn_fa_key_lifetime_t;
extern asnt_desc_t asnt_mn_fa_key_lifetime;


/*
    Type Name :  MIP4 Security Info
    Type: 266
    Length in octets: Variable
    Value: Compound
    Description: MIP4 security context to be transfered from Anchor Authenticator to FA.
    Elements (Sub-TLVs): TLV Name
M/O
    MN-FA Key: O
    MN-FA Key Lifetime: O
    MN-FA SPI: O
    MS NAI: O
    FA-HA Key: O
    FA-HA Key Lifetime: O
    FA-HA SPI: O
    HA IP Address: O 
    Message Primitive(s) that use this TLV: Context_Rpt
*/
#define ASNT_MIP4_SECURITY_INFO 266
#define ASNL_MIP4_SECURITY_INFO ASNL_VARIABLE
typedef struct _asnv_mip4_security_info_t {
    asnv_header_t h;
    asnv_mn_fa_key_t mn_fa_key;
    asnv_mn_fa_key_lifetime_t mn_fa_key_lifetime;
    asnv_mn_fa_spi_t mn_fa_spi;
    asnv_ms_nai_t ms_nai;
    asnv_fa_ha_key_t fa_ha_key;
    asnv_fa_ha_key_lifetime_t fa_ha_key_lifetime;
    asnv_fa_ha_key_spi_t fa_ha_key_spi;
    asnv_ha_ip_address_t ha_ip_address;
} asnv_mip4_security_info_t;
extern asnt_desc_t asnt_mip4_security_info;


/*
    Type Name :  Network assisted HO Supported
    Type: 270
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = Network Assisted HO not supported
0x01 = Network Assisted HO supported
    Description: Defined in 2 Indicator for network assisted HO.
    Message Primitives That Use This TLV: HO_Directive
*/
#define ASNT_NETWORK_ASSISTED_HO_SUPPORTED 270
#define ASNL_NETWORK_ASSISTED_HO_SUPPORTED 1
typedef asnv_uint8_t asnv_network_assisted_ho_supported_t;
extern asnt_desc_t asnt_network_assisted_ho_supported;


/*
    Type Name :  Destination Identifier
    Type: 271
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets).
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique identifier for the message destination.
    Parent TLV: None
*/
#define ASNT_DESTINATION_IDENTIFIER 271
#define ASNL_DESTINATION_IDENTIFIER ASNL_VARIABLE
typedef asnv_octets_t asnv_destination_identifier_t;
extern asnt_desc_t asnt_destination_identifier;


/*
    Type Name :  Source Identifier
    Type: 272
    Length in octets: Variable (could be of three fixed sized: 4, 6 and 16 octets).
    Value: The Identifier might be in format of either 4-octet IPv4 Address, 6-octet IEEE 802.16 BS ID or 16-octet IPv6 Address. The length defines also the format of the Identifier.
    Description: Unique identifier for the message source.
    Parent TLV: None
*/
#define ASNT_SOURCE_IDENTIFIER 272
#define ASNL_SOURCE_IDENTIFIER ASNL_VARIABLE
typedef asnv_octets_t asnv_source_identifier_t;
extern asnt_desc_t asnt_source_identifier;


/*
    Type Name :  R3 Relocation Action
    Type: 273
    Length in octets: 1
    Value: Enumerator. The values are:
0x00 = None
0x01 = Initiate Paging
0x02 = Initiate FA Migration
    Description: R3 Relocation Action Code.
    Message Primitives That use this TLV: Relocation_Ready_Rsp
*/
#define ASNT_R3_RELOCATION_ACTION 273
#define ASNL_R3_RELOCATION_ACTION 1
typedef asnv_uint8_t asnv_r3_relocation_action_t;
extern asnt_desc_t asnt_r3_relocation_action;


/*
    Type Name :  Ungraceful Network Exit Indicator
    Type: 274
    Length in octets: 1 
    Value: Enumerator. The values are:
0x00 – Ungraceful Network Exit No Reason
0x01 – AAA initiated Ungraceful Network Exit
0x02 – Authenticator initiated Ungraceful Network Exit
0x03 – Ungraceful Network Exit by MIP session termination
0x04 – PC initiated Ungraceful Network Exit 
    Description: This TLV indicates the cause of the ungraceful Network Exit. This TLV SHALL be included to indicate an ungraceful network exit. The default values is 0x00 for the transmitter and the interpretation of the values is optional for the receiver.
    Message Primitives That Use This TLV: NetExit_MS_State_Change_Req
*/
#define ASNT_UNGRACEFUL_NETWORK_EXIT_INDICATOR 274
#define ASNL_UNGRACEFUL_NETWORK_EXIT_INDICATOR 1
typedef asnv_uint8_t asnv_ungraceful_network_exit_indicator_t;
extern asnt_desc_t asnt_ungraceful_network_exit_indicator;


/*
    Type Name :  Accounting Bulk Session/Flow Volume Counts
    Type: 359  
    Length in octets: Variable
    Description: The volume count information for several sessions or service flows.
    Elements (Sub-TLVs): TLV Name
Description
M/O
    Accounting Number of Bulk Sessions/Flows: 

M
    Accounting Bulk Session/Flow: 

M
    Parent TLV(s): Offline Accounting Context
*/
#define ASNT_ACCOUNTING_BULK_SESSION_FLOW_VOLUME_COUNTS 359
#define ASNL_ACCOUNTING_BULK_SESSION_FLOW_VOLUME_COUNTS ASNL_VARIABLE
typedef struct _asnv_accounting_bulk_session_flow_volume_counts_t {
    asnv_header_t h;
    asnv_accounting_number_of_bulk_sessions_flows_t accounting_number_of_bulk_sessions_flows;
    asnv_accounting_bulk_session_flow_t accounting_bulk_session_flow;
} asnv_accounting_bulk_session_flow_volume_counts_t;
extern asnt_desc_t asnt_accounting_bulk_session_flow_volume_counts;


/*
    Type Name :  Offline Accounting Context
    Type: 360
    Length in octets: Variable
    Value: Compound
    Description: Accounting context for Offline accounting
    Elements (Sub- TLVs): TLV Name
M/O
    Accounting Bulk Session/Flow Volume Counts : M
    Message Primitives That Use This TLV: RR_Rsp, Bulk Interim Update, Path_Dereg_Req, IM_Entry_State_Change_Req, NetExit_MS_State_Change_Req, NetExit_MS_State_Change_Rsp, Context_Rpt
*/
#define ASNT_OFFLINE_ACCOUNTING_CONTEXT 360
#define ASNL_OFFLINE_ACCOUNTING_CONTEXT ASNL_VARIABLE
typedef struct _asnv_offline_accounting_context_t {
    asnv_header_t h;
    asnv_accounting_bulk_session_flow_volume_counts_t accounting_bulk_session_flow_volume_counts;
} asnv_offline_accounting_context_t;
extern asnt_desc_t asnt_offline_accounting_context;


/*
    Type Name :  Delete MS Context Indication
    Type: 366
    Length: 1
    Value: Unsigned Integer
    Description: Indicates the release of the MS context.
    Parent TLV: None
*/
#define ASNT_DELETE_MS_CONTEXT_INDICATION 366
#define ASNL_DELETE_MS_CONTEXT_INDICATION 1
typedef asnv_uint8_t asnv_delete_ms_context_indication_t;
extern asnt_desc_t asnt_delete_ms_context_indication;


/*
    Type Name :  Idle Mode Exit Indicator
    Type: 369
    Length in octets: 1
    Description: Enumerated. The values are: 
0x00 = Idle Mode Exit 
0x01 = MS in Idle Mode 
    Value: Present in operations related to MS Idle Mode Exit and indicates whether MS’s Serving ASN has MS Context.
    Parent TLV: 

    Message Primitives that use this TLV: CMAC_Key_Count_Update, IM_Exit_State_Ind
*/
#define ASNT_IDLE_MODE_EXIT_INDICATOR 369
#define ASNL_IDLE_MODE_EXIT_INDICATOR 1
typedef asnv_octets_t asnv_idle_mode_exit_indicator_t;
extern asnt_desc_t asnt_idle_mode_exit_indicator;


/*
    Type Name :  WiMAX message TLV position
    Type: 371
    Length in octets: 3 * n   (n  &gt;= 1)
    Description: A sequence of n times
2 bytes indicating a TLV Type (see section 5.3.1), to be called Tk below
an 8-bit unsigned integer, to be called Rk below
    Value: This TLV identifies an occurence of  a TLV, the "reported TLV", in a received message: 
    Parent TLV: Failure Indication Details
*/
#define ASNT_WIMAX_MESSAGE_TLV_POSITION 371
#define ASNL_WIMAX_MESSAGE_TLV_POSITION 3
typedef asnv_octets_t asnv_wimax_message_tlv_position_t;
extern asnt_desc_t asnt_wimax_message_tlv_position;


/*
    Type Name :  Failure Indication Details
    
: Type
370
    
: Length in octets
Variable
    
: Value
Compound
    
: Description
Contains details in addition to the information provided by the Failure Indication TLV. 
 If the WiMAX message TLV position TLV is present, it SHALL indicate the occurence of a TLV in which an error was diagnosed by the message receiver.
    Elements (Sub-TLVs): TLV Name
M/O
    
: 

    WiMAX message TLV position: O (Note 1)
    Parent TLV(s): None.
    Message Primitives that use this TLV: Any error message (Error Response message or Error Reflection message, see 3.4.2).
*/
#define ASNT_FAILURE_INDICATION_DETAILS 370
#define ASNL_FAILURE_INDICATION_DETAILS ASNL_VARIABLE
typedef struct _asnv_failure_indication_details_t {
    asnv_header_t h;
    asnv_wimax_message_tlv_position_t wimax_message_tlv_position;
} asnv_failure_indication_details_t;
extern asnt_desc_t asnt_failure_indication_details;


/*
    Type Name :  FA Security Info
    Type: 372
    Length in octets: Variable
    Value: Compound
    Description: Information about the MIPv4 Security Info for FA
    Elements (Sub-TLVs): TLV Name
M/O
    MN-FA Key : O
    MN-FA Key Lifetime: O
    MN-FA SPI: O
    FA-HA Key : O
    FA-HA SPI: O
    FA-HA Key Lifetime: O
    Message Primitives That Use This TLV: Context_Rpt
*/
#define ASNT_FA_SECURITY_INFO 372
#define ASNL_FA_SECURITY_INFO ASNL_VARIABLE
typedef struct _asnv_fa_security_info_t {
    asnv_header_t h;
    asnv_mn_fa_key_t mn_fa_key;
    asnv_mn_fa_key_lifetime_t mn_fa_key_lifetime;
    asnv_mn_fa_spi_t mn_fa_spi;
    asnv_fa_ha_key_t fa_ha_key;
    asnv_fa_ha_key_spi_t fa_ha_key_spi;
    asnv_fa_ha_key_lifetime_t fa_ha_key_lifetime;
} asnv_fa_security_info_t;
extern asnt_desc_t asnt_fa_security_info;


/*
    Type Name :  Vendor Specific TLV
    Type: 0x7FFF (524287)
    Length in Octets : Variable 
    Value: Vendor Specific information Field (VSIF).
    Message Primitives That Use This TLV: Every message
*/
#define ASNT_VENDOR_SPECIFIC_TLV 32767
#define ASNL_VENDOR_SPECIFIC_TLV ASNL_VARIABLE
typedef asnv_octets_t asnv_vendor_specific_tlv_t;
extern asnt_desc_t asnt_vendor_specific_tlv;


